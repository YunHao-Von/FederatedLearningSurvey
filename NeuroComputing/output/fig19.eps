%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: <4FEE><6539>3.0.pdf
%%Creator: Adobe Acrobat 20.6.0
%%For: A
%%CreationDate: 2023/9/20, 11:00:40
%%BoundingBox: -1 0 911 532
%%HiResBoundingBox: 0 0 910.2551 531.4931
%%CropBox: 0 0 910.2551 531.4931
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1287 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   pdfx:Comments=""
   pdfx:Company=""
   pdfx:SourceModified="D:20230920101548+02'15'"
   xmp:CreateDate="2023-09-20T10:15:48+02:00"
   xmp:CreatorTool="WPS 演示"
   xmp:ModifyDate="2023-09-20T10:34:31+08:00"
   xmp:MetadataDate="2023-09-20T10:34:31+08:00"
   pdf:Keywords=""
   pdf:Producer=""
   pdf:Trapped="False"
   xmpMM:DocumentID="uuid:2c2b7a9c-fd1c-48e7-a8f3-4101ebcf3fc0"
   xmpMM:InstanceID="uuid:1be60ad7-ce35-4353-8733-5d405a19ea09">
   <dc:creator>
    <rdf:Seq>
     <rdf:li/>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 16 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -531.493 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-1.52588e-5 0 mo
-1.52588e-5 531.493 li
910.255 531.493 li
910.255 0 li
cp
clp
gsave
-113.455 -181.528 mo
1020.39 -181.528 li
1020.39 668.822 li
-113.455 668.822 li
cp
eclp
-113.455 -181.528 mo
1020.42 -181.528 li
1020.42 668.792 li
-113.455 668.792 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
139.265 158.432 mo
139.24 154.728 142.229 151.739 145.916 151.739 cv
149.602 151.739 152.591 154.728 152.591 158.414 cv
152.591 162.101 149.602 165.09 145.916 165.09 cv
142.229 165.09 139.24 162.101 139.265 158.432 cv
.92929 .879301 .889677 .799283 cmyk
ef
138.749 158.046 mo
138.777 157.681 li
138.823 157.322 li
138.886 156.969 li
138.966 156.622 li
139.063 156.281 li
139.176 155.947 li
139.304 155.621 li
139.448 155.303 li
139.606 154.994 li
139.779 154.693 li
139.966 154.402 li
140.166 154.121 li
140.379 153.85 li
140.604 153.59 li
140.842 153.341 li
141.091 153.103 li
141.351 152.878 li
141.622 152.665 li
141.903 152.465 li
142.194 152.278 li
142.495 152.105 li
142.804 151.947 li
143.122 151.803 li
143.448 151.674 li
143.782 151.562 li
144.123 151.465 li
144.47 151.385 li
144.823 151.322 li
145.183 151.276 li
145.547 151.248 li
145.916 151.239 li
146.284 151.248 li
146.649 151.276 li
147.008 151.322 li
147.361 151.385 li
147.708 151.465 li
148.049 151.562 li
148.383 151.674 li
148.709 151.803 li
149.027 151.947 li
149.336 152.105 li
149.637 152.278 li
149.928 152.465 li
150.209 152.665 li
150.48 152.878 li
150.74 153.103 li
150.989 153.341 li
151.227 153.59 li
151.452 153.85 li
151.665 154.121 li
151.865 154.402 li
152.052 154.693 li
152.225 154.994 li
152.383 155.303 li
152.527 155.621 li
152.656 155.947 li
152.768 156.281 li
152.865 156.622 li
152.945 156.969 li
153.008 157.322 li
153.054 157.681 li
153.082 158.046 li
153.091 158.414 li
153.082 158.783 li
153.054 159.147 li
153.008 159.507 li
152.945 159.86 li
152.865 160.207 li
152.768 160.548 li
152.656 160.882 li
152.527 161.208 li
152.383 161.526 li
152.225 161.835 li
152.052 162.136 li
151.865 162.427 li
151.665 162.708 li
151.452 162.979 li
151.227 163.239 li
150.989 163.488 li
150.74 163.726 li
150.48 163.951 li
150.209 164.164 li
149.928 164.364 li
149.637 164.551 li
149.336 164.724 li
149.027 164.882 li
148.709 165.026 li
148.383 165.154 li
148.049 165.267 li
147.708 165.364 li
147.361 165.444 li
147.008 165.507 li
146.649 165.553 li
146.284 165.581 li
145.916 165.59 li
145.547 165.581 li
145.183 165.553 li
144.823 165.507 li
144.47 165.444 li
144.123 165.364 li
143.782 165.267 li
143.448 165.154 li
143.122 165.026 li
142.804 164.882 li
142.495 164.724 li
142.194 164.551 li
141.903 164.364 li
141.622 164.164 li
141.351 163.951 li
141.091 163.726 li
140.842 163.488 li
140.604 163.239 li
140.379 162.979 li
140.166 162.708 li
139.966 162.427 li
139.779 162.136 li
139.606 161.835 li
139.448 161.526 li
139.304 161.208 li
139.176 160.882 li
139.063 160.548 li
138.966 160.207 li
138.886 159.86 li
138.823 159.507 li
138.777 159.147 li
138.749 158.783 li
138.74 158.414 li
138.749 158.046 li
cp
139.74 158.427 mo
139.74 158.402 li
139.749 158.745 li
139.747 158.72 li
139.773 159.059 li
139.771 159.034 li
139.813 159.368 li
139.809 159.343 li
139.868 159.672 li
139.863 159.647 li
139.938 159.97 li
139.931 159.946 li
140.021 160.263 li
140.014 160.239 li
140.119 160.549 li
140.11 160.526 li
140.23 160.829 li
140.22 160.807 li
140.354 161.103 li
140.343 161.081 li
140.491 161.368 li
140.479 161.347 li
140.64 161.627 li
140.628 161.606 li
140.801 161.877 li
140.788 161.857 li
140.974 162.119 li
140.959 162.099 li
141.158 162.352 li
141.142 162.333 li
141.352 162.575 li
141.336 162.558 li
141.557 162.79 li
141.54 162.773 li
141.772 162.994 li
141.755 162.978 li
141.997 163.188 li
141.978 163.172 li
142.231 163.37 li
142.211 163.356 li
142.473 163.542 li
142.453 163.529 li
142.724 163.702 li
142.703 163.69 li
142.983 163.851 li
142.962 163.839 li
143.249 163.986 li
143.227 163.976 li
143.523 164.11 li
143.501 164.1 li
143.804 164.22 li
143.781 164.211 li
144.091 164.316 li
144.067 164.309 li
144.384 164.399 li
144.36 164.392 li
144.683 164.467 li
144.658 164.462 li
144.987 164.521 li
144.962 164.517 li
145.296 164.559 li
145.271 164.557 li
145.61 164.583 li
145.585 164.581 li
145.928 164.59 li
145.903 164.59 li
146.246 164.581 li
146.221 164.583 li
146.56 164.557 li
146.535 164.559 li
146.869 164.517 li
146.844 164.521 li
147.173 164.462 li
147.148 164.467 li
147.471 164.392 li
147.447 164.399 li
147.764 164.309 li
147.74 164.316 li
148.05 164.211 li
148.027 164.22 li
148.33 164.1 li
148.308 164.11 li
148.604 163.976 li
148.582 163.986 li
148.869 163.839 li
148.848 163.851 li
149.128 163.69 li
149.107 163.702 li
149.378 163.529 li
149.358 163.542 li
149.62 163.356 li
149.601 163.37 li
149.853 163.172 li
149.834 163.188 li
150.077 162.978 li
150.059 162.994 li
150.291 162.773 li
150.274 162.79 li
150.495 162.558 li
150.479 162.575 li
150.689 162.333 li
150.673 162.352 li
150.872 162.099 li
150.857 162.119 li
151.043 161.857 li
151.03 161.877 li
151.204 161.606 li
151.191 161.627 li
151.352 161.347 li
151.34 161.368 li
151.488 161.081 li
151.477 161.103 li
151.611 160.807 li
151.601 160.829 li
151.721 160.526 li
151.712 160.549 li
151.817 160.239 li
151.81 160.263 li
151.9 159.946 li
151.894 159.97 li
151.968 159.647 li
151.963 159.672 li
152.022 159.343 li
152.018 159.368 li
152.06 159.034 li
152.058 159.059 li
152.084 158.72 li
152.082 158.745 li
152.091 158.402 li
152.091 158.427 li
152.082 158.084 li
152.084 158.109 li
152.058 157.77 li
152.06 157.795 li
152.018 157.461 li
152.022 157.486 li
151.963 157.157 li
151.968 157.182 li
151.894 156.859 li
151.9 156.883 li
151.81 156.566 li
151.817 156.59 li
151.712 156.279 li
151.721 156.303 li
151.601 155.999 li
151.611 156.022 li
151.477 155.726 li
151.488 155.748 li
151.34 155.46 li
151.352 155.482 li
151.191 155.202 li
151.204 155.223 li
151.03 154.952 li
151.043 154.972 li
150.857 154.71 li
150.872 154.729 li
150.673 154.477 li
150.689 154.496 li
150.479 154.253 li
150.495 154.271 li
150.274 154.039 li
150.291 154.056 li
150.059 153.835 li
150.077 153.851 li
149.834 153.641 li
149.853 153.657 li
149.601 153.458 li
149.62 153.473 li
149.358 153.287 li
149.378 153.3 li
149.107 153.126 li
149.128 153.139 li
148.848 152.978 li
148.869 152.99 li
148.582 152.842 li
148.604 152.853 li
148.308 152.719 li
148.33 152.729 li
148.027 152.609 li
148.05 152.618 li
147.74 152.513 li
147.764 152.52 li
147.447 152.43 li
147.471 152.436 li
147.148 152.362 li
147.173 152.367 li
146.844 152.308 li
146.869 152.312 li
146.535 152.27 li
146.56 152.272 li
146.221 152.246 li
146.246 152.248 li
145.903 152.239 li
145.928 152.239 li
145.585 152.248 li
145.61 152.246 li
145.271 152.272 li
145.296 152.27 li
144.962 152.312 li
144.987 152.308 li
144.658 152.367 li
144.683 152.362 li
144.36 152.436 li
144.384 152.43 li
144.067 152.52 li
144.091 152.513 li
143.781 152.618 li
143.804 152.609 li
143.501 152.729 li
143.523 152.719 li
143.227 152.853 li
143.249 152.842 li
142.962 152.99 li
142.983 152.978 li
142.703 153.139 li
142.724 153.126 li
142.453 153.3 li
142.473 153.287 li
142.211 153.473 li
142.231 153.458 li
141.978 153.657 li
141.997 153.641 li
141.755 153.851 li
141.772 153.835 li
141.54 154.056 li
141.557 154.039 li
141.336 154.271 li
141.352 154.253 li
141.142 154.496 li
141.158 154.477 li
140.959 154.729 li
140.974 154.71 li
140.788 154.972 li
140.801 154.952 li
140.628 155.223 li
140.64 155.202 li
140.479 155.482 li
140.491 155.46 li
140.343 155.748 li
140.354 155.726 li
140.22 156.022 li
140.23 155.999 li
140.11 156.303 li
140.119 156.279 li
140.014 156.59 li
140.021 156.566 li
139.931 156.883 li
139.938 156.859 li
139.863 157.182 li
139.868 157.157 li
139.809 157.486 li
139.813 157.461 li
139.771 157.795 li
139.773 157.77 li
139.747 158.109 li
139.749 158.084 li
139.74 158.427 li
f
134.465 181.952 mo
134.465 175.712 li
134.44 172.288 140.014 169.49 146.891 169.49 cv
153.767 169.49 159.341 172.288 159.305 175.712 cv
159.305 181.952 li
134.465 181.952 li
ef
133.94 175.728 mo
133.958 175.369 li
134.014 175.002 li
134.104 174.643 li
134.229 174.292 li
134.386 173.95 li
134.574 173.618 li
134.791 173.297 li
135.036 172.985 li
135.307 172.684 li
135.603 172.394 li
135.924 172.114 li
136.268 171.844 li
136.635 171.586 li
137.023 171.337 li
137.432 171.1 li
137.862 170.874 li
138.311 170.659 li
138.779 170.455 li
139.265 170.264 li
139.769 170.084 li
140.289 169.917 li
140.824 169.762 li
141.375 169.62 li
141.94 169.492 li
142.519 169.378 li
143.111 169.277 li
143.715 169.191 li
144.33 169.12 li
144.956 169.063 li
145.592 169.023 li
146.237 168.998 li
146.891 168.99 li
147.544 168.998 li
148.189 169.023 li
148.825 169.063 li
149.451 169.12 li
150.066 169.191 li
150.67 169.277 li
151.262 169.378 li
151.841 169.492 li
152.406 169.62 li
152.957 169.762 li
153.493 169.917 li
154.013 170.084 li
154.516 170.264 li
155.002 170.455 li
155.47 170.659 li
155.919 170.874 li
156.349 171.1 li
156.758 171.337 li
157.147 171.586 li
157.513 171.844 li
157.857 172.114 li
158.178 172.394 li
158.475 172.684 li
158.746 172.985 li
158.99 173.297 li
159.207 173.618 li
159.395 173.95 li
159.552 174.292 li
159.677 174.643 li
159.768 175.002 li
159.823 175.369 li
159.841 175.728 li
159.841 182.491 li
133.94 182.491 li
133.94 175.728 li
cp
134.94 181.991 mo
134.44 181.491 li
159.341 181.491 li
158.841 181.991 li
158.841 175.74 li
158.842 175.766 li
158.826 175.444 li
158.831 175.494 li
158.783 175.176 li
158.792 175.224 li
158.713 174.911 li
158.727 174.956 li
158.617 174.648 li
158.634 174.69 li
158.495 174.387 li
158.514 174.424 li
158.346 174.128 li
158.367 174.161 li
158.171 173.871 li
158.192 173.9 li
157.97 173.616 li
157.991 173.642 li
157.742 173.365 li
157.763 173.388 li
157.488 173.118 li
157.51 173.138 li
157.21 172.876 li
157.23 172.893 li
156.907 172.639 li
156.926 172.654 li
156.579 172.409 li
156.599 172.422 li
156.229 172.186 li
156.247 172.197 li
155.856 171.97 li
155.874 171.98 li
155.462 171.763 li
155.479 171.772 li
155.046 171.565 li
155.063 171.572 li
154.611 171.376 li
154.627 171.382 li
154.156 171.197 li
154.172 171.203 li
153.684 171.028 li
153.699 171.033 li
153.193 170.871 li
153.208 170.875 li
152.687 170.725 li
152.701 170.729 li
152.164 170.591 li
152.178 170.594 li
151.626 170.469 li
151.64 170.472 li
151.074 170.36 li
151.088 170.362 li
150.509 170.264 li
150.522 170.266 li
149.932 170.182 li
149.945 170.183 li
149.342 170.114 li
149.355 170.115 li
148.742 170.06 li
148.755 170.061 li
148.132 170.021 li
148.145 170.022 li
147.512 169.998 li
147.525 169.998 li
146.884 169.99 li
146.897 169.99 li
146.256 169.998 li
146.269 169.998 li
145.637 170.022 li
145.649 170.021 li
145.026 170.061 li
145.039 170.06 li
144.426 170.115 li
144.439 170.114 li
143.837 170.183 li
143.85 170.182 li
143.259 170.266 li
143.272 170.264 li
142.693 170.362 li
142.707 170.36 li
142.141 170.472 li
142.155 170.469 li
141.603 170.594 li
141.617 170.591 li
141.08 170.729 li
141.095 170.725 li
140.573 170.875 li
140.588 170.871 li
140.082 171.033 li
140.097 171.028 li
139.609 171.203 li
139.625 171.197 li
139.154 171.382 li
139.17 171.376 li
138.718 171.572 li
138.735 171.565 li
138.303 171.772 li
138.32 171.763 li
137.907 171.98 li
137.925 171.97 li
137.534 172.197 li
137.552 172.186 li
137.183 172.422 li
137.202 172.409 li
136.855 172.654 li
136.875 172.639 li
136.551 172.893 li
136.571 172.876 li
136.272 173.138 li
136.293 173.118 li
136.018 173.388 li
136.039 173.365 li
135.79 173.642 li
135.812 173.616 li
135.589 173.9 li
135.61 173.871 li
135.414 174.161 li
135.435 174.128 li
135.267 174.424 li
135.286 174.387 li
135.147 174.69 li
135.164 174.648 li
135.054 174.956 li
135.068 174.911 li
134.989 175.224 li
134.999 175.176 li
134.951 175.494 li
134.956 175.444 li
134.939 175.766 li
134.94 175.74 li
134.94 181.991 li
f
139.265 203.072 mo
139.24 199.38 142.229 196.391 145.916 196.391 cv
149.602 196.391 152.591 199.38 152.591 203.067 cv
152.591 206.753 149.602 209.742 145.916 209.742 cv
142.229 209.742 139.24 206.753 139.265 203.072 cv
ef
138.749 202.698 mo
138.777 202.334 li
138.823 201.975 li
138.886 201.621 li
138.966 201.274 li
139.063 200.933 li
139.176 200.6 li
139.304 200.274 li
139.448 199.956 li
139.606 199.646 li
139.779 199.346 li
139.966 199.054 li
140.166 198.773 li
140.379 198.502 li
140.604 198.242 li
140.842 197.993 li
141.091 197.755 li
141.351 197.53 li
141.622 197.317 li
141.903 197.117 li
142.194 196.93 li
142.495 196.758 li
142.804 196.599 li
143.122 196.455 li
143.448 196.327 li
143.782 196.214 li
144.123 196.117 li
144.47 196.037 li
144.823 195.974 li
145.183 195.928 li
145.547 195.901 li
145.916 195.891 li
146.284 195.901 li
146.649 195.928 li
147.008 195.974 li
147.361 196.037 li
147.708 196.117 li
148.049 196.214 li
148.383 196.327 li
148.709 196.455 li
149.027 196.599 li
149.336 196.758 li
149.637 196.93 li
149.928 197.117 li
150.209 197.317 li
150.48 197.53 li
150.74 197.755 li
150.989 197.993 li
151.227 198.242 li
151.452 198.502 li
151.665 198.773 li
151.865 199.054 li
152.052 199.346 li
152.225 199.646 li
152.383 199.956 li
152.527 200.274 li
152.656 200.6 li
152.768 200.933 li
152.865 201.274 li
152.945 201.621 li
153.008 201.975 li
153.054 202.334 li
153.082 202.698 li
153.091 203.067 li
153.082 203.436 li
153.054 203.8 li
153.008 204.159 li
152.945 204.512 li
152.865 204.86 li
152.768 205.2 li
152.656 205.534 li
152.527 205.86 li
152.383 206.178 li
152.225 206.487 li
152.052 206.788 li
151.865 207.079 li
151.665 207.36 li
151.452 207.631 li
151.227 207.891 li
150.989 208.141 li
150.74 208.378 li
150.48 208.604 li
150.209 208.816 li
149.928 209.016 li
149.637 209.203 li
149.336 209.376 li
149.027 209.534 li
148.709 209.678 li
148.383 209.807 li
148.049 209.92 li
147.708 210.016 li
147.361 210.096 li
147.008 210.16 li
146.649 210.205 li
146.284 210.233 li
145.916 210.242 li
145.547 210.233 li
145.183 210.205 li
144.823 210.16 li
144.47 210.096 li
144.123 210.016 li
143.782 209.92 li
143.448 209.807 li
143.122 209.678 li
142.804 209.534 li
142.495 209.376 li
142.194 209.203 li
141.903 209.016 li
141.622 208.816 li
141.351 208.604 li
141.091 208.378 li
140.842 208.141 li
140.604 207.891 li
140.379 207.631 li
140.166 207.36 li
139.966 207.079 li
139.779 206.788 li
139.606 206.487 li
139.448 206.178 li
139.304 205.86 li
139.176 205.534 li
139.063 205.2 li
138.966 204.86 li
138.886 204.512 li
138.823 204.159 li
138.777 203.8 li
138.749 203.436 li
138.74 203.067 li
138.749 202.698 li
cp
139.74 203.079 mo
139.74 203.054 li
139.749 203.398 li
139.747 203.372 li
139.773 203.711 li
139.771 203.686 li
139.813 204.02 li
139.809 203.995 li
139.868 204.324 li
139.863 204.3 li
139.938 204.623 li
139.931 204.598 li
140.021 204.915 li
140.014 204.892 li
140.119 205.202 li
140.11 205.179 li
140.23 205.482 li
140.22 205.459 li
140.354 205.755 li
140.343 205.733 li
140.491 206.021 li
140.479 205.999 li
140.64 206.279 li
140.628 206.258 li
140.801 206.529 li
140.788 206.509 li
140.974 206.771 li
140.959 206.752 li
141.158 207.004 li
141.142 206.985 li
141.352 207.228 li
141.336 207.21 li
141.557 207.442 li
141.54 207.425 li
141.772 207.646 li
141.755 207.63 li
141.997 207.84 li
141.978 207.825 li
142.231 208.023 li
142.211 208.008 li
142.473 208.195 li
142.453 208.181 li
142.724 208.355 li
142.703 208.342 li
142.983 208.503 li
142.962 208.491 li
143.249 208.639 li
143.227 208.628 li
143.523 208.762 li
143.501 208.752 li
143.804 208.872 li
143.781 208.863 li
144.091 208.968 li
144.067 208.961 li
144.384 209.051 li
144.36 209.045 li
144.683 209.119 li
144.658 209.114 li
144.987 209.173 li
144.962 209.169 li
145.296 209.212 li
145.271 209.209 li
145.61 209.235 li
145.585 209.234 li
145.928 209.242 li
145.903 209.242 li
146.246 209.234 li
146.221 209.235 li
146.56 209.209 li
146.535 209.212 li
146.869 209.169 li
146.844 209.173 li
147.173 209.114 li
147.148 209.119 li
147.471 209.045 li
147.447 209.051 li
147.764 208.961 li
147.74 208.968 li
148.05 208.863 li
148.027 208.872 li
148.33 208.752 li
148.308 208.762 li
148.604 208.628 li
148.582 208.639 li
148.869 208.491 li
148.848 208.503 li
149.128 208.342 li
149.107 208.355 li
149.378 208.181 li
149.358 208.195 li
149.62 208.008 li
149.601 208.023 li
149.853 207.825 li
149.834 207.84 li
150.077 207.63 li
150.059 207.646 li
150.291 207.425 li
150.274 207.442 li
150.495 207.21 li
150.479 207.228 li
150.689 206.985 li
150.673 207.004 li
150.872 206.752 li
150.857 206.771 li
151.043 206.509 li
151.03 206.529 li
151.204 206.258 li
151.191 206.279 li
151.352 205.999 li
151.34 206.021 li
151.488 205.733 li
151.477 205.755 li
151.611 205.459 li
151.601 205.482 li
151.721 205.179 li
151.712 205.202 li
151.817 204.892 li
151.81 204.915 li
151.9 204.598 li
151.894 204.623 li
151.968 204.3 li
151.963 204.324 li
152.022 203.995 li
152.018 204.02 li
152.06 203.686 li
152.058 203.711 li
152.084 203.372 li
152.082 203.398 li
152.091 203.054 li
152.091 203.079 li
152.082 202.736 li
152.084 202.761 li
152.058 202.422 li
152.06 202.447 li
152.018 202.113 li
152.022 202.138 li
151.963 201.809 li
151.968 201.834 li
151.894 201.511 li
151.9 201.535 li
151.81 201.218 li
151.817 201.242 li
151.712 200.932 li
151.721 200.955 li
151.601 200.652 li
151.611 200.674 li
151.477 200.379 li
151.488 200.401 li
151.34 200.113 li
151.352 200.134 li
151.191 199.855 li
151.204 199.875 li
151.03 199.604 li
151.043 199.624 li
150.857 199.363 li
150.872 199.382 li
150.673 199.13 li
150.689 199.148 li
150.479 198.906 li
150.495 198.923 li
150.274 198.692 li
150.291 198.708 li
150.059 198.487 li
150.077 198.503 li
149.834 198.294 li
149.853 198.309 li
149.601 198.111 li
149.62 198.125 li
149.358 197.939 li
149.378 197.952 li
149.107 197.779 li
149.128 197.791 li
148.848 197.631 li
148.869 197.642 li
148.582 197.495 li
148.604 197.505 li
148.308 197.372 li
148.33 197.381 li
148.027 197.262 li
148.05 197.27 li
147.74 197.165 li
147.764 197.172 li
147.447 197.083 li
147.471 197.089 li
147.148 197.014 li
147.173 197.019 li
146.844 196.96 li
146.869 196.964 li
146.535 196.922 li
146.56 196.924 li
146.221 196.899 li
146.246 196.9 li
145.903 196.891 li
145.928 196.891 li
145.585 196.9 li
145.61 196.899 li
145.271 196.924 li
145.296 196.922 li
144.962 196.964 li
144.987 196.96 li
144.658 197.019 li
144.683 197.014 li
144.36 197.089 li
144.384 197.083 li
144.067 197.172 li
144.091 197.165 li
143.781 197.27 li
143.804 197.262 li
143.501 197.381 li
143.523 197.372 li
143.227 197.505 li
143.249 197.495 li
142.962 197.642 li
142.983 197.631 li
142.703 197.791 li
142.724 197.779 li
142.453 197.952 li
142.473 197.939 li
142.211 198.125 li
142.231 198.111 li
141.978 198.309 li
141.997 198.294 li
141.755 198.503 li
141.772 198.487 li
141.54 198.708 li
141.557 198.692 li
141.336 198.923 li
141.352 198.906 li
141.142 199.148 li
141.158 199.13 li
140.959 199.382 li
140.974 199.363 li
140.788 199.624 li
140.801 199.604 li
140.628 199.875 li
140.64 199.855 li
140.479 200.134 li
140.491 200.113 li
140.343 200.401 li
140.354 200.379 li
140.22 200.674 li
140.23 200.652 li
140.11 200.955 li
140.119 200.932 li
140.014 201.242 li
140.021 201.218 li
139.931 201.535 li
139.938 201.511 li
139.863 201.834 li
139.868 201.809 li
139.809 202.138 li
139.813 202.113 li
139.771 202.447 li
139.773 202.422 li
139.747 202.761 li
139.749 202.736 li
139.74 203.079 li
f
39.52 490.522 mo
39.52 483.772 li
41.77 483.772 li
41.77 490.522 li
39.52 490.522 li
cp
39.52 481.522 mo
39.52 474.772 li
41.77 474.772 li
41.77 481.522 li
39.52 481.522 li
cp
39.52 472.522 mo
39.52 465.772 li
41.77 465.772 li
41.77 472.522 li
39.52 472.522 li
cp
39.52 463.522 mo
39.52 456.772 li
41.77 456.772 li
41.77 463.522 li
39.52 463.522 li
cp
39.52 454.522 mo
39.52 447.772 li
41.77 447.772 li
41.77 454.522 li
39.52 454.522 li
cp
39.52 445.522 mo
39.52 438.772 li
41.77 438.772 li
41.77 445.522 li
39.52 445.522 li
cp
39.52 436.522 mo
39.52 429.772 li
41.77 429.772 li
41.77 436.522 li
39.52 436.522 li
cp
39.52 427.522 mo
39.52 420.772 li
41.77 420.772 li
41.77 427.522 li
39.52 427.522 li
cp
39.52 418.522 mo
39.52 411.772 li
41.77 411.772 li
41.77 418.522 li
39.52 418.522 li
cp
39.52 409.522 mo
39.52 402.772 li
41.77 402.772 li
41.77 409.522 li
39.52 409.522 li
cp
39.52 400.522 mo
39.52 393.772 li
41.77 393.772 li
41.77 400.522 li
39.52 400.522 li
cp
39.52 391.522 mo
39.52 384.772 li
41.77 384.772 li
41.77 391.522 li
39.52 391.522 li
cp
39.52 382.522 mo
39.52 375.772 li
41.77 375.772 li
41.77 382.522 li
39.52 382.522 li
cp
39.52 373.522 mo
39.52 366.772 li
41.77 366.772 li
41.77 373.522 li
39.52 373.522 li
cp
39.52 364.522 mo
39.52 357.772 li
41.77 357.772 li
41.77 364.522 li
39.52 364.522 li
cp
39.52 355.522 mo
39.52 348.772 li
41.77 348.772 li
41.77 355.522 li
39.52 355.522 li
cp
39.52 346.522 mo
39.52 339.772 li
41.77 339.772 li
41.77 346.522 li
39.52 346.522 li
cp
39.52 337.522 mo
39.52 330.772 li
41.77 330.772 li
41.77 337.522 li
39.52 337.522 li
cp
39.52 328.522 mo
39.52 321.772 li
41.77 321.772 li
41.77 328.522 li
39.52 328.522 li
cp
39.52 319.522 mo
39.52 312.772 li
41.77 312.772 li
41.77 319.522 li
39.52 319.522 li
cp
39.52 310.522 mo
39.52 303.772 li
41.77 303.772 li
41.77 310.522 li
39.52 310.522 li
cp
39.52 301.522 mo
39.52 294.772 li
41.77 294.772 li
41.77 301.522 li
39.52 301.522 li
cp
39.52 292.522 mo
39.52 285.772 li
41.77 285.772 li
41.77 292.522 li
39.52 292.522 li
cp
39.52 283.522 mo
39.52 276.772 li
41.77 276.772 li
41.77 283.522 li
39.52 283.522 li
cp
39.52 274.522 mo
39.52 267.772 li
41.77 267.772 li
41.77 274.522 li
39.52 274.522 li
cp
39.52 265.522 mo
39.52 258.772 li
41.77 258.772 li
41.77 265.522 li
39.52 265.522 li
cp
39.52 256.522 mo
39.52 249.772 li
41.77 249.772 li
41.77 256.522 li
39.52 256.522 li
cp
39.52 247.522 mo
39.52 240.772 li
41.77 240.772 li
41.77 247.522 li
39.52 247.522 li
cp
39.52 238.522 mo
39.52 231.772 li
41.77 231.772 li
41.77 238.522 li
39.52 238.522 li
cp
39.52 229.522 mo
39.52 222.772 li
41.77 222.772 li
41.77 229.522 li
39.52 229.522 li
cp
39.52 220.522 mo
39.52 213.772 li
41.77 213.772 li
41.77 220.522 li
39.52 220.522 li
cp
39.52 211.522 mo
39.52 204.772 li
41.77 204.772 li
41.77 211.522 li
39.52 211.522 li
cp
39.52 202.522 mo
39.52 195.772 li
41.77 195.772 li
41.77 202.522 li
39.52 202.522 li
cp
39.52 193.522 mo
39.52 186.772 li
41.77 186.772 li
41.77 193.522 li
39.52 193.522 li
cp
39.52 184.522 mo
39.52 177.772 li
41.77 177.772 li
41.77 184.522 li
39.52 184.522 li
cp
39.52 175.522 mo
39.52 168.772 li
41.77 168.772 li
41.77 175.522 li
39.52 175.522 li
cp
39.52 166.522 mo
39.52 159.772 li
41.77 159.772 li
41.77 166.522 li
39.52 166.522 li
cp
39.52 157.522 mo
39.52 150.772 li
41.77 150.772 li
41.77 157.522 li
39.52 157.522 li
cp
39.52 148.522 mo
39.52 141.772 li
41.77 141.772 li
41.77 148.522 li
39.52 148.522 li
cp
39.52 139.522 mo
39.52 132.772 li
41.77 132.772 li
41.77 139.522 li
39.52 139.522 li
cp
39.52 130.522 mo
39.52 123.772 li
41.77 123.772 li
41.77 130.522 li
39.52 130.522 li
cp
39.52 121.522 mo
39.52 114.772 li
41.77 114.772 li
41.77 121.522 li
39.52 121.522 li
cp
39.52 112.522 mo
39.52 105.772 li
41.77 105.772 li
41.77 112.522 li
39.52 112.522 li
cp
39.52 103.522 mo
39.52 96.772 li
41.77 96.772 li
41.77 103.522 li
39.52 103.522 li
cp
39.52 94.522 mo
39.52 87.772 li
41.77 87.772 li
41.77 94.522 li
39.52 94.522 li
cp
39.52 85.522 mo
39.52 78.772 li
41.77 78.772 li
41.77 85.522 li
39.52 85.522 li
cp
39.52 76.522 mo
39.52 69.772 li
41.77 69.772 li
41.77 76.522 li
39.52 76.522 li
cp
39.52 67.522 mo
39.52 60.772 li
41.77 60.772 li
41.77 67.522 li
39.52 67.522 li
cp
39.52 58.522 mo
39.52 57.047 li
47.045 57.047 li
47.045 59.297 li
40.645 59.297 li
41.77 58.172 li
41.77 59.297 li
41.77 58.522 li
39.52 58.522 li
cp
49.295 57.047 mo
56.045 57.047 li
56.045 59.297 li
49.295 59.297 li
49.295 57.047 li
cp
58.295 57.047 mo
65.045 57.047 li
65.045 59.297 li
58.295 59.297 li
58.295 57.047 li
cp
67.295 57.047 mo
74.045 57.047 li
74.045 59.297 li
67.295 59.297 li
67.295 57.047 li
cp
76.295 57.047 mo
83.045 57.047 li
83.045 59.297 li
76.295 59.297 li
76.295 57.047 li
cp
85.295 57.047 mo
92.045 57.047 li
92.045 59.297 li
85.295 59.297 li
85.295 57.047 li
cp
94.295 57.047 mo
101.045 57.047 li
101.045 59.297 li
94.295 59.297 li
94.295 57.047 li
cp
103.295 57.047 mo
110.045 57.047 li
110.045 59.297 li
103.295 59.297 li
103.295 57.047 li
cp
112.295 57.047 mo
119.045 57.047 li
119.045 59.297 li
112.295 59.297 li
112.295 57.047 li
cp
121.295 57.047 mo
128.045 57.047 li
128.045 59.297 li
121.295 59.297 li
121.295 57.047 li
cp
130.295 57.047 mo
137.045 57.047 li
137.045 59.297 li
130.295 59.297 li
130.295 57.047 li
cp
139.295 57.047 mo
146.045 57.047 li
146.045 59.297 li
139.295 59.297 li
139.295 57.047 li
cp
148.295 57.047 mo
155.045 57.047 li
155.045 59.297 li
148.295 59.297 li
148.295 57.047 li
cp
157.295 57.047 mo
164.045 57.047 li
164.045 59.297 li
157.295 59.297 li
157.295 57.047 li
cp
166.295 57.047 mo
173.045 57.047 li
173.045 59.297 li
166.295 59.297 li
166.295 57.047 li
cp
175.295 57.047 mo
182.045 57.047 li
182.045 59.297 li
175.295 59.297 li
175.295 57.047 li
cp
184.295 57.047 mo
191.045 57.047 li
191.045 59.297 li
184.295 59.297 li
184.295 57.047 li
cp
193.295 57.047 mo
200.045 57.047 li
200.045 59.297 li
193.295 59.297 li
193.295 57.047 li
cp
202.295 57.047 mo
209.045 57.047 li
209.045 59.297 li
202.295 59.297 li
202.295 57.047 li
cp
211.295 57.047 mo
218.045 57.047 li
218.045 59.297 li
211.295 59.297 li
211.295 57.047 li
cp
220.295 57.047 mo
227.045 57.047 li
227.045 59.297 li
220.295 59.297 li
220.295 57.047 li
cp
229.295 57.047 mo
236.045 57.047 li
236.045 59.297 li
229.295 59.297 li
229.295 57.047 li
cp
238.295 57.047 mo
245.045 57.047 li
245.045 59.297 li
238.295 59.297 li
238.295 57.047 li
cp
247.27 59.3221 mo
247.27 66.0721 li
245.02 66.0721 li
245.02 59.3221 li
247.27 59.3221 li
cp
247.27 68.3221 mo
247.27 75.0721 li
245.02 75.0721 li
245.02 68.3221 li
247.27 68.3221 li
cp
247.27 77.3221 mo
247.27 84.0721 li
245.02 84.0721 li
245.02 77.3221 li
247.27 77.3221 li
cp
247.27 86.3221 mo
247.27 93.0721 li
245.02 93.0721 li
245.02 86.3221 li
247.27 86.3221 li
cp
247.27 95.3221 mo
247.27 102.072 li
245.02 102.072 li
245.02 95.3221 li
247.27 95.3221 li
cp
247.27 104.322 mo
247.27 111.072 li
245.02 111.072 li
245.02 104.322 li
247.27 104.322 li
cp
247.27 113.322 mo
247.27 120.072 li
245.02 120.072 li
245.02 113.322 li
247.27 113.322 li
cp
247.27 122.322 mo
247.27 129.072 li
245.02 129.072 li
245.02 122.322 li
247.27 122.322 li
cp
247.27 131.322 mo
247.27 138.072 li
245.02 138.072 li
245.02 131.322 li
247.27 131.322 li
cp
247.27 140.322 mo
247.27 147.072 li
245.02 147.072 li
245.02 140.322 li
247.27 140.322 li
cp
247.27 149.322 mo
247.27 156.072 li
245.02 156.072 li
245.02 149.322 li
247.27 149.322 li
cp
247.27 158.322 mo
247.27 165.072 li
245.02 165.072 li
245.02 158.322 li
247.27 158.322 li
cp
247.27 167.322 mo
247.27 174.072 li
245.02 174.072 li
245.02 167.322 li
247.27 167.322 li
cp
247.27 176.322 mo
247.27 183.072 li
245.02 183.072 li
245.02 176.322 li
247.27 176.322 li
cp
247.27 185.322 mo
247.27 192.072 li
245.02 192.072 li
245.02 185.322 li
247.27 185.322 li
cp
247.27 194.322 mo
247.27 201.072 li
245.02 201.072 li
245.02 194.322 li
247.27 194.322 li
cp
247.27 203.322 mo
247.27 210.072 li
245.02 210.072 li
245.02 203.322 li
247.27 203.322 li
cp
247.27 212.322 mo
247.27 219.072 li
245.02 219.072 li
245.02 212.322 li
247.27 212.322 li
cp
247.27 221.322 mo
247.27 228.072 li
245.02 228.072 li
245.02 221.322 li
247.27 221.322 li
cp
247.27 230.322 mo
247.27 237.072 li
245.02 237.072 li
245.02 230.322 li
247.27 230.322 li
cp
247.27 239.322 mo
247.27 246.072 li
245.02 246.072 li
245.02 239.322 li
247.27 239.322 li
cp
247.27 248.322 mo
247.27 255.072 li
245.02 255.072 li
245.02 248.322 li
247.27 248.322 li
cp
247.27 257.322 mo
247.27 264.072 li
245.02 264.072 li
245.02 257.322 li
247.27 257.322 li
cp
247.27 266.322 mo
247.27 273.072 li
245.02 273.072 li
245.02 266.322 li
247.27 266.322 li
cp
247.27 275.322 mo
247.27 282.072 li
245.02 282.072 li
245.02 275.322 li
247.27 275.322 li
cp
247.27 284.322 mo
247.27 291.072 li
245.02 291.072 li
245.02 284.322 li
247.27 284.322 li
cp
247.27 293.322 mo
247.27 300.072 li
245.02 300.072 li
245.02 293.322 li
247.27 293.322 li
cp
247.27 302.322 mo
247.27 309.072 li
245.02 309.072 li
245.02 302.322 li
247.27 302.322 li
cp
247.27 311.322 mo
247.27 318.072 li
245.02 318.072 li
245.02 311.322 li
247.27 311.322 li
cp
247.27 320.322 mo
247.27 327.072 li
245.02 327.072 li
245.02 320.322 li
247.27 320.322 li
cp
247.27 329.322 mo
247.27 336.072 li
245.02 336.072 li
245.02 329.322 li
247.27 329.322 li
cp
247.27 338.322 mo
247.27 345.072 li
245.02 345.072 li
245.02 338.322 li
247.27 338.322 li
cp
247.27 347.322 mo
247.27 354.072 li
245.02 354.072 li
245.02 347.322 li
247.27 347.322 li
cp
247.27 356.322 mo
247.27 363.072 li
245.02 363.072 li
245.02 356.322 li
247.27 356.322 li
cp
247.27 365.322 mo
247.27 372.072 li
245.02 372.072 li
245.02 365.322 li
247.27 365.322 li
cp
247.27 374.322 mo
247.27 381.072 li
245.02 381.072 li
245.02 374.322 li
247.27 374.322 li
cp
247.27 383.322 mo
247.27 390.072 li
245.02 390.072 li
245.02 383.322 li
247.27 383.322 li
cp
247.27 392.322 mo
247.27 399.072 li
245.02 399.072 li
245.02 392.322 li
247.27 392.322 li
cp
247.27 401.322 mo
247.27 408.072 li
245.02 408.072 li
245.02 401.322 li
247.27 401.322 li
cp
247.27 410.322 mo
247.27 417.072 li
245.02 417.072 li
245.02 410.322 li
247.27 410.322 li
cp
247.27 419.322 mo
247.27 426.072 li
245.02 426.072 li
245.02 419.322 li
247.27 419.322 li
cp
247.27 428.322 mo
247.27 435.072 li
245.02 435.072 li
245.02 428.322 li
247.27 428.322 li
cp
247.27 437.322 mo
247.27 444.072 li
245.02 444.072 li
245.02 437.322 li
247.27 437.322 li
cp
247.27 446.322 mo
247.27 453.072 li
245.02 453.072 li
245.02 446.322 li
247.27 446.322 li
cp
247.27 455.322 mo
247.27 462.072 li
245.02 462.072 li
245.02 455.322 li
247.27 455.322 li
cp
247.27 464.322 mo
247.27 471.072 li
245.02 471.072 li
245.02 464.322 li
247.27 464.322 li
cp
247.27 473.322 mo
247.27 480.072 li
245.02 480.072 li
245.02 473.322 li
247.27 473.322 li
cp
247.27 482.322 mo
247.27 489.072 li
245.02 489.072 li
245.02 482.322 li
247.27 482.322 li
cp
245.345 491.647 mo
238.595 491.647 li
238.595 489.397 li
245.345 489.397 li
245.345 491.647 li
cp
236.345 491.647 mo
229.595 491.647 li
229.595 489.397 li
236.345 489.397 li
236.345 491.647 li
cp
227.345 491.647 mo
220.595 491.647 li
220.595 489.397 li
227.345 489.397 li
227.345 491.647 li
cp
218.345 491.647 mo
211.595 491.647 li
211.595 489.397 li
218.345 489.397 li
218.345 491.647 li
cp
209.345 491.647 mo
202.595 491.647 li
202.595 489.397 li
209.345 489.397 li
209.345 491.647 li
cp
200.345 491.647 mo
193.595 491.647 li
193.595 489.397 li
200.345 489.397 li
200.345 491.647 li
cp
191.345 491.647 mo
184.595 491.647 li
184.595 489.397 li
191.345 489.397 li
191.345 491.647 li
cp
182.345 491.647 mo
175.595 491.647 li
175.595 489.397 li
182.345 489.397 li
182.345 491.647 li
cp
173.345 491.647 mo
166.595 491.647 li
166.595 489.397 li
173.345 489.397 li
173.345 491.647 li
cp
164.345 491.647 mo
157.595 491.647 li
157.595 489.397 li
164.345 489.397 li
164.345 491.647 li
cp
155.345 491.647 mo
148.595 491.647 li
148.595 489.397 li
155.345 489.397 li
155.345 491.647 li
cp
146.345 491.647 mo
139.595 491.647 li
139.595 489.397 li
146.345 489.397 li
146.345 491.647 li
cp
137.345 491.647 mo
130.595 491.647 li
130.595 489.397 li
137.345 489.397 li
137.345 491.647 li
cp
128.345 491.647 mo
121.595 491.647 li
121.595 489.397 li
128.345 489.397 li
128.345 491.647 li
cp
119.345 491.647 mo
112.595 491.647 li
112.595 489.397 li
119.345 489.397 li
119.345 491.647 li
cp
110.345 491.647 mo
103.595 491.647 li
103.595 489.397 li
110.345 489.397 li
110.345 491.647 li
cp
101.345 491.647 mo
94.595 491.647 li
94.595 489.397 li
101.345 489.397 li
101.345 491.647 li
cp
92.345 491.647 mo
85.595 491.647 li
85.595 489.397 li
92.345 489.397 li
92.345 491.647 li
cp
83.345 491.647 mo
76.595 491.647 li
76.595 489.397 li
83.345 489.397 li
83.345 491.647 li
cp
74.345 491.647 mo
67.595 491.647 li
67.595 489.397 li
74.345 489.397 li
74.345 491.647 li
cp
65.345 491.647 mo
58.595 491.647 li
58.595 489.397 li
65.345 489.397 li
65.345 491.647 li
cp
56.345 491.647 mo
49.595 491.647 li
49.595 489.397 li
56.345 489.397 li
56.345 491.647 li
cp
47.345 491.647 mo
40.645 491.647 li
40.645 489.397 li
47.345 489.397 li
47.345 491.647 li
.751797 0 .870695 0 cmyk
f
134.465 226.592 mo
134.465 220.352 li
134.44 216.941 140.014 214.142 146.891 214.142 cv
153.767 214.142 159.341 216.941 159.305 220.352 cv
159.305 226.592 li
134.465 226.592 li
.92929 .879301 .889677 .799283 cmyk
ef
133.94 220.38 mo
133.958 220.021 li
134.014 219.655 li
134.104 219.295 li
134.229 218.944 li
134.386 218.603 li
134.574 218.271 li
134.791 217.949 li
135.036 217.638 li
135.307 217.337 li
135.603 217.046 li
135.924 216.766 li
136.268 216.497 li
136.635 216.238 li
137.023 215.99 li
137.432 215.752 li
137.862 215.526 li
138.311 215.311 li
138.779 215.108 li
139.265 214.916 li
139.769 214.736 li
140.289 214.569 li
140.824 214.414 li
141.375 214.273 li
141.94 214.144 li
142.519 214.03 li
143.111 213.929 li
143.715 213.843 li
144.33 213.772 li
144.956 213.716 li
145.592 213.675 li
146.237 213.651 li
146.891 213.642 li
147.544 213.651 li
148.189 213.675 li
148.825 213.716 li
149.451 213.772 li
150.066 213.843 li
150.67 213.929 li
151.262 214.03 li
151.841 214.144 li
152.406 214.273 li
152.957 214.414 li
153.493 214.569 li
154.013 214.736 li
154.516 214.916 li
155.002 215.108 li
155.47 215.311 li
155.919 215.526 li
156.349 215.752 li
156.758 215.99 li
157.147 216.238 li
157.513 216.497 li
157.857 216.766 li
158.178 217.046 li
158.475 217.337 li
158.746 217.638 li
158.99 217.949 li
159.207 218.271 li
159.395 218.603 li
159.552 218.944 li
159.677 219.295 li
159.768 219.655 li
159.823 220.021 li
159.841 220.38 li
159.841 227.143 li
133.94 227.143 li
133.94 220.38 li
cp
134.94 226.643 mo
134.44 226.143 li
159.341 226.143 li
158.841 226.643 li
158.841 220.393 li
158.842 220.418 li
158.826 220.096 li
158.831 220.146 li
158.783 219.828 li
158.792 219.876 li
158.713 219.563 li
158.727 219.608 li
158.617 219.301 li
158.634 219.342 li
158.495 219.039 li
158.514 219.077 li
158.346 218.78 li
158.367 218.813 li
158.171 218.523 li
158.192 218.552 li
157.97 218.269 li
157.991 218.294 li
157.742 218.017 li
157.763 218.04 li
157.488 217.77 li
157.51 217.79 li
157.21 217.528 li
157.23 217.545 li
156.907 217.292 li
156.926 217.306 li
156.579 217.061 li
156.599 217.074 li
156.229 216.838 li
156.247 216.849 li
155.856 216.623 li
155.874 216.632 li
155.462 216.415 li
155.479 216.424 li
155.046 216.217 li
155.063 216.225 li
154.611 216.028 li
154.627 216.035 li
154.156 215.849 li
154.172 215.855 li
153.684 215.681 li
153.699 215.686 li
153.193 215.523 li
153.208 215.528 li
152.687 215.377 li
152.701 215.381 li
152.164 215.243 li
152.178 215.246 li
151.626 215.121 li
151.64 215.124 li
151.074 215.012 li
151.088 215.015 li
150.509 214.916 li
150.522 214.918 li
149.932 214.834 li
149.945 214.836 li
149.342 214.766 li
149.355 214.767 li
148.742 214.712 li
148.755 214.713 li
148.132 214.674 li
148.145 214.674 li
147.512 214.65 li
147.525 214.65 li
146.884 214.642 li
146.897 214.642 li
146.256 214.65 li
146.269 214.65 li
145.637 214.674 li
145.649 214.674 li
145.026 214.713 li
145.039 214.712 li
144.426 214.767 li
144.439 214.766 li
143.837 214.836 li
143.85 214.834 li
143.259 214.918 li
143.272 214.916 li
142.693 215.015 li
142.707 215.012 li
142.141 215.124 li
142.155 215.121 li
141.603 215.246 li
141.617 215.243 li
141.08 215.381 li
141.095 215.377 li
140.573 215.528 li
140.588 215.523 li
140.082 215.686 li
140.097 215.681 li
139.609 215.855 li
139.625 215.849 li
139.154 216.035 li
139.17 216.028 li
138.718 216.225 li
138.735 216.217 li
138.303 216.424 li
138.32 216.415 li
137.907 216.632 li
137.925 216.623 li
137.534 216.849 li
137.552 216.838 li
137.183 217.074 li
137.202 217.061 li
136.855 217.306 li
136.875 217.292 li
136.551 217.545 li
136.571 217.528 li
136.272 217.79 li
136.293 217.77 li
136.018 218.04 li
136.039 218.017 li
135.79 218.294 li
135.812 218.269 li
135.589 218.552 li
135.61 218.523 li
135.414 218.813 li
135.435 218.78 li
135.267 219.077 li
135.286 219.039 li
135.147 219.342 li
135.164 219.301 li
135.054 219.608 li
135.068 219.563 li
134.989 219.876 li
134.999 219.828 li
134.951 220.146 li
134.956 220.096 li
134.939 220.418 li
134.94 220.393 li
134.94 226.643 li
f
139.265 293.552 mo
139.24 289.885 142.229 286.896 145.916 286.896 cv
149.602 286.896 152.591 289.885 152.591 293.571 cv
152.591 297.258 149.602 300.247 145.916 300.247 cv
142.229 300.247 139.24 297.258 139.265 293.552 cv
ef
138.749 293.203 mo
138.777 292.838 li
138.823 292.479 li
138.886 292.126 li
138.966 291.778 li
139.063 291.438 li
139.176 291.104 li
139.304 290.778 li
139.448 290.46 li
139.606 290.151 li
139.779 289.85 li
139.966 289.559 li
140.166 289.278 li
140.379 289.007 li
140.604 288.747 li
140.842 288.498 li
141.091 288.26 li
141.351 288.035 li
141.622 287.822 li
141.903 287.622 li
142.194 287.435 li
142.495 287.262 li
142.804 287.104 li
143.122 286.96 li
143.448 286.831 li
143.782 286.719 li
144.123 286.622 li
144.47 286.542 li
144.823 286.479 li
145.183 286.433 li
145.547 286.405 li
145.916 286.396 li
146.284 286.405 li
146.649 286.433 li
147.008 286.479 li
147.361 286.542 li
147.708 286.622 li
148.049 286.719 li
148.383 286.831 li
148.709 286.96 li
149.027 287.104 li
149.336 287.262 li
149.637 287.435 li
149.928 287.622 li
150.209 287.822 li
150.48 288.035 li
150.74 288.26 li
150.989 288.498 li
151.227 288.747 li
151.452 289.007 li
151.665 289.278 li
151.865 289.559 li
152.052 289.85 li
152.225 290.151 li
152.383 290.46 li
152.527 290.778 li
152.656 291.104 li
152.768 291.438 li
152.865 291.778 li
152.945 292.126 li
153.008 292.479 li
153.054 292.838 li
153.082 293.203 li
153.091 293.571 li
153.082 293.94 li
153.054 294.304 li
153.008 294.663 li
152.945 295.017 li
152.865 295.364 li
152.768 295.705 li
152.656 296.038 li
152.527 296.365 li
152.383 296.682 li
152.225 296.992 li
152.052 297.292 li
151.865 297.584 li
151.665 297.865 li
151.452 298.136 li
151.227 298.396 li
150.989 298.645 li
150.74 298.883 li
150.48 299.108 li
150.209 299.321 li
149.928 299.521 li
149.637 299.708 li
149.336 299.881 li
149.027 300.039 li
148.709 300.183 li
148.383 300.311 li
148.049 300.424 li
147.708 300.521 li
147.361 300.601 li
147.008 300.664 li
146.649 300.71 li
146.284 300.738 li
145.916 300.747 li
145.547 300.738 li
145.183 300.71 li
144.823 300.664 li
144.47 300.601 li
144.123 300.521 li
143.782 300.424 li
143.448 300.311 li
143.122 300.183 li
142.804 300.039 li
142.495 299.881 li
142.194 299.708 li
141.903 299.521 li
141.622 299.321 li
141.351 299.108 li
141.091 298.883 li
140.842 298.645 li
140.604 298.396 li
140.379 298.136 li
140.166 297.865 li
139.966 297.584 li
139.779 297.292 li
139.606 296.992 li
139.448 296.682 li
139.304 296.365 li
139.176 296.038 li
139.063 295.705 li
138.966 295.364 li
138.886 295.017 li
138.823 294.663 li
138.777 294.304 li
138.749 293.94 li
138.74 293.571 li
138.749 293.203 li
cp
139.74 293.584 mo
139.74 293.559 li
139.749 293.902 li
139.747 293.877 li
139.773 294.216 li
139.771 294.191 li
139.813 294.525 li
139.809 294.5 li
139.868 294.829 li
139.863 294.804 li
139.938 295.127 li
139.931 295.103 li
140.021 295.42 li
140.014 295.396 li
140.119 295.706 li
140.11 295.683 li
140.23 295.986 li
140.22 295.964 li
140.354 296.259 li
140.343 296.237 li
140.491 296.525 li
140.479 296.504 li
140.64 296.784 li
140.628 296.763 li
140.801 297.034 li
140.788 297.014 li
140.974 297.276 li
140.959 297.256 li
141.158 297.509 li
141.142 297.49 li
141.352 297.732 li
141.336 297.715 li
141.557 297.947 li
141.54 297.93 li
141.772 298.151 li
141.755 298.135 li
141.997 298.344 li
141.978 298.329 li
142.231 298.527 li
142.211 298.513 li
142.473 298.699 li
142.453 298.686 li
142.724 298.859 li
142.703 298.847 li
142.983 299.008 li
142.962 298.996 li
143.249 299.143 li
143.227 299.133 li
143.523 299.267 li
143.501 299.257 li
143.804 299.377 li
143.781 299.368 li
144.091 299.473 li
144.067 299.466 li
144.384 299.556 li
144.36 299.549 li
144.683 299.624 li
144.658 299.619 li
144.987 299.678 li
144.962 299.674 li
145.296 299.716 li
145.271 299.714 li
145.61 299.739 li
145.585 299.738 li
145.928 299.747 li
145.903 299.747 li
146.246 299.738 li
146.221 299.739 li
146.56 299.714 li
146.535 299.716 li
146.869 299.674 li
146.844 299.678 li
147.173 299.619 li
147.148 299.624 li
147.471 299.549 li
147.447 299.556 li
147.764 299.466 li
147.74 299.473 li
148.05 299.368 li
148.027 299.377 li
148.33 299.257 li
148.308 299.267 li
148.604 299.133 li
148.582 299.143 li
148.869 298.996 li
148.848 299.008 li
149.128 298.847 li
149.107 298.859 li
149.378 298.686 li
149.358 298.699 li
149.62 298.513 li
149.601 298.527 li
149.853 298.329 li
149.834 298.344 li
150.077 298.135 li
150.059 298.151 li
150.291 297.93 li
150.274 297.947 li
150.495 297.715 li
150.479 297.732 li
150.689 297.49 li
150.673 297.509 li
150.872 297.256 li
150.857 297.276 li
151.043 297.014 li
151.03 297.034 li
151.204 296.763 li
151.191 296.784 li
151.352 296.504 li
151.34 296.525 li
151.488 296.237 li
151.477 296.259 li
151.611 295.964 li
151.601 295.986 li
151.721 295.683 li
151.712 295.706 li
151.817 295.396 li
151.81 295.42 li
151.9 295.103 li
151.894 295.127 li
151.968 294.804 li
151.963 294.829 li
152.022 294.5 li
152.018 294.525 li
152.06 294.191 li
152.058 294.216 li
152.084 293.877 li
152.082 293.902 li
152.091 293.559 li
152.091 293.584 li
152.082 293.24 li
152.084 293.266 li
152.058 292.927 li
152.06 292.952 li
152.018 292.618 li
152.022 292.643 li
151.963 292.314 li
151.968 292.338 li
151.894 292.016 li
151.9 292.04 li
151.81 291.723 li
151.817 291.747 li
151.712 291.436 li
151.721 291.46 li
151.601 291.156 li
151.611 291.179 li
151.477 290.883 li
151.488 290.905 li
151.34 290.617 li
151.352 290.639 li
151.191 290.359 li
151.204 290.38 li
151.03 290.109 li
151.043 290.129 li
150.857 289.867 li
150.872 289.886 li
150.673 289.634 li
150.689 289.653 li
150.479 289.41 li
150.495 289.428 li
150.274 289.196 li
150.291 289.213 li
150.059 288.992 li
150.077 289.008 li
149.834 288.798 li
149.853 288.813 li
149.601 288.615 li
149.62 288.63 li
149.358 288.444 li
149.378 288.457 li
149.107 288.283 li
149.128 288.296 li
148.848 288.135 li
148.869 288.147 li
148.582 287.999 li
148.604 288.01 li
148.308 287.876 li
148.33 287.886 li
148.027 287.766 li
148.05 287.775 li
147.74 287.67 li
147.764 287.677 li
147.447 287.587 li
147.471 287.593 li
147.148 287.519 li
147.173 287.524 li
146.844 287.465 li
146.869 287.469 li
146.535 287.426 li
146.56 287.429 li
146.221 287.403 li
146.246 287.405 li
145.903 287.396 li
145.928 287.396 li
145.585 287.405 li
145.61 287.403 li
145.271 287.429 li
145.296 287.426 li
144.962 287.469 li
144.987 287.465 li
144.658 287.524 li
144.683 287.519 li
144.36 287.593 li
144.384 287.587 li
144.067 287.677 li
144.091 287.67 li
143.781 287.775 li
143.804 287.766 li
143.501 287.886 li
143.523 287.876 li
143.227 288.01 li
143.249 287.999 li
142.962 288.147 li
142.983 288.135 li
142.703 288.296 li
142.724 288.283 li
142.453 288.457 li
142.473 288.444 li
142.211 288.63 li
142.231 288.615 li
141.978 288.813 li
141.997 288.798 li
141.755 289.008 li
141.772 288.992 li
141.54 289.213 li
141.557 289.196 li
141.336 289.428 li
141.352 289.41 li
141.142 289.653 li
141.158 289.634 li
140.959 289.886 li
140.974 289.867 li
140.788 290.129 li
140.801 290.109 li
140.628 290.38 li
140.64 290.359 li
140.479 290.639 li
140.491 290.617 li
140.343 290.905 li
140.354 290.883 li
140.22 291.179 li
140.23 291.156 li
140.11 291.46 li
140.119 291.436 li
140.014 291.747 li
140.021 291.723 li
139.931 292.04 li
139.938 292.016 li
139.863 292.338 li
139.868 292.314 li
139.809 292.643 li
139.813 292.618 li
139.771 292.952 li
139.773 292.927 li
139.747 293.266 li
139.749 293.24 li
139.74 293.584 li
f
134.465 317.192 mo
134.465 310.952 li
134.44 307.445 140.014 304.647 146.891 304.647 cv
153.767 304.647 159.341 307.445 159.305 310.952 cv
159.305 317.192 li
134.465 317.192 li
ef
133.94 310.885 mo
133.958 310.525 li
134.014 310.159 li
134.104 309.8 li
134.229 309.449 li
134.386 309.107 li
134.574 308.775 li
134.791 308.454 li
135.036 308.142 li
135.307 307.841 li
135.603 307.551 li
135.924 307.271 li
136.268 307.001 li
136.635 306.742 li
137.023 306.494 li
137.432 306.257 li
137.862 306.031 li
138.311 305.816 li
138.779 305.612 li
139.265 305.421 li
139.769 305.241 li
140.289 305.074 li
140.824 304.919 li
141.375 304.777 li
141.94 304.649 li
142.519 304.534 li
143.111 304.434 li
143.715 304.348 li
144.33 304.277 li
144.956 304.22 li
145.592 304.18 li
146.237 304.155 li
146.891 304.147 li
147.544 304.155 li
148.189 304.18 li
148.825 304.22 li
149.451 304.277 li
150.066 304.348 li
150.67 304.434 li
151.262 304.534 li
151.841 304.649 li
152.406 304.777 li
152.957 304.919 li
153.493 305.074 li
154.013 305.241 li
154.516 305.421 li
155.002 305.612 li
155.47 305.816 li
155.919 306.031 li
156.349 306.257 li
156.758 306.494 li
157.147 306.742 li
157.513 307.001 li
157.857 307.271 li
158.178 307.551 li
158.475 307.841 li
158.746 308.142 li
158.99 308.454 li
159.207 308.775 li
159.395 309.107 li
159.552 309.449 li
159.677 309.8 li
159.768 310.159 li
159.823 310.525 li
159.841 310.885 li
159.841 317.648 li
133.94 317.648 li
133.94 310.885 li
cp
134.94 317.148 mo
134.44 316.648 li
159.341 316.648 li
158.841 317.148 li
158.841 310.897 li
158.842 310.922 li
158.826 310.601 li
158.831 310.65 li
158.783 310.333 li
158.792 310.381 li
158.713 310.068 li
158.727 310.113 li
158.617 309.805 li
158.634 309.846 li
158.495 309.544 li
158.514 309.581 li
158.346 309.285 li
158.367 309.318 li
158.171 309.028 li
158.192 309.057 li
157.97 308.773 li
157.991 308.799 li
157.742 308.522 li
157.763 308.545 li
157.488 308.275 li
157.51 308.295 li
157.21 308.033 li
157.23 308.05 li
156.907 307.796 li
156.926 307.811 li
156.579 307.566 li
156.599 307.579 li
156.229 307.343 li
156.247 307.354 li
155.856 307.127 li
155.874 307.137 li
155.462 306.92 li
155.479 306.929 li
155.046 306.722 li
155.063 306.729 li
154.611 306.533 li
154.627 306.539 li
154.156 306.354 li
154.172 306.36 li
153.684 306.185 li
153.699 306.19 li
153.193 306.028 li
153.208 306.032 li
152.687 305.882 li
152.701 305.886 li
152.164 305.748 li
152.178 305.751 li
151.626 305.626 li
151.64 305.629 li
151.074 305.517 li
151.088 305.519 li
150.509 305.421 li
150.522 305.423 li
149.932 305.339 li
149.945 305.34 li
149.342 305.271 li
149.355 305.272 li
148.742 305.217 li
148.755 305.218 li
148.132 305.178 li
148.145 305.179 li
147.512 305.155 li
147.525 305.155 li
146.884 305.147 li
146.897 305.147 li
146.256 305.155 li
146.269 305.155 li
145.637 305.179 li
145.649 305.178 li
145.026 305.218 li
145.039 305.217 li
144.426 305.272 li
144.439 305.271 li
143.837 305.34 li
143.85 305.339 li
143.259 305.423 li
143.272 305.421 li
142.693 305.519 li
142.707 305.517 li
142.141 305.629 li
142.155 305.626 li
141.603 305.751 li
141.617 305.748 li
141.08 305.886 li
141.095 305.882 li
140.573 306.032 li
140.588 306.028 li
140.082 306.19 li
140.097 306.185 li
139.609 306.36 li
139.625 306.354 li
139.154 306.539 li
139.17 306.533 li
138.718 306.729 li
138.735 306.722 li
138.303 306.929 li
138.32 306.92 li
137.907 307.137 li
137.925 307.127 li
137.534 307.354 li
137.552 307.343 li
137.183 307.579 li
137.202 307.566 li
136.855 307.811 li
136.875 307.796 li
136.551 308.05 li
136.571 308.033 li
136.272 308.295 li
136.293 308.275 li
136.018 308.545 li
136.039 308.522 li
135.79 308.799 li
135.812 308.773 li
135.589 309.057 li
135.61 309.028 li
135.414 309.318 li
135.435 309.285 li
135.267 309.581 li
135.286 309.544 li
135.147 309.846 li
135.164 309.805 li
135.054 310.113 li
135.068 310.068 li
134.989 310.381 li
134.999 310.333 li
134.951 310.65 li
134.956 310.601 li
134.939 310.922 li
134.94 310.897 li
134.94 317.148 li
f
146.345 241.112 mo
144.736 241.119 143.415 242.383 143.415 243.944 cv
143.415 245.504 144.736 246.769 146.366 246.769 cv
147.995 246.769 149.316 245.504 149.316 243.944 cv
149.316 242.383 147.995 241.119 146.345 241.112 cv
ef
146.345 250.472 mo
144.736 250.469 143.415 251.734 143.415 253.294 cv
143.415 254.855 144.736 256.119 146.366 256.119 cv
147.995 256.119 149.316 254.855 149.316 253.294 cv
149.316 251.734 147.995 250.469 146.345 250.472 cv
ef
146.345 259.712 mo
144.736 259.67 143.415 260.934 143.415 262.495 cv
143.415 264.055 144.736 265.32 146.366 265.32 cv
147.995 265.32 149.316 264.055 149.316 262.495 cv
149.316 260.934 147.995 259.67 146.345 259.712 cv
ef
223.945 65.872 mo
223.945 140.672 li
58.595 140.672 li
58.595 65.872 li
223.945 65.872 li
cp
59.095 66.872 mo
59.595 66.372 li
59.595 140.172 li
59.095 139.672 li
223.445 139.672 li
222.945 140.172 li
222.945 66.372 li
223.445 66.872 li
59.095 66.872 li
.695583 .0949111 0 0 cmyk
f
0 .9617 .904814 0 cmyk
%ADOBeginSubsetFont: QAAAAA+TimesNewRomanPSMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (QAAAAA+TimesNewRomanPSMT)
%%Title: (QAAAAA+TimesNewRomanPSMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /QAAAAA+TimesNewRomanPSMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-568 -307 2046 1040} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 4685 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 11 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB
222483BD74F8B> |
79 <001C60D8A8C9B854D0F40B290C0C99C039EA88FDD293C1FEAB15D2F6B8C4
304B80428A9C9B5571B0EE47CC29A6D67DEE51ABBBE57F6DDF0C02037EE8B682
8D244FB880634A92D947174D08130E6E2CF978B5067AA82A4CABC55E600FCE55
27D6441CE02F5A28D63A618F> |
82 <001C60D8A8C9B7A73DB903ADC070A7C49752E736186D1727D7954B8F3DD4
416250EFB2715F7FEA4B4F24611BB7B770A0989FFD12258A4EC0D90DD9998BDA
F996A44DE027AE6C486FF30337F30EB574748A139900482713C8EF6F8455DA43
6702294DB22515A99C4ACC57A269598D687C25D5F66128E3441FE6E0D99B55B6
8D9C19E720D771564C6692898D127FC55C985D08C7E6B95F874FD094> |
70 <001C60D8A8C9B77FE2C180CE42B4078449B9D767742AB4CF5971DFD438EC
C54400989182964B065BACA704BA363536AC987FC433F59A23A3DC16CBD969F4
2A6041BB8327C43B9105FC5DF44A0437E9E26FE545542A602D007FC6A926264F
9C2999730E7919239B324086FEA852156F456647AA0692084759C352D6998971
799F4BEF3EFB7DE91C98C83C567200278FF2145E16D28EDE7556C59DB204> |
68 <001C60D8A8C9B77FE2CEA139CB15A16492F485162FE605BA10F460B6DC55
0DEC7BA0BCA1B89C8429260417FE96BA758C22F6762386C9F1CAF53456C89D4C
6B177AA810FBB608A57F053C4DA17FD8A122DD63CD2EE0563B0FFA48FEF5CBDB
333E4EF010579993E238020BE59CA5D3F31F329BD506C436A3A2AAAB6CBD385F
DB0E5188BC3D34A31214C941C253FAF1F818F84A3F73340CA7F3B7A85C87022E
70BF3FF56918287082AAA1D7B6CDE998BE3D8663592D3F0DEFC69D87A351A298
95DE83B0D7478C3C01D85F944C563EFCF85986470E4B8EDEEDC025A0FB3217B7
37B99EB7B6E2243F66B907475D1C465D1D07EDFEFC5123FE5A4D48A8B15BE327
2EF1EF1464C3F0D45D7CBB8749AF571E09> |
3 <001C60D8A8C9B8707C25> |
72 <001C60D8A8C9B77FE2C19119FE019B929F076F8319E8913467AECA41BE2B
EAD3EC175346E3F888D3AD76D215AD69034A954DFD661ECBEA3B145468480B6A
15F5C865D2083DC0B04744AA76DE4CC9E0C9DBDCC2C59DAA00F28A6A47092C7F
FA0397DC47C5CBBA69AD805D3DD20D56411E92B0DE9E3F19C2FDEE1FA5013189
84A59E1CFFFD06EA629758085868D3F5F7204292> |
85 <001C60D8A8C9B81F2C3A9916C4CB28F21023538C2A69D3E08B0A448624D2
CE6C19473DC07A6A4C3E0D8D2DFD7B9589F2461E064A251BFFB4F1472DE500E9
83E2E667F5383BBA338778795701927E45FB048834AFB7FF5E045C79CAD4F90B
53A8A93629365ECF1B64B7916DE5DAB65845D9DB9B71D2B7B722597153CE4BA4
55AAC1333D36087A511839B6E1301E787D03299ED6FB7E787777CDACC74EC37D
8C360275B503E4954E912CD342> |
81 <001C60D8A8C9B7A73DB913C38909CDA29FD53BC2807766C389AFB9ED86F7
BC81642DEC755C464ECEF36210D9B2C516FEA8C1248DF87B00C42E8B7B13BCCD
9D4DADECDD469C646397E88CF560CD28B02CAE7D1B9203699A1DE9CF796CD494
DF60582CAFD70B7F17C1569B79CFC1B11937F06CBBF98FB3F8ABA83215B28002
6130687B8B88299FC622B1B9C743E6B4E2D3E657B3D5566E1938323637D7929F
2E277006B7F4C91822AAA6911E494E2AD0998CB1FC1434E1920012738BB988F6
A0027198438FE663C2EACF82CEB86F7C727594> |
76 <001C60D8A8C9B854D0F4318DEB2BF4A8C14C2FAB601E0ED2FF31B9BA2C4F
4D9D824A65F9E753CDA6D59F3AE6B969EC176D4AA1F064BFADF6F4B6A5454B78
F98C4B41AC403B87C0044C2A2776BF32D7D2C5370D6DB44827DB4719A169BBE3
65B0C0BED49A30732BB5E35B7101E488713F0203C9161D1F92C48C80A6400850
90E2C5D79817DC05EB1FC5E4D24EE71772E51241DF9FD4D574115CFC53427DCB
CB8CA3E9F85837FAC6> |
74 <001C60D8A8C9B7A73DAC44F2C448ECAF253E44055AA4AFC4D4E618BBF7F6
0847F4AD57852D125F52503D138EEBB5C35DB7E6FF089D85EF3D59177D6853B7
FF4DCA48A2C6450DAF6AE7485D918680B6246955433B7E96C0D52B86F6985D93
AEA8FD99F7CE5A6EDF9F82F3DCD54C24AC7F5725E8D752728B16161496E9D02E
A707BCC03E7CE1BDA2E3632B4A11707F59DF2FD8556EC51A6594DBA10EC63EB7
A8585255CC0C8C8B32CD6316A41829AE725CE606F4A4FD4DA668556D79F4AC25
BF9E697A5DB9F54B573E1EAA6D791100EAD10708C7E706E8CBDD596589510D4E
A45E3CA12E8144CF2A4E025D5293F77BF25BA77276DF7C97999133B17612ABFF
D70E77479B9C8ABBB3A51D3A6F6F66CA99610B1A23618D13E1A07B26D29ACFC8
191E5B2829F3C990A5C474E53FC8B282F11A7FFA86D56BD2349AEC811B22D300
2781921B9EDDEAA1B62C5F206266BA751F865F9A5F5AF517BC35F6F732012015
D0BB42652388A219FCF002C2C0335D2D190C0C425C4FA28367480051E56A90DD
46F1C707> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /QAAAAA+TimesNewRomanPSMT-Identity-H /Identity-H 0 [/QAAAAA+TimesNewRomanPSMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/DUZMCP+TimesNewRomanPSMT /QAAAAA+TimesNewRomanPSMT-Identity-H findfont ct_VMDictPut
DUZMCP+TimesNewRomanPSMT [32.05 0 0 -32.05 0 0 ]msf
110.145 94.972 mo
(\000O)sh
119.045 94.972 mo
(\000R)sh
135.045 94.972 mo
(\000F)sh
149.245 94.972 mo
(\000D)sh
163.445 94.972 mo
(\000O)sh
84.845 133.372 mo
(\000\003)sh
92.845 133.372 mo
(\000O)sh
101.745 133.372 mo
(\000H)sh
115.945 133.372 mo
(\000D)sh
130.145 133.372 mo
(\000U)sh
140.795 133.372 mo
(\000Q)sh
156.795 133.372 mo
(\000L)sh
165.695 133.372 mo
(\000Q)sh
181.695 133.372 mo
(\000J)sh
223.945 336.422 mo
223.945 411.222 li
58.595 411.222 li
58.595 336.422 li
223.945 336.422 li
cp
59.095 337.422 mo
59.595 336.922 li
59.595 410.722 li
59.095 410.222 li
223.445 410.222 li
222.945 410.722 li
222.945 336.922 li
223.445 337.422 li
59.095 337.422 li
.695583 .0949111 0 0 cmyk
f
0 .9617 .904814 0 cmyk
%ADOBeginSubsetFont: QAAAAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/QAAAAA+TimesNewRomanPSMT 3 GetGlyphDirectory
89 <001C60D8A8C9B7A73DDA3AD4E30B5CCD7D3C12F7959C83D9C808662F1D29
403E3640D88B6D61CC1EF17C120CDCE65E70C4FE9E153F8E52BB6A45EF1A33FF
33B350E779BE70BFD66B1893DAD63FDF011F2039FF0D075853D9D0E3D26BA0ED
AEDA247A4C2489AC431F6D923096DA608667B0FA6E60F963DA8A46029578956D
98258ABD433E9E> |
87 <001C60D8A8C9B854D0F414EAB29549463C152A8395E080F8A65050DED294
48713A9991EC80B85D2E40BC855D0C9C1C8F48B9F54A9F2AF77E5AE0CF2D93DC
43DDEECA57457D57C32A4E7F92D72E19B411BD6A8FD776B503B1ED0E4E775E79
8B36CAB4543E392F481E83DAF858D3B1A895E3CC06AB3573C04543D9> |
92 <001C60D8A8C9B7A73DDE03E4B644C159EB8B647E016C26B087177A3C5BC5
BAF02161182070C8A4222C2E1ED9B95B756DF22232FA7BE5897B7C6D57479511
9A3B50894B8B0E1A184B7636697D129D88C76A3FD42BABE719D85F7DC372AB50
B8B16D988DA863EE6A5B7454A406C9D5E815158A5786509E6DF27377A83F3454
DD6905EA3123CBA5BA0D4772C12767864CF2C5FEDE2AFF05D3CC0534D74E6AE9
DBF9F3B49677449A761BE771C9C1AB2D4DC994988233EE24B9E175796C6F1351
8A71BC990F312D4821883A95164BCE1683B85434AFA8> |
!
end
end end
%ADOEndSubsetFont
DUZMCP+TimesNewRomanPSMT [32.05 0 0 -32.05 0 0 ]msf
113.695 365.522 mo
(\000Y)sh
129.695 365.522 mo
(\000R)sh
145.695 365.522 mo
(\000W)sh
154.595 365.522 mo
(\000H)sh
109.295 403.922 mo
(\000O)sh
118.195 403.922 mo
(\000D)sh
132.395 403.922 mo
(\000\\)sh
148.395 403.922 mo
(\000H)sh
162.595 403.922 mo
(\000U)sh
849.245 65.872 mo
849.245 140.672 li
682.245 140.672 li
682.245 65.872 li
849.245 65.872 li
cp
682.745 66.872 mo
683.245 66.372 li
683.245 140.172 li
682.745 139.672 li
848.745 139.672 li
848.245 140.172 li
848.245 66.372 li
848.745 66.872 li
682.745 66.872 li
.695583 .0949111 0 0 cmyk
f
0 .9617 .904814 0 cmyk
%ADOBeginSubsetFont: QAAAAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/QAAAAA+TimesNewRomanPSMT 1 GetGlyphDirectory
73 <001C60D8A8C9B81F2C3A6EB915F5DDF05E4CD39F13547A7EF54F9D79FF32
092BEC553783B472AF53E99B3070692992C4C512F2D79447B5EC673AA5FA8274
BFE5BA294793E06A2CD85C961166E35F08CE852DFFE5F2678D2E0B1687083D40
FC628A3BE0EDFC936C866DE25768CCC0F39E7FAD6F5686BB7C64B79625F56C55
73F9A5214AA079CAA28A8468CCF29829FD2A747DD586D41C21A37BF93A8AC8FD
D941D5FFB6450DF53658C2420EB0E5E88807E727AED5F7> |
!
end
end end
%ADOEndSubsetFont
DUZMCP+TimesNewRomanPSMT [32.05 0 0 -32.05 0 0 ]msf
734.645 94.972 mo
(\000I)sh
745.295 94.972 mo
(\000O)sh
754.195 94.972 mo
(\000L)sh
763.095 94.972 mo
(\000W)sh
771.995 94.972 mo
(\000H)sh
786.195 94.972 mo
(\000U)sh
733.745 133.372 mo
(\000O)sh
742.645 133.372 mo
(\000D)sh
756.845 133.372 mo
(\000\\)sh
772.845 133.372 mo
(\000H)sh
787.045 133.372 mo
(\000U)sh
673.732 107.794 mo
673.732 103.294 li
673.732 98.794 li
682.732 103.294 li
673.732 107.794 li
cp
223.432 101.794 mo
675.982 101.794 li
675.982 104.794 li
223.432 104.794 li
223.432 101.794 li
.644953 .27805 0 0 cmyk
f
666.294 378.3 mo
666.294 373.8 li
666.294 369.3 li
675.294 373.8 li
666.294 378.3 li
cp
223.444 372.3 mo
668.544 372.3 li
668.544 375.3 li
223.444 375.3 li
223.444 372.3 li
f
151.241 338.533 mo
149.889 334.241 li
148.536 329.949 li
141.305 336.946 li
151.241 338.533 li
cp
765.304 138.765 mo
147.292 333.486 li
148.193 336.348 li
766.205 141.626 li
765.304 138.765 li
f
151.21 138.548 mo
149.863 142.842 li
148.516 147.136 li
141.276 140.149 li
151.21 138.548 li
cp
768.077 338.33 mo
745.177 331.147 li
746.075 328.284 li
768.975 335.467 li
768.077 338.33 li
cp
736.589 328.453 mo
713.69 321.27 li
714.587 318.408 li
737.487 325.591 li
736.589 328.453 li
cp
705.102 318.577 mo
682.202 311.393 li
683.1 308.531 li
706 315.714 li
705.102 318.577 li
cp
673.615 308.7 mo
650.715 301.517 li
651.613 298.654 li
674.513 305.837 li
673.615 308.7 li
cp
642.127 298.823 mo
619.228 291.64 li
620.126 288.778 li
643.025 295.961 li
642.127 298.823 li
cp
610.64 288.947 mo
587.74 281.764 li
588.638 278.901 li
611.538 286.084 li
610.64 288.947 li
cp
579.153 279.07 mo
556.253 271.887 li
557.151 269.024 li
580.051 276.207 li
579.153 279.07 li
cp
547.665 269.193 mo
524.766 262.01 li
525.664 259.148 li
548.563 266.331 li
547.665 269.193 li
cp
516.178 259.317 mo
493.278 252.134 li
494.176 249.271 li
517.076 256.454 li
516.178 259.317 li
cp
484.691 249.44 mo
461.791 242.257 li
462.689 239.394 li
485.589 246.577 li
484.691 249.44 li
cp
453.204 239.563 mo
430.304 232.38 li
431.202 229.518 li
454.101 236.701 li
453.204 239.563 li
cp
421.716 229.687 mo
398.816 222.504 li
399.714 219.641 li
422.614 226.824 li
421.716 229.687 li
cp
390.229 219.81 mo
367.329 212.627 li
368.227 209.764 li
391.127 216.947 li
390.229 219.81 li
cp
358.742 209.933 mo
335.842 202.75 li
336.74 199.888 li
359.639 207.071 li
358.742 209.933 li
cp
327.254 200.057 mo
304.354 192.874 li
305.252 190.011 li
328.152 197.194 li
327.254 200.057 li
cp
295.767 190.18 mo
272.867 182.997 li
273.765 180.135 li
296.665 187.318 li
295.767 190.18 li
cp
264.28 180.303 mo
241.38 173.12 li
242.278 170.258 li
265.177 177.441 li
264.28 180.303 li
cp
232.792 170.427 mo
209.892 163.244 li
210.79 160.381 li
233.69 167.564 li
232.792 170.427 li
cp
201.305 160.55 mo
178.405 153.367 li
179.303 150.505 li
202.203 157.688 li
201.305 160.55 li
cp
169.818 150.673 mo
147.267 143.6 li
148.165 140.738 li
170.716 147.811 li
169.818 150.673 li
.779721 .516869 .23331 0 cmyk
f
.92929 .879301 .889677 .799283 cmyk
%ADOBeginSubsetFont: QAAAAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/QAAAAA+TimesNewRomanPSMT 11 GetGlyphDirectory
39 <001C60D8A8C9B6079F62679EB6BE171B70F78590F81AB62F69F1BD2EFC86
EAE566847745E296D0CF61872DA4D8690C62AB23EE8E1DEB0EAD4BD93A2494CA
759A81248BAF55E0D2E2E5FE71261287BF00F8CDF501793AB3272F80F7AE3E40
7CA730AC3648B3AC2D58C8D1FD60CD7DB1F886A79A4080D8870256B6E127906D
500379950803F077453028FB6169> |
83 <001C60D8A8C9B7A73DDE03BEEA75B31F61E78B8C94AAF630ACAE1A607BD4
0EB48302A40F17E763F71E8B5595B8EEEBB33C0827EEA0DE5370DD4C7A092440
48D0DA814D6E79BAC2B8E456D2F119496FF35E5A13F4B8F71ECD895B10E20FBA
C666023D0941B5A0FF139CBD18745BC2892DD91EE541EAD2B54AF0839C3327F7
5904A81A3805CFC7AF83735A7079B305271753A14327F3CB693ACCFE5C9D6A3B
8431B357819DFFAD81BD2A60573E4CA4C48EC0A5E07291768D829E6A70067C07
6E94545FD4D8E2BB7431617263A47DB04F0B8630D6AB06FF2DD1B1F383A59D02
DF1C7730E7CC0F462D79552DFA> |
71 <001C60D8A8C9B7A73DB9CAB5EAE520FF5085D357A7F1B1CBAAAB9D3C3D20
3065B58561B55699E1F852D974E24DCDB3FAC1151DF1DB63800C3FA779DDD332
9A86B4E9458DA578ECA7DC82AB1CB5558FB398EDD8AF237A44BB61AD8FF07FB8
57EAFB03E3B7223E134D0A703B89A6CB54355CD1F1518C86E0EAFDD151579F5C
CB01DCDB1BD56096AB78D2E9ADD609F7B156D422E9074A62B38BF35F82A0AAD1
04E0C2CB94DA5F3F39F8DB246ADB5F008F682AF80FAED0C691E7A61887936278
3A36815EA1CE5876FAC4F83CDFE1BD4A> |
48 <001C60D8A8C9B59F85E8A8526E50FEB33438675EDBBD0866093A4555E3EA
3A35849B91EFFB88205281CC77395AC14DF328B50F1F179210F0307F50BFB242
AA7F76F18203303EF0BF46B76E61FB539D568EF9F434EC657F4C5CDE1BCAA90A
83BAFEB02869664DC06CC8CA4FA1E876C39F3F5371AD261F117CDAF8F6A4E96E
CA4F5088752E105CDEB8FBEB2F7F82D31A2FEB6DF3C053295A006D723DEE7CEF
30A9F16E8C6EE80DDA09053247> |
47 <001C60D8A8C9B7D8BE1910D0EBEC744B6638E6ED4C6FC0AF39F5B8B10BFA
09270956A997B577BBD8E3EC179B174ED931484CCFFCF819D4978AE37145A7A3
C221DF78A5AAD08DFCBE2638BCFCF6B4930FFFAD1163890B85697ECB905727AF
12A0E5C1679B01834AD8D0C4111313E17E548887938F4F64DA1DB39BD7CD6874
8B847D2C24AD687E0CDB56> |
42 <001C60D8A8C9B6079F6D6E36005945EC7274CF8CD5EF5B42D280E6D8A4F6
086ADC4B88F4BA16F6A237691F3F760A6129A67DCE9322616B1D7BB211155112
38376B94C01432A999E95ACF02B9743B28C7A3C8109C25013AEA47EC71807E3B
FE6B26986496C6B96A2458AF130FF55F6939E40BA894719E24A717462CC4A00B
11ADE5809AB1E0B4D7805897BE50087CD64F5AEA7744526E08B0D657538988C4
1BFE39A8735842D620E001E1A863F676AFB361CF4C81718CBC4A0CC5AC0D51A3
4ACA7D8BBE5B5D6E8D466D858B118FBBA2161DB0F7E151EB0958EF2C5C3F> |
69 <001C60D8A8C9B7A73DB90B311171EB67EB8746E2EC8FC994CCA7A632F7C7
E8F4A5D28D725796F2BC8526696060F460C892CC5686CD97F757C6EFB11E42DD
9AF110BE11F49DAEFA324F62E3046D4E2410C0923EDB87332B0381414594D399
924398EF0A71772EF0EFEA72F5940C288418E4FCC7A2DE1E6A1AEA513FBDA0D6
603C38C9676D3489A418D7163D5E50FB679144E02901D98844D885CA3AAF379A
83F23AED1F56FC130F21> |
57 <001C60D8A8C9B6079F6D060A2FEA7FC1569E0C14DA541DD91C00EBC3777B
DE67491C2EA2113C451959D17D324EE8DBB436A0F30BF65402B93EFD32E095FD
4A5BC20760673D3864924C1ACF695D3BD682644F24B440E38C1FF24D4CC16712
B502AE5F89EDD273AE3A1DBED84FBFBD9B8AF85ACA697ED4658DA6CFEAC07815
4F7D9BB4AB2053> |
53 <001C60D8A8C9B64EDFFA947759DE5E4889D88CE18F8690AE99A205DDE2B0
3BD344BEA750622B2A044F453846260E52F609F4B4A04ACF011765AB379E687D
E6B09D424D16AEE22850269A8AC1FBA0CB1130D1AA42D9BB70A20B4BABF91935
6C91EFB227A4D8127EEE951F8E9564FE86E42C72F4A2240B89192C9DDC8F972B
78271704B555EEFB95806003600DA3EB98ED971FD7E60CB5D9582744AABB3235
A69A23AA1EE2086410DF2F65A7A8081CD915B1599189D60C09010312710E9ABC
20DA4562DBD2C8D044173C4F2A486F4032CE9228CB8A1897A7C6FF5127> |
86 <001C60D8A8C9B7361F027554B74948DF9D509740193A97E4C5A946CCDAC2
2ACE16A97A38CAF70766C30631C22477718670FA129F481BA880FC6C2A8C233A
039A7A46ACD6F3CA0422B1CD13AB9E5980A98B78F274FD5FB0A519013427E3DF
40BD973F22C9B236BE3D27B0A78749138244A4ED344575D4F7F677439F8C2359
FAAB210EA03D2DAABF38A6B5B4F0819D6E85CC68A9859B12239E01058FD0C7C5
93B22AC00DE1C2A90508610457C5DFEA41C78C4C677B338B4C0ED41B0474AF50
9B93D8B3403DD443273DAE4F97B7CDCA81379AB0933639> |
88 <001C60D8A8C9B7A73DB9860E0681DA8AEA1E5FBC1C72A452614FEB33CC58
A199CCF544A550BDEE35652D618DE4A02AA9CF0753ADA232102DC8DC25CB9581
52D1B74BC447B68C074C25C2126470565A20B42A419CDD0C7A1DA63C6A764D55
5B867A9BE961ADBD0AF5B2007F47FCC9435F8B51D3F3A5D83941DD57A0C4D32E
169A6BACC26F8AD3C9372F1114911D1D3F3FB2725FADBF9F529AA2CFB178B79F
97520325221F3417C7781EB09765> |
!
end
end end
%ADOEndSubsetFont
DUZMCP+TimesNewRomanPSMT [30.768 -9.615 -9.615 -30.768 0 0 ]msf
472.152 212.787 mo
(\000')sh
494.328 205.857 mo
(\000U)sh
504.552 202.662 mo
(\000R)sh
519.912 197.862 mo
(\000S)sh
535.272 193.062 mo
(\000S)sh
550.632 188.262 mo
(\000H)sh
564.264 184.002 mo
(\000G)sh
579.624 179.202 mo
(\000\003)sh
587.304 176.802 mo
(\0000)sh
614.616 168.267 mo
(\000R)sh
629.976 163.467 mo
(\000G)sh
645.336 158.667 mo
(\000H)sh
658.968 154.407 mo
(\000O)sh
DUZMCP+TimesNewRomanPSMT [32.05 0 0 -32.05 0 0 ]msf
320.395 90.972 mo
(\000/)sh
339.945 90.972 mo
(\000R)sh
355.945 90.972 mo
(\000F)sh
370.145 90.972 mo
(\000D)sh
384.345 90.972 mo
(\000O)sh
393.245 90.972 mo
(\000\003)sh
401.245 90.972 mo
(\0000)sh
429.695 90.972 mo
(\000R)sh
445.695 90.972 mo
(\000G)sh
461.695 90.972 mo
(\000H)sh
475.895 90.972 mo
(\000O)sh
DUZMCP+TimesNewRomanPSMT [30.768 9.615 9.615 -30.768 0 0 ]msf
257.52 156.538 mo
(\000*)sh
279.696 163.468 mo
(\000O)sh
288.24 166.138 mo
(\000R)sh
303.6 170.938 mo
(\000E)sh
318.96 175.738 mo
(\000D)sh
332.592 179.998 mo
(\000O)sh
341.136 182.668 mo
(\000\003)sh
348.816 185.068 mo
(\0000)sh
376.128 193.603 mo
(\000R)sh
391.488 198.403 mo
(\000G)sh
406.848 203.203 mo
(\000H)sh
420.48 207.463 mo
(\000O)sh
DUZMCP+TimesNewRomanPSMT [32.05 0 0 -32.05 0 0 ]msf
320.395 361.522 mo
(\0009)sh
339.345 361.522 mo
(\000R)sh
355.345 361.522 mo
(\000W)sh
364.245 361.522 mo
(\000H)sh
378.445 361.522 mo
(\000\003)sh
386.445 361.522 mo
(\0005)sh
407.795 361.522 mo
(\000H)sh
421.995 361.522 mo
(\000V)sh
434.445 361.522 mo
(\000X)sh
450.445 361.522 mo
(\000O)sh
459.345 361.522 mo
(\000W)sh
58.745 420.032 mo
230.945 420.032 li
230.945 470.312 li
58.745 470.312 li
cp
.478157 .847898 0 0 cmyk
ef
231.495 419.472 mo
231.495 470.772 li
58.295 470.772 li
58.295 419.472 li
231.495 419.472 li
cp
58.795 420.472 mo
59.295 419.972 li
59.295 470.272 li
58.795 469.772 li
230.995 469.772 li
230.495 470.272 li
230.495 419.972 li
230.995 420.472 li
58.795 420.472 li
f
0 0 0 0 cmyk
%ADOBeginSubsetFont: QAAAAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/QAAAAA+TimesNewRomanPSMT 1 GetGlyphDirectory
51 <001C60D8A8C9B7EF322B88F9F448EE5C6C6600BEF9C3C9A017B9BABF8764
58925BFD3DF1270B888D0A52682DD77562B0592DCEFA4305CC7C82B5C217C153
D7D799EF75C3E1B47B2F2C3741BE023ABA656D3600645948113D9E1ACE5988E8
86C2CAB89042DA868AC9EEC60CE17BA00926C89C442DF26FC8F7E4DF94B56A18
CFB31DE37DED0B361C6E9E1A158721E9F2BF357AD3A9D82EC3F61E7737142FF1
2086F5CF2AAB01A87FB3B34AEED6F7C6CCE06EC32D6DE2EC0B548299344251FB
C628> |
!
end
end end
%ADOEndSubsetFont
DUZMCP+TimesNewRomanPSMT [32.05 0 0 -32.05 0 0 ]msf
69.345 455.972 mo
(\0003)sh
87.145 455.972 mo
(\000D)sh
101.345 455.972 mo
(\000U)sh
111.995 455.972 mo
(\000W)sh
120.895 455.972 mo
(\000L)sh
129.795 455.972 mo
(\000F)sh
143.995 455.972 mo
(\000L)sh
152.895 455.972 mo
(\000S)sh
168.895 455.972 mo
(\000D)sh
183.095 455.972 mo
(\000Q)sh
199.095 455.972 mo
(\000W)sh
207.995 455.972 mo
(\000V)sh
682.745 420.032 mo
861.785 420.032 li
861.785 470.312 li
682.745 470.312 li
cp
.478157 .847898 0 0 cmyk
ef
862.295 419.472 mo
862.295 470.772 li
682.245 470.772 li
682.245 419.472 li
862.295 419.472 li
cp
682.745 420.472 mo
683.245 419.972 li
683.245 470.272 li
682.745 469.772 li
861.795 469.772 li
861.295 470.272 li
861.295 419.972 li
861.795 420.472 li
682.745 420.472 li
f
0 0 0 0 cmyk
%ADOBeginSubsetFont: QAAAAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/QAAAAA+TimesNewRomanPSMT 1 GetGlyphDirectory
36 <001C60D8A8C9B6079F6D0C3DD1DA701F2FEF50BE2CCF679467EAB463D54C
495B1FC98737C4805A67EB9B211579E256E1BCD120087B7083980EFC748D95F1
5A9738703A6CB4125517112E8D63595864B93D16C7B325AB1759098D24D8A43A
63AEECA533864B64013C499C4207455D5210408E58672A172F78CB14D7398507
1102DFA93B6532> |
!
end
end end
%ADOEndSubsetFont
DUZMCP+TimesNewRomanPSMT [32.05 0 0 -32.05 0 0 ]msf
699.395 455.972 mo
(\000$)sh
722.495 455.972 mo
(\000J)sh
738.495 455.972 mo
(\000J)sh
754.495 455.972 mo
(\000U)sh
765.145 455.972 mo
(\000H)sh
779.345 455.972 mo
(\000J)sh
795.345 455.972 mo
(\000D)sh
809.545 455.972 mo
(\000W)sh
818.445 455.972 mo
(\000R)sh
834.445 455.972 mo
(\000U)sh
666.57 490.522 mo
666.57 483.772 li
668.82 483.772 li
668.82 490.522 li
666.57 490.522 li
cp
666.57 481.522 mo
666.57 474.772 li
668.82 474.772 li
668.82 481.522 li
666.57 481.522 li
cp
666.57 472.522 mo
666.57 465.772 li
668.82 465.772 li
668.82 472.522 li
666.57 472.522 li
cp
666.57 463.522 mo
666.57 456.772 li
668.82 456.772 li
668.82 463.522 li
666.57 463.522 li
cp
666.57 454.522 mo
666.57 447.772 li
668.82 447.772 li
668.82 454.522 li
666.57 454.522 li
cp
666.57 445.522 mo
666.57 438.772 li
668.82 438.772 li
668.82 445.522 li
666.57 445.522 li
cp
666.57 436.522 mo
666.57 429.772 li
668.82 429.772 li
668.82 436.522 li
666.57 436.522 li
cp
666.57 427.522 mo
666.57 420.772 li
668.82 420.772 li
668.82 427.522 li
666.57 427.522 li
cp
666.57 418.522 mo
666.57 411.772 li
668.82 411.772 li
668.82 418.522 li
666.57 418.522 li
cp
666.57 409.522 mo
666.57 402.772 li
668.82 402.772 li
668.82 409.522 li
666.57 409.522 li
cp
666.57 400.522 mo
666.57 393.772 li
668.82 393.772 li
668.82 400.522 li
666.57 400.522 li
cp
666.57 391.522 mo
666.57 384.772 li
668.82 384.772 li
668.82 391.522 li
666.57 391.522 li
cp
666.57 382.522 mo
666.57 375.772 li
668.82 375.772 li
668.82 382.522 li
666.57 382.522 li
cp
666.57 373.522 mo
666.57 366.772 li
668.82 366.772 li
668.82 373.522 li
666.57 373.522 li
cp
666.57 364.522 mo
666.57 357.772 li
668.82 357.772 li
668.82 364.522 li
666.57 364.522 li
cp
666.57 355.522 mo
666.57 348.772 li
668.82 348.772 li
668.82 355.522 li
666.57 355.522 li
cp
666.57 346.522 mo
666.57 339.772 li
668.82 339.772 li
668.82 346.522 li
666.57 346.522 li
cp
666.57 337.522 mo
666.57 330.772 li
668.82 330.772 li
668.82 337.522 li
666.57 337.522 li
cp
666.57 328.522 mo
666.57 321.772 li
668.82 321.772 li
668.82 328.522 li
666.57 328.522 li
cp
666.57 319.522 mo
666.57 312.772 li
668.82 312.772 li
668.82 319.522 li
666.57 319.522 li
cp
666.57 310.522 mo
666.57 303.772 li
668.82 303.772 li
668.82 310.522 li
666.57 310.522 li
cp
666.57 301.522 mo
666.57 294.772 li
668.82 294.772 li
668.82 301.522 li
666.57 301.522 li
cp
666.57 292.522 mo
666.57 285.772 li
668.82 285.772 li
668.82 292.522 li
666.57 292.522 li
cp
666.57 283.522 mo
666.57 276.772 li
668.82 276.772 li
668.82 283.522 li
666.57 283.522 li
cp
666.57 274.522 mo
666.57 267.772 li
668.82 267.772 li
668.82 274.522 li
666.57 274.522 li
cp
666.57 265.522 mo
666.57 258.772 li
668.82 258.772 li
668.82 265.522 li
666.57 265.522 li
cp
666.57 256.522 mo
666.57 249.772 li
668.82 249.772 li
668.82 256.522 li
666.57 256.522 li
cp
666.57 247.522 mo
666.57 240.772 li
668.82 240.772 li
668.82 247.522 li
666.57 247.522 li
cp
666.57 238.522 mo
666.57 231.772 li
668.82 231.772 li
668.82 238.522 li
666.57 238.522 li
cp
666.57 229.522 mo
666.57 222.772 li
668.82 222.772 li
668.82 229.522 li
666.57 229.522 li
cp
666.57 220.522 mo
666.57 213.772 li
668.82 213.772 li
668.82 220.522 li
666.57 220.522 li
cp
666.57 211.522 mo
666.57 204.772 li
668.82 204.772 li
668.82 211.522 li
666.57 211.522 li
cp
666.57 202.522 mo
666.57 195.772 li
668.82 195.772 li
668.82 202.522 li
666.57 202.522 li
cp
666.57 193.522 mo
666.57 186.772 li
668.82 186.772 li
668.82 193.522 li
666.57 193.522 li
cp
666.57 184.522 mo
666.57 177.772 li
668.82 177.772 li
668.82 184.522 li
666.57 184.522 li
cp
666.57 175.522 mo
666.57 168.772 li
668.82 168.772 li
668.82 175.522 li
666.57 175.522 li
cp
666.57 166.522 mo
666.57 159.772 li
668.82 159.772 li
668.82 166.522 li
666.57 166.522 li
cp
666.57 157.522 mo
666.57 150.772 li
668.82 150.772 li
668.82 157.522 li
666.57 157.522 li
cp
666.57 148.522 mo
666.57 141.772 li
668.82 141.772 li
668.82 148.522 li
666.57 148.522 li
cp
666.57 139.522 mo
666.57 132.772 li
668.82 132.772 li
668.82 139.522 li
666.57 139.522 li
cp
666.57 130.522 mo
666.57 123.772 li
668.82 123.772 li
668.82 130.522 li
666.57 130.522 li
cp
666.57 121.522 mo
666.57 114.772 li
668.82 114.772 li
668.82 121.522 li
666.57 121.522 li
cp
666.57 112.522 mo
666.57 105.772 li
668.82 105.772 li
668.82 112.522 li
666.57 112.522 li
cp
666.57 103.522 mo
666.57 96.772 li
668.82 96.772 li
668.82 103.522 li
666.57 103.522 li
cp
666.57 94.522 mo
666.57 87.772 li
668.82 87.772 li
668.82 94.522 li
666.57 94.522 li
cp
666.57 85.522 mo
666.57 78.772 li
668.82 78.772 li
668.82 85.522 li
666.57 85.522 li
cp
666.57 76.522 mo
666.57 69.772 li
668.82 69.772 li
668.82 76.522 li
666.57 76.522 li
cp
666.57 67.522 mo
666.57 60.772 li
668.82 60.772 li
668.82 67.522 li
666.57 67.522 li
cp
666.57 58.522 mo
666.57 57.047 li
674.095 57.047 li
674.095 59.297 li
667.695 59.297 li
668.82 58.172 li
668.82 59.297 li
668.82 58.522 li
666.57 58.522 li
cp
676.345 57.047 mo
683.095 57.047 li
683.095 59.297 li
676.345 59.297 li
676.345 57.047 li
cp
685.345 57.047 mo
692.095 57.047 li
692.095 59.297 li
685.345 59.297 li
685.345 57.047 li
cp
694.345 57.047 mo
701.095 57.047 li
701.095 59.297 li
694.345 59.297 li
694.345 57.047 li
cp
703.345 57.047 mo
710.095 57.047 li
710.095 59.297 li
703.345 59.297 li
703.345 57.047 li
cp
712.345 57.047 mo
719.095 57.047 li
719.095 59.297 li
712.345 59.297 li
712.345 57.047 li
cp
721.345 57.047 mo
728.095 57.047 li
728.095 59.297 li
721.345 59.297 li
721.345 57.047 li
cp
730.345 57.047 mo
737.095 57.047 li
737.095 59.297 li
730.345 59.297 li
730.345 57.047 li
cp
739.345 57.047 mo
746.095 57.047 li
746.095 59.297 li
739.345 59.297 li
739.345 57.047 li
cp
748.345 57.047 mo
755.095 57.047 li
755.095 59.297 li
748.345 59.297 li
748.345 57.047 li
cp
757.345 57.047 mo
764.095 57.047 li
764.095 59.297 li
757.345 59.297 li
757.345 57.047 li
cp
766.345 57.047 mo
773.095 57.047 li
773.095 59.297 li
766.345 59.297 li
766.345 57.047 li
cp
775.345 57.047 mo
782.095 57.047 li
782.095 59.297 li
775.345 59.297 li
775.345 57.047 li
cp
784.345 57.047 mo
791.095 57.047 li
791.095 59.297 li
784.345 59.297 li
784.345 57.047 li
cp
793.345 57.047 mo
800.095 57.047 li
800.095 59.297 li
793.345 59.297 li
793.345 57.047 li
cp
802.345 57.047 mo
809.095 57.047 li
809.095 59.297 li
802.345 59.297 li
802.345 57.047 li
cp
811.345 57.047 mo
818.095 57.047 li
818.095 59.297 li
811.345 59.297 li
811.345 57.047 li
cp
820.345 57.047 mo
827.095 57.047 li
827.095 59.297 li
820.345 59.297 li
820.345 57.047 li
cp
829.345 57.047 mo
836.095 57.047 li
836.095 59.297 li
829.345 59.297 li
829.345 57.047 li
cp
838.345 57.047 mo
845.095 57.047 li
845.095 59.297 li
838.345 59.297 li
838.345 57.047 li
cp
847.345 57.047 mo
854.095 57.047 li
854.095 59.297 li
847.345 59.297 li
847.345 57.047 li
cp
856.345 57.047 mo
863.095 57.047 li
863.095 59.297 li
856.345 59.297 li
856.345 57.047 li
cp
865.345 57.047 mo
872.095 57.047 li
872.095 59.297 li
865.345 59.297 li
865.345 57.047 li
cp
873.42 60.222 mo
873.42 66.972 li
871.17 66.972 li
871.17 60.222 li
873.42 60.222 li
cp
873.42 69.222 mo
873.42 75.972 li
871.17 75.972 li
871.17 69.222 li
873.42 69.222 li
cp
873.42 78.222 mo
873.42 84.972 li
871.17 84.972 li
871.17 78.222 li
873.42 78.222 li
cp
873.42 87.222 mo
873.42 93.972 li
871.17 93.972 li
871.17 87.222 li
873.42 87.222 li
cp
873.42 96.222 mo
873.42 102.972 li
871.17 102.972 li
871.17 96.222 li
873.42 96.222 li
cp
873.42 105.222 mo
873.42 111.972 li
871.17 111.972 li
871.17 105.222 li
873.42 105.222 li
cp
873.42 114.222 mo
873.42 120.972 li
871.17 120.972 li
871.17 114.222 li
873.42 114.222 li
cp
873.42 123.222 mo
873.42 129.972 li
871.17 129.972 li
871.17 123.222 li
873.42 123.222 li
cp
873.42 132.222 mo
873.42 138.972 li
871.17 138.972 li
871.17 132.222 li
873.42 132.222 li
cp
873.42 141.222 mo
873.42 147.972 li
871.17 147.972 li
871.17 141.222 li
873.42 141.222 li
cp
873.42 150.222 mo
873.42 156.972 li
871.17 156.972 li
871.17 150.222 li
873.42 150.222 li
cp
873.42 159.222 mo
873.42 165.972 li
871.17 165.972 li
871.17 159.222 li
873.42 159.222 li
cp
873.42 168.222 mo
873.42 174.972 li
871.17 174.972 li
871.17 168.222 li
873.42 168.222 li
cp
873.42 177.222 mo
873.42 183.972 li
871.17 183.972 li
871.17 177.222 li
873.42 177.222 li
cp
873.42 186.222 mo
873.42 192.972 li
871.17 192.972 li
871.17 186.222 li
873.42 186.222 li
cp
873.42 195.222 mo
873.42 201.972 li
871.17 201.972 li
871.17 195.222 li
873.42 195.222 li
cp
873.42 204.222 mo
873.42 210.972 li
871.17 210.972 li
871.17 204.222 li
873.42 204.222 li
cp
873.42 213.222 mo
873.42 219.972 li
871.17 219.972 li
871.17 213.222 li
873.42 213.222 li
cp
873.42 222.222 mo
873.42 228.972 li
871.17 228.972 li
871.17 222.222 li
873.42 222.222 li
cp
873.42 231.222 mo
873.42 237.972 li
871.17 237.972 li
871.17 231.222 li
873.42 231.222 li
cp
873.42 240.222 mo
873.42 246.972 li
871.17 246.972 li
871.17 240.222 li
873.42 240.222 li
cp
873.42 249.222 mo
873.42 255.972 li
871.17 255.972 li
871.17 249.222 li
873.42 249.222 li
cp
873.42 258.222 mo
873.42 264.972 li
871.17 264.972 li
871.17 258.222 li
873.42 258.222 li
cp
873.42 267.222 mo
873.42 273.972 li
871.17 273.972 li
871.17 267.222 li
873.42 267.222 li
cp
873.42 276.222 mo
873.42 282.972 li
871.17 282.972 li
871.17 276.222 li
873.42 276.222 li
cp
873.42 285.222 mo
873.42 291.972 li
871.17 291.972 li
871.17 285.222 li
873.42 285.222 li
cp
873.42 294.222 mo
873.42 300.972 li
871.17 300.972 li
871.17 294.222 li
873.42 294.222 li
cp
873.42 303.222 mo
873.42 309.972 li
871.17 309.972 li
871.17 303.222 li
873.42 303.222 li
cp
873.42 312.222 mo
873.42 318.972 li
871.17 318.972 li
871.17 312.222 li
873.42 312.222 li
cp
873.42 321.222 mo
873.42 327.972 li
871.17 327.972 li
871.17 321.222 li
873.42 321.222 li
cp
873.42 330.222 mo
873.42 336.972 li
871.17 336.972 li
871.17 330.222 li
873.42 330.222 li
cp
873.42 339.222 mo
873.42 345.972 li
871.17 345.972 li
871.17 339.222 li
873.42 339.222 li
cp
873.42 348.222 mo
873.42 354.972 li
871.17 354.972 li
871.17 348.222 li
873.42 348.222 li
cp
873.42 357.222 mo
873.42 363.972 li
871.17 363.972 li
871.17 357.222 li
873.42 357.222 li
cp
873.42 366.222 mo
873.42 372.972 li
871.17 372.972 li
871.17 366.222 li
873.42 366.222 li
cp
873.42 375.222 mo
873.42 381.972 li
871.17 381.972 li
871.17 375.222 li
873.42 375.222 li
cp
873.42 384.222 mo
873.42 390.972 li
871.17 390.972 li
871.17 384.222 li
873.42 384.222 li
cp
873.42 393.222 mo
873.42 399.972 li
871.17 399.972 li
871.17 393.222 li
873.42 393.222 li
cp
873.42 402.222 mo
873.42 408.972 li
871.17 408.972 li
871.17 402.222 li
873.42 402.222 li
cp
873.42 411.222 mo
873.42 417.972 li
871.17 417.972 li
871.17 411.222 li
873.42 411.222 li
cp
873.42 420.222 mo
873.42 426.972 li
871.17 426.972 li
871.17 420.222 li
873.42 420.222 li
cp
873.42 429.222 mo
873.42 435.972 li
871.17 435.972 li
871.17 429.222 li
873.42 429.222 li
cp
873.42 438.222 mo
873.42 444.972 li
871.17 444.972 li
871.17 438.222 li
873.42 438.222 li
cp
873.42 447.222 mo
873.42 453.972 li
871.17 453.972 li
871.17 447.222 li
873.42 447.222 li
cp
873.42 456.222 mo
873.42 462.972 li
871.17 462.972 li
871.17 456.222 li
873.42 456.222 li
cp
873.42 465.222 mo
873.42 471.972 li
871.17 471.972 li
871.17 465.222 li
873.42 465.222 li
cp
873.42 474.222 mo
873.42 480.972 li
871.17 480.972 li
871.17 474.222 li
873.42 474.222 li
cp
873.42 483.222 mo
873.42 489.972 li
871.17 489.972 li
871.17 483.222 li
873.42 483.222 li
cp
870.595 491.647 mo
863.845 491.647 li
863.845 489.397 li
870.595 489.397 li
870.595 491.647 li
cp
861.595 491.647 mo
854.845 491.647 li
854.845 489.397 li
861.595 489.397 li
861.595 491.647 li
cp
852.595 491.647 mo
845.845 491.647 li
845.845 489.397 li
852.595 489.397 li
852.595 491.647 li
cp
843.595 491.647 mo
836.845 491.647 li
836.845 489.397 li
843.595 489.397 li
843.595 491.647 li
cp
834.595 491.647 mo
827.845 491.647 li
827.845 489.397 li
834.595 489.397 li
834.595 491.647 li
cp
825.595 491.647 mo
818.845 491.647 li
818.845 489.397 li
825.595 489.397 li
825.595 491.647 li
cp
816.595 491.647 mo
809.845 491.647 li
809.845 489.397 li
816.595 489.397 li
816.595 491.647 li
cp
807.595 491.647 mo
800.845 491.647 li
800.845 489.397 li
807.595 489.397 li
807.595 491.647 li
cp
798.595 491.647 mo
791.845 491.647 li
791.845 489.397 li
798.595 489.397 li
798.595 491.647 li
cp
789.595 491.647 mo
782.845 491.647 li
782.845 489.397 li
789.595 489.397 li
789.595 491.647 li
cp
780.595 491.647 mo
773.845 491.647 li
773.845 489.397 li
780.595 489.397 li
780.595 491.647 li
cp
771.595 491.647 mo
764.845 491.647 li
764.845 489.397 li
771.595 489.397 li
771.595 491.647 li
cp
762.595 491.647 mo
755.845 491.647 li
755.845 489.397 li
762.595 489.397 li
762.595 491.647 li
cp
753.595 491.647 mo
746.845 491.647 li
746.845 489.397 li
753.595 489.397 li
753.595 491.647 li
cp
744.595 491.647 mo
737.845 491.647 li
737.845 489.397 li
744.595 489.397 li
744.595 491.647 li
cp
735.595 491.647 mo
728.845 491.647 li
728.845 489.397 li
735.595 489.397 li
735.595 491.647 li
cp
726.595 491.647 mo
719.845 491.647 li
719.845 489.397 li
726.595 489.397 li
726.595 491.647 li
cp
717.595 491.647 mo
710.845 491.647 li
710.845 489.397 li
717.595 489.397 li
717.595 491.647 li
cp
708.595 491.647 mo
701.845 491.647 li
701.845 489.397 li
708.595 489.397 li
708.595 491.647 li
cp
699.595 491.647 mo
692.845 491.647 li
692.845 489.397 li
699.595 489.397 li
699.595 491.647 li
cp
690.595 491.647 mo
683.845 491.647 li
683.845 489.397 li
690.595 489.397 li
690.595 491.647 li
cp
681.595 491.647 mo
674.845 491.647 li
674.845 489.397 li
681.595 489.397 li
681.595 491.647 li
cp
672.595 491.647 mo
667.695 491.647 li
667.695 489.397 li
672.595 489.397 li
672.595 491.647 li
.751797 0 .870695 0 cmyk
f
862.295 336.422 mo
862.295 411.222 li
674.795 411.222 li
674.795 336.422 li
862.295 336.422 li
cp
675.295 337.422 mo
675.795 336.922 li
675.795 410.722 li
675.295 410.222 li
861.795 410.222 li
861.295 410.722 li
861.295 336.922 li
861.795 337.422 li
675.295 337.422 li
.695583 .0949111 0 0 cmyk
f
0 .9617 .904814 0 cmyk
DUZMCP+TimesNewRomanPSMT [32.05 0 0 -32.05 0 0 ]msf
728.545 365.522 mo
(\000J)sh
744.545 365.522 mo
(\000O)sh
753.445 365.522 mo
(\000R)sh
769.445 365.522 mo
(\000E)sh
785.445 365.522 mo
(\000D)sh
799.645 365.522 mo
(\000O)sh
692.995 403.922 mo
(\000D)sh
707.195 403.922 mo
(\000J)sh
723.195 403.922 mo
(\000J)sh
739.195 403.922 mo
(\000U)sh
749.845 403.922 mo
(\000H)sh
764.045 403.922 mo
(\000J)sh
780.045 403.922 mo
(\000D)sh
794.245 403.922 mo
(\000W)sh
803.145 403.922 mo
(\000L)sh
812.045 403.922 mo
(\000R)sh
828.045 403.922 mo
(\000Q)sh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/DUZMCP+TimesNewRomanPSMT-Identity-H uf
/DUZMCP+TimesNewRomanPSMT /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
