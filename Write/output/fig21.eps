%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADP7055.tmp.pdf
%%Creator: Adobe Acrobat 20.6.0
%%For: A
%%CreationDate: 2023/11/23, 11:33:42
%%BoundingBox: -1 0 734 248
%%HiResBoundingBox: 0 0 733.0854 247.0050
%%CropBox: 0 0 733.0854 247.0050
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1338 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   pdfx:Comments=""
   pdfx:Company=""
   pdfx:SourceModified="D:20230921125413+04'54'"
   xmp:CreateDate="2023-11-23T11:32:55+08:00"
   xmp:CreatorTool="WPS 演示"
   xmp:ModifyDate="2023-11-23T11:32:55+08:00"
   xmp:MetadataDate="2023-11-21T09:17:33+08:00"
   pdf:Keywords=""
   pdf:Producer="Acrobat Distiller 20.0 (Windows)"
   pdf:Trapped="False"
   xmpMM:DocumentID="uuid:ea52af15-a40a-4508-a70b-03150548d7a5"
   xmpMM:InstanceID="uuid:35a745cb-020f-4c7c-b575-1a3f7cf0a2b4">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>A</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">~?</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -247.005 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-1.52588e-5 0 mo
-1.52588e-5 247.005 li
733.085 247.005 li
733.085 0 li
cp
clp
gsave
-75.5069 -96.2635 mo
884.493 -96.2635 li
884.493 443.737 li
-75.5069 443.737 li
cp
eclp
gsave
-35.6829 -24.5815 mo
776.717 -24.5815 li
776.717 304.783 li
-35.6829 304.783 li
cp
clp
-35.6829 304.783 mo
776.717 304.783 li
776.717 -24.6175 li
-35.6829 -24.6175 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
514.893 237.936 mo
726.213 237.936 li
726.213 72.5765 li
514.893 72.5765 li
cp
.15213 .042969 .009674 0 cmyk
f
514.593 72.2365 mo
726.493 72.2365 li
726.493 238.236 li
514.593 238.236 li
cp
726.493 72.2365 mo
cp
514.893 72.8365 mo
515.193 72.5365 li
515.193 237.936 li
514.893 237.636 li
726.193 237.636 li
725.893 237.936 li
725.893 72.5365 li
726.193 72.8365 li
514.893 72.8365 li
.80038 .47193 .046113 0 cmyk
f
688.773 72.5765 mo
597.933 156.457 li
564.453 72.5765 li
688.773 72.5765 li
.14533 0 .19532 0 cmyk
ef
564.443 72.0365 mo
567.443 72.0365 li
567.443 73.0365 li
564.443 73.0365 li
cp
568.443 72.0365 mo
568.443 72.0365 mo
571.443 72.0365 li
571.443 73.0365 li
568.443 73.0365 li
cp
572.443 72.0365 mo
572.443 72.0365 mo
575.443 72.0365 li
575.443 73.0365 li
572.443 73.0365 li
cp
576.443 72.0365 mo
576.443 72.0365 mo
579.443 72.0365 li
579.443 73.0365 li
576.443 73.0365 li
cp
580.443 72.0365 mo
580.443 72.0365 mo
583.443 72.0365 li
583.443 73.0365 li
580.443 73.0365 li
cp
584.443 72.0365 mo
584.443 72.0365 mo
587.443 72.0365 li
587.443 73.0365 li
584.443 73.0365 li
cp
588.443 72.0365 mo
588.443 72.0365 mo
591.443 72.0365 li
591.443 73.0365 li
588.443 73.0365 li
cp
592.443 72.0365 mo
592.443 72.0365 mo
595.443 72.0365 li
595.443 73.0365 li
592.443 73.0365 li
cp
596.443 72.0365 mo
596.443 72.0365 mo
599.443 72.0365 li
599.443 73.0365 li
596.443 73.0365 li
cp
600.443 72.0365 mo
600.443 72.0365 mo
603.443 72.0365 li
603.443 73.0365 li
600.443 73.0365 li
cp
604.443 72.0365 mo
604.443 72.0365 mo
607.443 72.0365 li
607.443 73.0365 li
604.443 73.0365 li
cp
608.443 72.0365 mo
608.443 72.0365 mo
611.443 72.0365 li
611.443 73.0365 li
608.443 73.0365 li
cp
612.443 72.0365 mo
612.443 72.0365 mo
615.443 72.0365 li
615.443 73.0365 li
612.443 73.0365 li
cp
616.443 72.0365 mo
616.443 72.0365 mo
619.443 72.0365 li
619.443 73.0365 li
616.443 73.0365 li
cp
620.443 72.0365 mo
620.443 72.0365 mo
623.443 72.0365 li
623.443 73.0365 li
620.443 73.0365 li
cp
624.443 72.0365 mo
624.443 72.0365 mo
627.443 72.0365 li
627.443 73.0365 li
624.443 73.0365 li
cp
628.443 72.0365 mo
628.443 72.0365 mo
631.443 72.0365 li
631.443 73.0365 li
628.443 73.0365 li
cp
632.443 72.0365 mo
632.443 72.0365 mo
635.443 72.0365 li
635.443 73.0365 li
632.443 73.0365 li
cp
636.443 72.0365 mo
636.443 72.0365 mo
639.443 72.0365 li
639.443 73.0365 li
636.443 73.0365 li
cp
640.443 72.0365 mo
640.443 72.0365 mo
643.443 72.0365 li
643.443 73.0365 li
640.443 73.0365 li
cp
644.443 72.0365 mo
644.443 72.0365 mo
647.443 72.0365 li
647.443 73.0365 li
644.443 73.0365 li
cp
648.443 72.0365 mo
648.443 72.0365 mo
651.443 72.0365 li
651.443 73.0365 li
648.443 73.0365 li
cp
652.443 72.0365 mo
652.443 72.0365 mo
655.443 72.0365 li
655.443 73.0365 li
652.443 73.0365 li
cp
656.443 72.0365 mo
656.443 72.0365 mo
659.443 72.0365 li
659.443 73.0365 li
656.443 73.0365 li
cp
660.443 72.0365 mo
660.443 72.0365 mo
663.443 72.0365 li
663.443 73.0365 li
660.443 73.0365 li
cp
664.443 72.0365 mo
664.443 72.0365 mo
667.443 72.0365 li
667.443 73.0365 li
664.443 73.0365 li
cp
668.443 72.0365 mo
668.443 72.0365 mo
671.443 72.0365 li
671.443 73.0365 li
668.443 73.0365 li
cp
672.443 72.0365 mo
672.443 72.0365 mo
675.443 72.0365 li
675.443 73.0365 li
672.443 73.0365 li
cp
676.443 72.0365 mo
676.443 72.0365 mo
679.443 72.0365 li
679.443 73.0365 li
676.443 73.0365 li
cp
680.443 72.0365 mo
680.443 72.0365 mo
683.443 72.0365 li
683.443 73.0365 li
680.443 73.0365 li
cp
684.443 72.0365 mo
684.443 72.0365 mo
687.443 72.0365 li
687.443 73.0365 li
684.443 73.0365 li
cp
688.443 72.0365 mo
690.071 72.0365 li
687.185 74.7015 li
686.507 73.9675 li
688.454 72.1695 li
688.793 73.0365 li
687.515 73.0365 li
688.443 73.0365 li
688.443 72.0365 li
cp
686.451 75.3805 mo
684.247 77.4155 li
683.568 76.6805 li
685.772 74.6455 li
686.451 75.3805 li
cp
683.512 78.0935 mo
681.308 80.1295 li
680.63 79.3945 li
682.834 77.3595 li
683.512 78.0935 li
cp
680.574 80.8075 mo
678.37 82.8435 li
677.691 82.1085 li
679.895 80.0735 li
680.574 80.8075 li
cp
677.635 83.5215 mo
675.431 85.5565 li
674.753 84.8225 li
676.957 82.7865 li
677.635 83.5215 li
cp
674.696 86.2355 mo
672.493 88.2705 li
671.814 87.5365 li
674.018 85.5005 li
674.696 86.2355 li
cp
671.758 88.9495 mo
669.554 90.9845 li
668.876 90.2495 li
671.079 88.2145 li
671.758 88.9495 li
cp
668.819 91.6635 mo
666.615 93.6985 li
665.937 92.9635 li
668.141 90.9285 li
668.819 91.6635 li
cp
665.881 94.3765 mo
663.677 96.4125 li
662.998 95.6775 li
665.202 93.6425 li
665.881 94.3765 li
cp
662.942 97.0905 mo
660.738 99.1255 li
660.06 98.3915 li
662.264 96.3555 li
662.942 97.0905 li
cp
660.004 99.8045 mo
657.8 101.839 li
657.121 101.105 li
659.325 99.0695 li
660.004 99.8045 li
cp
657.065 102.518 mo
654.861 104.553 li
654.183 103.818 li
656.387 101.783 li
657.065 102.518 li
cp
654.126 105.232 mo
651.923 107.268 li
651.244 106.533 li
653.448 104.497 li
654.126 105.232 li
cp
651.188 107.945 mo
648.984 109.982 li
648.305 109.246 li
650.509 107.212 li
651.188 107.945 li
cp
648.249 110.66 mo
646.045 112.695 li
645.367 111.96 li
647.571 109.926 li
648.249 110.66 li
cp
645.311 113.374 mo
643.107 115.409 li
642.428 114.674 li
644.632 112.639 li
645.311 113.374 li
cp
642.372 116.087 mo
640.168 118.122 li
639.49 117.389 li
641.694 115.353 li
642.372 116.087 li
cp
639.434 118.801 mo
637.23 120.837 li
636.551 120.102 li
638.755 118.066 li
639.434 118.801 li
cp
636.495 121.514 mo
634.291 123.551 li
633.613 122.815 li
635.816 120.781 li
636.495 121.514 li
cp
633.556 124.229 mo
631.352 126.264 li
630.674 125.529 li
632.878 123.495 li
633.556 124.229 li
cp
630.618 126.943 mo
628.414 128.978 li
627.735 128.243 li
629.939 126.208 li
630.618 126.943 li
cp
627.679 129.656 mo
625.475 131.691 li
624.797 130.958 li
627.001 128.921 li
627.679 129.656 li
cp
624.741 132.37 mo
622.537 134.406 li
621.858 133.671 li
624.062 131.635 li
624.741 132.37 li
cp
621.802 135.083 mo
619.598 137.12 li
618.92 136.384 li
621.124 134.35 li
621.802 135.083 li
cp
618.863 137.798 mo
616.66 139.833 li
615.981 139.098 li
618.185 137.064 li
618.863 137.798 li
cp
615.925 140.512 mo
613.721 142.547 li
613.043 141.813 li
615.246 139.776 li
615.925 140.512 li
cp
612.986 143.225 mo
610.782 145.26 li
610.104 144.526 li
612.308 142.491 li
612.986 143.225 li
cp
610.048 145.939 mo
607.844 147.975 li
607.165 147.24 li
609.369 145.204 li
610.048 145.939 li
cp
607.109 148.654 mo
604.905 150.689 li
604.227 149.953 li
606.431 147.919 li
607.109 148.654 li
cp
604.171 151.367 mo
601.967 153.402 li
601.288 152.667 li
603.492 150.633 li
604.171 151.367 li
cp
601.232 154.081 mo
599.028 156.117 li
598.35 155.382 li
600.554 153.346 li
601.232 154.081 li
cp
598.293 156.794 mo
597.749 157.297 li
596.372 153.848 li
597.301 153.478 li
598.408 156.251 li
597.605 156.069 li
598.139 155.576 li
597.615 156.06 li
598.293 156.794 li
cp
596.002 152.919 mo
594.889 150.133 li
595.818 149.762 li
596.93 152.549 li
596.002 152.919 li
cp
594.518 149.206 mo
593.406 146.419 li
594.334 146.048 li
595.447 148.835 li
594.518 149.206 li
cp
593.035 145.491 mo
591.922 142.704 li
592.851 142.333 li
593.964 145.12 li
593.035 145.491 li
cp
591.552 141.775 mo
590.439 138.99 li
591.368 138.618 li
592.48 141.404 li
591.552 141.775 li
cp
590.068 138.061 mo
588.956 135.275 li
589.885 134.904 li
590.997 137.689 li
590.068 138.061 li
cp
588.585 134.345 mo
587.472 131.559 li
588.401 131.189 li
589.514 133.975 li
588.585 134.345 li
cp
587.102 130.632 mo
585.989 127.844 li
586.918 127.475 li
588.03 130.26 li
587.102 130.632 li
cp
585.618 126.917 mo
584.506 124.13 li
585.435 123.759 li
586.547 126.546 li
585.618 126.917 li
cp
584.135 123.202 mo
583.023 120.415 li
583.951 120.044 li
585.064 122.831 li
584.135 123.202 li
cp
582.652 119.486 mo
581.539 116.701 li
582.468 116.329 li
583.58 119.115 li
582.652 119.486 li
cp
581.168 115.771 mo
580.056 112.986 li
580.985 112.615 li
582.097 115.402 li
581.168 115.771 li
cp
579.685 112.057 mo
578.573 109.271 li
579.501 108.9 li
580.614 111.686 li
579.685 112.057 li
cp
578.202 108.342 mo
577.089 105.557 li
578.018 105.186 li
579.131 107.971 li
578.202 108.342 li
cp
576.718 104.628 mo
575.606 101.841 li
576.535 101.471 li
577.647 104.257 li
576.718 104.628 li
cp
575.235 100.913 mo
574.123 98.1265 li
575.051 97.7555 li
576.164 100.542 li
575.235 100.913 li
cp
573.752 97.1975 mo
572.639 94.4115 li
573.568 94.0405 li
574.681 96.8265 li
573.752 97.1975 li
cp
572.269 93.4835 mo
571.156 90.6965 li
572.085 90.3265 li
573.197 93.1125 li
572.269 93.4835 li
cp
570.785 89.7685 mo
569.673 86.9825 li
570.601 86.6115 li
571.714 89.3975 li
570.785 89.7685 li
cp
569.302 86.0535 mo
568.189 83.2675 li
569.118 82.8965 li
570.231 85.6825 li
569.302 86.0535 li
cp
567.819 82.3385 mo
566.706 79.5525 li
567.635 79.1815 li
568.747 81.9675 li
567.819 82.3385 li
cp
566.335 78.6235 mo
565.223 75.8375 li
566.151 75.4665 li
567.264 78.2525 li
566.335 78.6235 li
cp
564.852 74.9085 mo
563.979 72.7215 li
564.907 72.3515 li
565.781 74.5385 li
564.852 74.9085 li
.80038 .47193 .046113 0 cmyk
f
598.393 157.286 mo
581.143 237.936 li
514.893 237.986 li
514.893 72.5365 li
564.393 72.5365 li
598.393 157.286 li
0 .061555 .24347 0 cmyk
ef
564.857 72.3505 mo
565.974 75.1345 li
565.046 75.5065 li
563.929 72.7225 li
564.857 72.3505 li
cp
566.346 76.0625 mo
567.463 78.8475 li
566.535 79.2195 li
565.418 76.4355 li
566.346 76.0625 li
cp
567.836 79.7755 mo
568.953 82.5595 li
568.025 82.9315 li
566.908 80.1475 li
567.836 79.7755 li
cp
569.325 83.4875 mo
570.442 86.2715 li
569.514 86.6445 li
568.397 83.8595 li
569.325 83.4875 li
cp
570.814 87.1995 mo
571.931 89.9845 li
571.003 90.3565 li
569.886 87.5725 li
570.814 87.1995 li
cp
572.304 90.9125 mo
573.421 93.6965 li
572.493 94.0685 li
571.376 91.2845 li
572.304 90.9125 li
cp
573.793 94.6245 mo
574.91 97.4095 li
573.982 97.7815 li
572.865 94.9975 li
573.793 94.6245 li
cp
575.282 98.3375 mo
576.399 101.121 li
575.471 101.493 li
574.354 98.7095 li
575.282 98.3375 li
cp
576.772 102.049 mo
577.889 104.833 li
576.961 105.206 li
575.844 102.421 li
576.772 102.049 li
cp
578.261 105.761 mo
579.378 108.546 li
578.45 108.918 li
577.333 106.134 li
578.261 105.761 li
cp
579.75 109.474 mo
580.867 112.258 li
579.939 112.63 li
578.822 109.846 li
579.75 109.474 li
cp
581.24 113.186 mo
582.357 115.97 li
581.429 116.343 li
580.312 113.559 li
581.24 113.186 li
cp
582.729 116.899 mo
583.846 119.684 li
582.918 120.055 li
581.801 117.271 li
582.729 116.899 li
cp
584.218 120.611 mo
585.335 123.395 li
584.407 123.768 li
583.29 120.983 li
584.218 120.611 li
cp
585.708 124.323 mo
586.825 127.108 li
585.897 127.48 li
584.78 124.697 li
585.708 124.323 li
cp
587.197 128.036 mo
588.314 130.82 li
587.386 131.192 li
586.269 128.408 li
587.197 128.036 li
cp
588.686 131.748 mo
589.803 134.533 li
588.875 134.905 li
587.758 132.12 li
588.686 131.748 li
cp
590.176 135.461 mo
591.293 138.245 li
590.365 138.617 li
589.248 135.833 li
590.176 135.461 li
cp
591.665 139.173 mo
592.782 141.957 li
591.854 142.331 li
590.737 139.546 li
591.665 139.173 li
cp
593.154 142.885 mo
594.272 145.671 li
593.343 146.042 li
592.226 143.258 li
593.154 142.885 li
cp
594.644 146.598 mo
595.761 149.382 li
594.833 149.754 li
593.716 146.97 li
594.644 146.598 li
cp
596.133 150.31 mo
597.25 153.094 li
596.322 153.467 li
595.205 150.682 li
596.133 150.31 li
cp
597.623 154.023 mo
598.74 156.807 li
597.811 157.18 li
596.694 154.395 li
597.623 154.023 li
cp
598.739 158.06 mo
598.111 160.993 li
597.134 160.784 li
597.761 157.852 li
598.739 158.06 li
cp
597.902 161.971 mo
597.275 164.905 li
596.297 164.697 li
596.924 161.762 li
597.902 161.971 li
cp
597.066 165.883 mo
596.438 168.816 li
595.46 168.607 li
596.088 165.674 li
597.066 165.883 li
cp
596.229 169.794 mo
595.602 172.728 li
594.624 172.52 li
595.251 169.585 li
596.229 169.794 li
cp
595.392 173.706 mo
594.765 176.639 li
593.787 176.43 li
594.414 173.497 li
595.392 173.706 li
cp
594.556 177.617 mo
593.928 180.551 li
592.95 180.342 li
593.578 177.408 li
594.556 177.617 li
cp
593.719 181.529 mo
593.092 184.464 li
592.114 184.253 li
592.741 181.32 li
593.719 181.529 li
cp
592.882 185.44 mo
592.255 188.374 li
591.277 188.165 li
591.905 185.231 li
592.882 185.44 li
cp
592.046 189.352 mo
591.418 192.286 li
590.441 192.076 li
591.068 189.143 li
592.046 189.352 li
cp
591.209 193.263 mo
590.582 196.197 li
589.604 195.988 li
590.231 193.055 li
591.209 193.263 li
cp
590.373 197.175 mo
589.745 200.109 li
588.767 199.9 li
589.395 196.966 li
590.373 197.175 li
cp
589.536 201.087 mo
588.908 204.02 li
587.931 203.811 li
588.558 200.877 li
589.536 201.087 li
cp
588.699 204.998 mo
588.072 207.932 li
587.094 207.723 li
587.721 204.789 li
588.699 204.998 li
cp
587.863 208.91 mo
587.235 211.843 li
586.257 211.634 li
586.885 208.701 li
587.863 208.91 li
cp
587.026 212.821 mo
586.399 215.755 li
585.421 215.546 li
586.048 212.612 li
587.026 212.821 li
cp
586.189 216.733 mo
585.562 219.666 li
584.584 219.457 li
585.212 216.523 li
586.189 216.733 li
cp
585.353 220.645 mo
584.725 223.578 li
583.747 223.369 li
584.375 220.436 li
585.353 220.645 li
cp
584.516 224.556 mo
583.889 227.49 li
582.911 227.28 li
583.538 224.347 li
584.516 224.556 li
cp
583.68 228.467 mo
583.052 231.401 li
582.074 231.192 li
582.702 228.258 li
583.68 228.467 li
cp
582.843 232.38 mo
582.215 235.313 li
581.238 235.104 li
581.865 232.171 li
582.843 232.38 li
cp
582.006 236.29 mo
581.547 238.436 li
579.933 238.438 li
579.933 237.438 li
581.143 237.436 li
580.654 237.831 li
581.028 236.081 li
582.006 236.29 li
cp
578.933 238.438 mo
575.933 238.44 li
575.933 237.44 li
578.933 237.438 li
578.933 238.438 li
cp
574.933 238.441 mo
571.933 238.443 li
571.933 237.443 li
574.933 237.441 li
574.933 238.441 li
cp
570.933 238.444 mo
567.933 238.446 li
567.933 237.446 li
570.933 237.444 li
570.933 238.444 li
cp
566.933 238.447 mo
563.933 238.449 li
563.933 237.449 li
566.933 237.447 li
566.933 238.447 li
cp
562.933 238.451 mo
559.933 238.452 li
559.933 237.452 li
562.933 237.451 li
562.933 238.451 li
cp
558.933 238.453 mo
555.933 238.455 li
555.933 237.455 li
558.933 237.453 li
558.933 238.453 li
cp
554.933 238.456 mo
551.933 238.458 li
551.933 237.458 li
554.933 237.456 li
554.933 238.456 li
cp
550.933 238.459 mo
547.933 238.461 li
547.933 237.461 li
550.933 237.459 li
550.933 238.459 li
cp
546.933 238.462 mo
543.933 238.464 li
543.933 237.464 li
546.933 237.462 li
546.933 238.462 li
cp
542.933 238.465 mo
539.933 238.467 li
539.933 237.467 li
542.933 237.465 li
542.933 238.465 li
cp
538.933 238.468 mo
535.933 238.47 li
535.933 237.47 li
538.933 237.468 li
538.933 238.468 li
cp
534.933 238.471 mo
531.933 238.473 li
531.933 237.473 li
534.933 237.471 li
534.933 238.471 li
cp
530.933 238.474 mo
527.933 238.477 li
527.933 237.477 li
530.933 237.474 li
530.933 238.474 li
cp
526.933 238.477 mo
523.933 238.479 li
523.933 237.479 li
526.933 237.477 li
526.933 238.477 li
cp
522.933 238.48 mo
519.933 238.482 li
519.933 237.482 li
522.933 237.48 li
522.933 238.48 li
cp
518.933 238.483 mo
515.933 238.485 li
515.933 237.485 li
518.933 237.483 li
518.933 238.483 li
cp
514.933 238.486 mo
514.393 238.486 li
514.393 235.026 li
515.393 235.026 li
515.393 237.986 li
514.893 237.486 li
515.393 237.486 li
514.933 237.486 li
514.933 238.486 li
cp
514.393 234.026 mo
515.393 234.026 mo
514.393 234.026 li
514.393 231.026 li
515.393 231.026 li
cp
514.393 234.026 mo
cp
514.393 230.026 mo
515.393 230.026 mo
514.393 230.026 li
514.393 227.026 li
515.393 227.026 li
cp
514.393 230.026 mo
cp
514.393 226.026 mo
515.393 226.026 mo
514.393 226.026 li
514.393 223.026 li
515.393 223.026 li
cp
514.393 226.026 mo
cp
514.393 222.026 mo
515.393 222.026 mo
514.393 222.026 li
514.393 219.026 li
515.393 219.026 li
cp
514.393 222.026 mo
cp
514.393 218.026 mo
515.393 218.026 mo
514.393 218.026 li
514.393 215.026 li
515.393 215.026 li
cp
514.393 218.026 mo
cp
514.393 214.026 mo
515.393 214.026 mo
514.393 214.026 li
514.393 211.026 li
515.393 211.026 li
cp
514.393 214.026 mo
cp
514.393 210.026 mo
515.393 210.026 mo
514.393 210.026 li
514.393 207.026 li
515.393 207.026 li
cp
514.393 210.026 mo
cp
514.393 206.026 mo
515.393 206.026 mo
514.393 206.026 li
514.393 203.026 li
515.393 203.026 li
cp
514.393 206.026 mo
cp
514.393 202.026 mo
515.393 202.026 mo
514.393 202.026 li
514.393 199.026 li
515.393 199.026 li
cp
514.393 202.026 mo
cp
514.393 198.026 mo
515.393 198.026 mo
514.393 198.026 li
514.393 195.026 li
515.393 195.026 li
cp
514.393 198.026 mo
cp
514.393 194.026 mo
515.393 194.026 mo
514.393 194.026 li
514.393 191.026 li
515.393 191.026 li
cp
514.393 194.026 mo
cp
514.393 190.026 mo
515.393 190.026 mo
514.393 190.026 li
514.393 187.026 li
515.393 187.026 li
cp
514.393 190.026 mo
cp
514.393 186.026 mo
515.393 186.026 mo
514.393 186.026 li
514.393 183.026 li
515.393 183.026 li
cp
514.393 186.026 mo
cp
514.393 182.026 mo
515.393 182.026 mo
514.393 182.026 li
514.393 179.026 li
515.393 179.026 li
cp
514.393 182.026 mo
cp
514.393 178.026 mo
515.393 178.026 mo
514.393 178.026 li
514.393 175.026 li
515.393 175.026 li
cp
514.393 178.026 mo
cp
514.393 174.026 mo
515.393 174.026 mo
514.393 174.026 li
514.393 171.026 li
515.393 171.026 li
cp
514.393 174.026 mo
cp
514.393 170.026 mo
515.393 170.026 mo
514.393 170.026 li
514.393 167.026 li
515.393 167.026 li
cp
514.393 170.026 mo
cp
514.393 166.026 mo
515.393 166.026 mo
514.393 166.026 li
514.393 163.026 li
515.393 163.026 li
cp
514.393 166.026 mo
cp
514.393 162.026 mo
515.393 162.026 mo
514.393 162.026 li
514.393 159.026 li
515.393 159.026 li
cp
514.393 162.026 mo
cp
514.393 158.026 mo
515.393 158.026 mo
514.393 158.026 li
514.393 155.026 li
515.393 155.026 li
cp
514.393 158.026 mo
cp
514.393 154.026 mo
515.393 154.026 mo
514.393 154.026 li
514.393 151.026 li
515.393 151.026 li
cp
514.393 154.026 mo
cp
514.393 150.026 mo
515.393 150.026 mo
514.393 150.026 li
514.393 147.026 li
515.393 147.026 li
cp
514.393 150.026 mo
cp
514.393 146.026 mo
515.393 146.026 mo
514.393 146.026 li
514.393 143.026 li
515.393 143.026 li
cp
514.393 146.026 mo
cp
514.393 142.026 mo
515.393 142.026 mo
514.393 142.026 li
514.393 139.026 li
515.393 139.026 li
cp
514.393 142.026 mo
cp
514.393 138.026 mo
515.393 138.026 mo
514.393 138.026 li
514.393 135.026 li
515.393 135.026 li
cp
514.393 138.026 mo
cp
514.393 134.026 mo
515.393 134.026 mo
514.393 134.026 li
514.393 131.026 li
515.393 131.026 li
cp
514.393 134.026 mo
cp
514.393 130.026 mo
515.393 130.026 mo
514.393 130.026 li
514.393 127.026 li
515.393 127.026 li
cp
514.393 130.026 mo
cp
514.393 126.026 mo
515.393 126.026 mo
514.393 126.026 li
514.393 123.026 li
515.393 123.026 li
cp
514.393 126.026 mo
cp
514.393 122.026 mo
515.393 122.026 mo
514.393 122.026 li
514.393 119.026 li
515.393 119.026 li
cp
514.393 122.026 mo
cp
514.393 118.026 mo
515.393 118.026 mo
514.393 118.026 li
514.393 115.026 li
515.393 115.026 li
cp
514.393 118.026 mo
cp
514.393 114.026 mo
515.393 114.026 mo
514.393 114.026 li
514.393 111.026 li
515.393 111.026 li
cp
514.393 114.026 mo
cp
514.393 110.026 mo
515.393 110.026 mo
514.393 110.026 li
514.393 107.026 li
515.393 107.026 li
cp
514.393 110.026 mo
cp
514.393 106.026 mo
515.393 106.026 mo
514.393 106.026 li
514.393 103.026 li
515.393 103.026 li
cp
514.393 106.026 mo
cp
514.393 102.026 mo
515.393 102.026 mo
514.393 102.026 li
514.393 99.0265 li
515.393 99.0265 li
cp
514.393 102.026 mo
cp
514.393 98.0265 mo
515.393 98.0265 mo
514.393 98.0265 li
514.393 95.0265 li
515.393 95.0265 li
cp
514.393 98.0265 mo
cp
514.393 94.0265 mo
515.393 94.0265 mo
514.393 94.0265 li
514.393 91.0265 li
515.393 91.0265 li
cp
514.393 94.0265 mo
cp
514.393 90.0265 mo
515.393 90.0265 mo
514.393 90.0265 li
514.393 87.0265 li
515.393 87.0265 li
cp
514.393 90.0265 mo
cp
514.393 86.0265 mo
515.393 86.0265 mo
514.393 86.0265 li
514.393 83.0265 li
515.393 83.0265 li
cp
514.393 86.0265 mo
cp
514.393 82.0265 mo
515.393 82.0265 mo
514.393 82.0265 li
514.393 79.0265 li
515.393 79.0265 li
cp
514.393 82.0265 mo
cp
514.393 78.0265 mo
515.393 78.0265 mo
514.393 78.0265 li
514.393 75.0261 li
515.393 75.0261 li
cp
514.393 78.0265 mo
cp
514.393 74.0265 mo
514.393 72.0365 li
516.403 72.0365 li
516.403 73.0365 li
514.893 73.0365 li
515.393 72.5365 li
515.393 74.0265 li
514.393 74.0265 li
cp
517.403 72.0365 mo
517.403 72.0365 mo
520.403 72.0365 li
520.403 73.0365 li
517.403 73.0365 li
cp
521.403 72.0365 mo
521.403 72.0365 mo
524.403 72.0365 li
524.403 73.0365 li
521.403 73.0365 li
cp
525.403 72.0365 mo
525.403 72.0365 mo
528.403 72.0365 li
528.403 73.0365 li
525.403 73.0365 li
cp
529.403 72.0365 mo
529.403 72.0365 mo
532.403 72.0365 li
532.403 73.0365 li
529.403 73.0365 li
cp
533.403 72.0365 mo
533.403 72.0365 mo
536.403 72.0365 li
536.403 73.0365 li
533.403 73.0365 li
cp
537.403 72.0365 mo
537.403 72.0365 mo
540.403 72.0365 li
540.403 73.0365 li
537.403 73.0365 li
cp
541.403 72.0365 mo
541.403 72.0365 mo
544.403 72.0365 li
544.403 73.0365 li
541.403 73.0365 li
cp
545.403 72.0365 mo
545.403 72.0365 mo
548.403 72.0365 li
548.403 73.0365 li
545.403 73.0365 li
cp
549.403 72.0365 mo
549.403 72.0365 mo
552.403 72.0365 li
552.403 73.0365 li
549.403 73.0365 li
cp
553.403 72.0365 mo
553.403 72.0365 mo
556.403 72.0365 li
556.403 73.0365 li
553.403 73.0365 li
cp
557.403 72.0365 mo
557.403 72.0365 mo
560.403 72.0365 li
560.403 73.0365 li
557.403 73.0365 li
cp
561.403 72.0365 mo
564.393 72.0365 li
564.393 73.0365 li
561.403 73.0365 li
561.403 72.0365 li
.80038 .47193 .046113 0 cmyk
f
514.593 72.2865 mo
726.493 72.2865 li
726.493 238.286 li
514.593 238.286 li
cp
726.493 72.2865 mo
cp
514.893 72.8865 mo
515.193 72.5865 li
515.193 237.986 li
514.893 237.686 li
726.193 237.686 li
725.893 237.986 li
725.893 72.5865 li
726.193 72.8865 li
514.893 72.8865 li
f
13.5331 237.936 mo
224.853 237.936 li
224.853 72.4565 li
13.5331 72.4565 li
cp
.15213 .042969 .009674 0 cmyk
f
13.1931 72.1865 mo
225.093 72.1865 li
225.093 238.187 li
13.1931 238.187 li
cp
225.093 72.1865 mo
cp
13.4941 72.7865 mo
13.7941 72.4865 li
13.7941 237.887 li
13.4941 237.587 li
224.793 237.587 li
224.493 237.887 li
224.493 72.4865 li
224.793 72.7865 li
13.4941 72.7865 li
.80038 .47193 .046113 0 cmyk
f
187.413 72.4565 mo
96.5731 156.336 li
63.0931 72.4565 li
187.413 72.4565 li
.14533 0 .19532 0 cmyk
ef
63.0431 71.9865 mo
66.0426 71.9865 li
66.0426 72.9865 li
63.0431 72.9865 li
cp
67.0431 71.9865 mo
67.0431 71.9865 mo
70.0431 71.9865 li
70.0431 72.9865 li
67.0431 72.9865 li
cp
71.0431 71.9865 mo
71.0431 71.9865 mo
74.0431 71.9865 li
74.0431 72.9865 li
71.0431 72.9865 li
cp
75.0431 71.9865 mo
75.0431 71.9865 mo
78.0431 71.9865 li
78.0431 72.9865 li
75.0431 72.9865 li
cp
79.0431 71.9865 mo
79.0431 71.9865 mo
82.0431 71.9865 li
82.0431 72.9865 li
79.0431 72.9865 li
cp
83.0431 71.9865 mo
83.0431 71.9865 mo
86.0431 71.9865 li
86.0431 72.9865 li
83.0431 72.9865 li
cp
87.0431 71.9865 mo
87.0431 71.9865 mo
90.0431 71.9865 li
90.0431 72.9865 li
87.0431 72.9865 li
cp
91.0431 71.9865 mo
91.0431 71.9865 mo
94.0431 71.9865 li
94.0431 72.9865 li
91.0431 72.9865 li
cp
95.0431 71.9865 mo
95.0431 71.9865 mo
98.0431 71.9865 li
98.0431 72.9865 li
95.0431 72.9865 li
cp
99.0431 71.9865 mo
99.0431 71.9865 mo
102.043 71.9865 li
102.043 72.9865 li
99.0431 72.9865 li
cp
103.043 71.9865 mo
103.043 71.9865 mo
106.043 71.9865 li
106.043 72.9865 li
103.043 72.9865 li
cp
107.043 71.9865 mo
107.043 71.9865 mo
110.043 71.9865 li
110.043 72.9865 li
107.043 72.9865 li
cp
111.043 71.9865 mo
111.043 71.9865 mo
114.043 71.9865 li
114.043 72.9865 li
111.043 72.9865 li
cp
115.043 71.9865 mo
115.043 71.9865 mo
118.043 71.9865 li
118.043 72.9865 li
115.043 72.9865 li
cp
119.043 71.9865 mo
119.043 71.9865 mo
122.043 71.9865 li
122.043 72.9865 li
119.043 72.9865 li
cp
123.043 71.9865 mo
123.043 71.9865 mo
126.043 71.9865 li
126.043 72.9865 li
123.043 72.9865 li
cp
127.043 71.9865 mo
127.043 71.9865 mo
130.043 71.9865 li
130.043 72.9865 li
127.043 72.9865 li
cp
131.043 71.9865 mo
131.043 71.9865 mo
134.043 71.9865 li
134.043 72.9865 li
131.043 72.9865 li
cp
135.043 71.9865 mo
135.043 71.9865 mo
138.043 71.9865 li
138.043 72.9865 li
135.043 72.9865 li
cp
139.043 71.9865 mo
139.043 71.9865 mo
142.043 71.9865 li
142.043 72.9865 li
139.043 72.9865 li
cp
143.043 71.9865 mo
143.043 71.9865 mo
146.043 71.9865 li
146.043 72.9865 li
143.043 72.9865 li
cp
147.043 71.9865 mo
147.043 71.9865 mo
150.043 71.9865 li
150.043 72.9865 li
147.043 72.9865 li
cp
151.043 71.9865 mo
151.043 71.9865 mo
154.043 71.9865 li
154.043 72.9865 li
151.043 72.9865 li
cp
155.043 71.9865 mo
155.043 71.9865 mo
158.043 71.9865 li
158.043 72.9865 li
155.043 72.9865 li
cp
159.043 71.9865 mo
159.043 71.9865 mo
162.043 71.9865 li
162.043 72.9865 li
159.043 72.9865 li
cp
163.043 71.9865 mo
163.043 71.9865 mo
166.043 71.9865 li
166.043 72.9865 li
163.043 72.9865 li
cp
167.043 71.9865 mo
167.043 71.9865 mo
170.043 71.9865 li
170.043 72.9865 li
167.043 72.9865 li
cp
171.043 71.9865 mo
171.043 71.9865 mo
174.043 71.9865 li
174.043 72.9865 li
171.043 72.9865 li
cp
175.043 71.9865 mo
175.043 71.9865 mo
178.043 71.9865 li
178.043 72.9865 li
175.043 72.9865 li
cp
179.043 71.9865 mo
179.043 71.9865 mo
182.043 71.9865 li
182.043 72.9865 li
179.043 72.9865 li
cp
183.043 71.9865 mo
183.043 71.9865 mo
186.043 71.9865 li
186.043 72.9865 li
183.043 72.9865 li
cp
187.043 71.9865 mo
188.671 71.9865 li
185.785 74.6515 li
185.107 73.9175 li
187.054 72.1195 li
187.393 72.9865 li
186.115 72.9865 li
187.043 72.9865 li
187.043 71.9865 li
cp
185.051 75.3305 mo
182.847 77.3655 li
182.168 76.6305 li
184.372 74.5955 li
185.051 75.3305 li
cp
182.112 78.0435 mo
179.908 80.0795 li
179.23 79.3445 li
181.434 77.3095 li
182.112 78.0435 li
cp
179.174 80.7575 mo
176.97 82.7935 li
176.291 82.0585 li
178.495 80.0235 li
179.174 80.7575 li
cp
176.235 83.4715 mo
174.031 85.5065 li
173.353 84.7725 li
175.557 82.7365 li
176.235 83.4715 li
cp
173.296 86.1855 mo
171.093 88.2205 li
170.414 87.4865 li
172.618 85.4505 li
173.296 86.1855 li
cp
170.358 88.8995 mo
168.154 90.9345 li
167.475 90.1995 li
169.679 88.1645 li
170.358 88.8995 li
cp
167.419 91.6135 mo
165.215 93.6485 li
164.537 92.9135 li
166.741 90.8785 li
167.419 91.6135 li
cp
164.481 94.3265 mo
162.277 96.3625 li
161.598 95.6275 li
163.802 93.5925 li
164.481 94.3265 li
cp
161.542 97.0405 mo
159.338 99.0765 li
158.66 98.3415 li
160.864 96.3065 li
161.542 97.0405 li
cp
158.604 99.7545 mo
156.4 101.789 li
155.721 101.055 li
157.925 99.0195 li
158.604 99.7545 li
cp
155.665 102.468 mo
153.461 104.503 li
152.783 103.77 li
154.987 101.733 li
155.665 102.468 li
cp
152.726 105.182 mo
150.522 107.217 li
149.844 106.482 li
152.048 104.447 li
152.726 105.182 li
cp
149.788 107.895 mo
147.584 109.931 li
146.905 109.197 li
149.109 107.161 li
149.788 107.895 li
cp
146.849 110.609 mo
144.645 112.645 li
143.967 111.91 li
146.171 109.875 li
146.849 110.609 li
cp
143.911 113.324 mo
141.707 115.358 li
141.028 114.624 li
143.232 112.589 li
143.911 113.324 li
cp
140.972 116.037 mo
138.768 118.072 li
138.09 117.339 li
140.294 115.302 li
140.972 116.037 li
cp
138.034 118.751 mo
135.83 120.786 li
135.151 120.051 li
137.355 118.016 li
138.034 118.751 li
cp
135.095 121.464 mo
132.891 123.5 li
132.213 122.766 li
134.417 120.73 li
135.095 121.464 li
cp
132.156 124.178 mo
129.952 126.214 li
129.274 125.479 li
131.478 123.444 li
132.156 124.178 li
cp
129.218 126.892 mo
127.014 128.927 li
126.335 128.193 li
128.539 126.158 li
129.218 126.892 li
cp
126.279 129.606 mo
124.074 131.641 li
123.397 130.908 li
125.601 128.871 li
126.279 129.606 li
cp
123.341 132.32 mo
121.137 134.355 li
120.458 133.62 li
122.662 131.585 li
123.341 132.32 li
cp
120.402 135.035 mo
118.198 137.069 li
117.52 136.335 li
119.724 134.299 li
120.402 135.035 li
cp
117.464 137.747 mo
115.26 139.783 li
114.581 139.048 li
116.785 137.013 li
117.464 137.747 li
cp
114.525 140.461 mo
112.321 142.496 li
111.643 141.762 li
113.846 139.727 li
114.525 140.461 li
cp
111.586 143.176 mo
109.382 145.21 li
108.704 144.477 li
110.908 142.44 li
111.586 143.176 li
cp
108.648 145.889 mo
106.444 147.924 li
105.765 147.189 li
107.969 145.154 li
108.648 145.889 li
cp
105.709 148.603 mo
103.505 150.638 li
102.827 149.904 li
105.031 147.868 li
105.709 148.603 li
cp
102.771 151.316 mo
100.566 153.352 li
99.8881 152.617 li
102.092 150.582 li
102.771 151.316 li
cp
99.8321 154.03 mo
97.6281 156.066 li
96.9501 155.331 li
99.1541 153.296 li
99.8321 154.03 li
cp
96.8931 156.745 mo
96.3491 157.246 li
94.9711 153.798 li
95.9011 153.427 li
97.0081 156.201 li
96.2051 156.02 li
96.7391 155.526 li
96.2151 156.009 li
96.8931 156.745 li
cp
94.6021 152.87 mo
93.4881 150.083 li
94.4181 149.712 li
95.5301 152.499 li
94.6021 152.87 li
cp
93.1181 149.155 mo
92.0061 146.368 li
92.9341 145.999 li
94.0471 148.784 li
93.1181 149.155 li
cp
91.6351 145.44 mo
90.5221 142.654 li
91.4511 142.283 li
92.5641 145.069 li
91.6351 145.44 li
cp
90.1521 141.725 mo
89.0391 138.939 li
89.9681 138.568 li
91.0801 141.354 li
90.1521 141.725 li
cp
88.6681 138.01 mo
87.5561 135.224 li
88.4851 134.854 li
89.5971 137.639 li
88.6681 138.01 li
cp
87.1851 134.296 mo
86.0721 131.509 li
87.0011 131.138 li
88.1141 133.925 li
87.1851 134.296 li
cp
85.7021 130.581 mo
84.5891 127.794 li
85.5181 127.424 li
86.6301 130.21 li
85.7021 130.581 li
cp
84.2181 126.867 mo
83.1061 124.081 li
84.0351 123.71 li
85.1471 126.495 li
84.2181 126.867 li
cp
82.7351 123.151 mo
81.6231 120.365 li
82.5511 119.994 li
83.6641 122.78 li
82.7351 123.151 li
cp
81.2521 119.436 mo
80.1391 116.65 li
81.0681 116.279 li
82.1801 119.065 li
81.2521 119.436 li
cp
79.7681 115.721 mo
78.6561 112.936 li
79.5851 112.564 li
80.6971 115.352 li
79.7681 115.721 li
cp
78.2851 112.007 mo
77.1731 109.22 li
78.1011 108.85 li
79.2141 111.637 li
78.2851 112.007 li
cp
76.8021 108.292 mo
75.6891 105.507 li
76.6181 105.135 li
77.7301 107.921 li
76.8021 108.292 li
cp
75.3181 104.577 mo
74.2061 101.792 li
75.1351 101.421 li
76.2471 104.206 li
75.3181 104.577 li
cp
73.8351 100.862 mo
72.7231 98.0765 li
73.6511 97.7055 li
74.7641 100.492 li
73.8351 100.862 li
cp
72.3521 97.1475 mo
71.2391 94.3615 li
72.1681 93.9905 li
73.2811 96.7765 li
72.3521 97.1475 li
cp
70.8691 93.4335 mo
69.7561 90.6465 li
70.6851 90.2765 li
71.7971 93.0625 li
70.8691 93.4335 li
cp
69.3851 89.7185 mo
68.2731 86.9325 li
69.2011 86.5615 li
70.3141 89.3475 li
69.3851 89.7185 li
cp
67.9021 86.0035 mo
66.7891 83.2175 li
67.7181 82.8465 li
68.8311 85.6325 li
67.9021 86.0035 li
cp
66.4191 82.2885 mo
65.3061 79.5025 li
66.2351 79.1315 li
67.3471 81.9175 li
66.4191 82.2885 li
cp
64.9351 78.5735 mo
63.8231 75.7875 li
64.7511 75.4165 li
65.8641 78.2025 li
64.9351 78.5735 li
cp
63.4521 74.8595 mo
62.5791 72.6715 li
63.5071 72.3015 li
64.3811 74.4885 li
63.4521 74.8595 li
.80038 .47193 .046113 0 cmyk
f
96.9931 157.236 mo
79.7431 237.887 li
13.4941 237.936 li
13.4941 72.4865 li
62.9941 72.4865 li
96.9931 157.236 li
0 .061555 .24347 0 cmyk
ef
63.4581 72.3005 mo
64.5751 75.0845 li
63.6471 75.4565 li
62.5301 72.6725 li
63.4581 72.3005 li
cp
64.9461 76.0125 mo
66.0631 78.7975 li
65.1351 79.1695 li
64.0191 76.3855 li
64.9461 76.0125 li
cp
66.4371 79.7255 mo
67.5531 82.5095 li
66.6251 82.8815 li
65.5091 80.0975 li
66.4371 79.7255 li
cp
67.9251 83.4375 mo
69.0421 86.2215 li
68.1141 86.5945 li
66.9971 83.8095 li
67.9251 83.4375 li
cp
69.4151 87.1495 mo
70.5311 89.9345 li
69.6041 90.3065 li
68.4871 87.5225 li
69.4151 87.1495 li
cp
70.9051 90.8625 mo
72.0211 93.6465 li
71.0931 94.0185 li
69.9761 91.2345 li
70.9051 90.8625 li
cp
72.3931 94.5745 mo
73.5101 97.3585 li
72.5821 97.7315 li
71.4651 94.9475 li
72.3931 94.5745 li
cp
73.8821 98.2875 mo
75.0001 101.072 li
74.0711 101.444 li
72.9541 98.6595 li
73.8821 98.2875 li
cp
75.3721 102 mo
76.4891 104.784 li
75.5611 105.157 li
74.4451 102.372 li
75.3721 102 li
cp
76.8621 105.712 mo
77.9791 108.497 li
77.0501 108.868 li
75.9331 106.085 li
76.8621 105.712 li
cp
78.3501 109.424 mo
79.4671 112.209 li
78.5401 112.581 li
77.4231 109.797 li
78.3501 109.424 li
cp
79.8411 113.137 mo
80.9581 115.921 li
80.0301 116.294 li
78.9121 113.509 li
79.8411 113.137 li
cp
81.3301 116.85 mo
82.4461 119.634 li
81.5181 120.006 li
80.4021 117.222 li
81.3301 116.85 li
cp
82.8191 120.562 mo
83.9361 123.346 li
83.0071 123.719 li
81.8901 120.934 li
82.8191 120.562 li
cp
84.3081 124.273 mo
85.4251 127.059 li
84.4971 127.431 li
83.3801 124.647 li
84.3081 124.273 li
cp
85.7971 127.987 mo
86.9141 130.771 li
85.9861 131.143 li
84.8691 128.359 li
85.7971 127.987 li
cp
87.2861 131.699 mo
88.4031 134.483 li
87.4751 134.855 li
86.3581 132.071 li
87.2861 131.699 li
cp
88.7761 135.411 mo
89.8931 138.195 li
88.9661 138.568 li
87.8481 135.784 li
88.7761 135.411 li
cp
90.2651 139.124 mo
91.3821 141.908 li
90.4541 142.281 li
89.3371 139.496 li
90.2651 139.124 li
cp
91.7551 142.836 mo
92.8711 145.621 li
91.9431 145.993 li
90.8261 143.208 li
91.7551 142.836 li
cp
93.2441 146.549 mo
94.3621 149.333 li
93.4331 149.704 li
92.3161 146.921 li
93.2441 146.549 li
cp
94.7331 150.26 mo
95.8511 153.045 li
94.9231 153.418 li
93.8061 150.633 li
94.7331 150.26 li
cp
96.2221 153.973 mo
97.3401 156.758 li
96.4111 157.13 li
95.2951 154.346 li
96.2221 153.973 li
cp
97.3401 158.01 mo
96.7111 160.944 li
95.7331 160.734 li
96.3621 157.802 li
97.3401 158.01 li
cp
96.5021 161.922 mo
95.8761 164.855 li
94.8971 164.647 li
95.5241 161.713 li
96.5021 161.922 li
cp
95.6661 165.833 mo
95.0381 168.767 li
94.0611 168.558 li
94.6881 165.625 li
95.6661 165.833 li
cp
94.8291 169.745 mo
94.2011 172.678 li
93.2251 172.47 li
93.8511 169.536 li
94.8291 169.745 li
cp
93.9921 173.657 mo
93.3661 176.59 li
92.3881 176.381 li
93.0151 173.448 li
93.9921 173.657 li
cp
93.1561 177.568 mo
92.5281 180.501 li
91.5501 180.293 li
92.1781 177.359 li
93.1561 177.568 li
cp
92.3191 181.48 mo
91.6921 184.414 li
90.7151 184.204 li
91.3411 181.271 li
92.3191 181.48 li
cp
91.4821 185.391 mo
90.8551 188.325 li
89.8771 188.116 li
90.5051 185.182 li
91.4821 185.391 li
cp
90.6471 189.303 mo
90.0181 192.237 li
89.0411 192.027 li
89.6681 189.094 li
90.6471 189.303 li
cp
89.8101 193.214 mo
89.1821 196.148 li
88.2041 195.939 li
88.8321 193.005 li
89.8101 193.214 li
cp
88.9731 197.126 mo
88.3451 200.06 li
87.3671 199.85 li
87.9951 196.917 li
88.9731 197.126 li
cp
88.1361 201.038 mo
87.5091 203.971 li
86.5311 203.762 li
87.1591 200.827 li
88.1361 201.038 li
cp
87.3001 204.949 mo
86.6731 207.883 li
85.6951 207.674 li
86.3211 204.74 li
87.3001 204.949 li
cp
86.4631 208.861 mo
85.8351 211.794 li
84.8581 211.585 li
85.4851 208.651 li
86.4631 208.861 li
cp
85.6261 212.771 mo
85.0001 215.706 li
84.0211 215.497 li
84.6481 212.563 li
85.6261 212.771 li
cp
84.7901 216.684 mo
84.1621 219.617 li
83.1851 219.408 li
83.8121 216.474 li
84.7901 216.684 li
cp
83.9531 220.595 mo
83.3251 223.529 li
82.3471 223.32 li
82.9751 220.386 li
83.9531 220.595 li
cp
83.1171 224.507 mo
82.4891 227.44 li
81.5111 227.23 li
82.1381 224.298 li
83.1171 224.507 li
cp
82.2801 228.418 mo
81.6521 231.352 li
80.6741 231.143 li
81.3031 228.209 li
82.2801 228.418 li
cp
81.4441 232.33 mo
80.8151 235.263 li
79.8381 235.054 li
80.4651 232.121 li
81.4441 232.33 li
cp
80.6061 236.241 mo
80.1471 238.387 li
78.5341 238.388 li
78.5341 237.388 li
79.7431 237.387 li
79.2551 237.782 li
79.6281 236.032 li
80.6061 236.241 li
cp
77.5341 238.389 mo
74.5341 238.391 li
74.5341 237.391 li
77.5341 237.389 li
77.5341 238.389 li
cp
73.5341 238.392 mo
70.5341 238.394 li
70.5341 237.394 li
73.5341 237.392 li
73.5341 238.392 li
cp
69.5341 238.395 mo
66.5341 238.396 li
66.5341 237.396 li
69.5341 237.395 li
69.5341 238.395 li
cp
65.5341 238.398 mo
62.5341 238.4 li
62.5341 237.4 li
65.5341 237.398 li
65.5341 238.398 li
cp
61.5341 238.401 mo
58.5341 238.403 li
58.5341 237.403 li
61.5341 237.401 li
61.5341 238.401 li
cp
57.5341 238.404 mo
54.5341 238.406 li
54.5341 237.406 li
57.5341 237.404 li
57.5341 238.404 li
cp
53.5341 238.407 mo
50.5341 238.409 li
50.5341 237.409 li
53.5341 237.407 li
53.5341 238.407 li
cp
49.5341 238.41 mo
46.5341 238.411 li
46.5341 237.411 li
49.5341 237.41 li
49.5341 238.41 li
cp
45.5341 238.413 mo
42.5341 238.415 li
42.5341 237.415 li
45.5341 237.413 li
45.5341 238.413 li
cp
41.5341 238.416 mo
38.5341 238.418 li
38.5341 237.418 li
41.5341 237.416 li
41.5341 238.416 li
cp
37.5341 238.419 mo
34.5341 238.421 li
34.5341 237.421 li
37.5341 237.419 li
37.5341 238.419 li
cp
33.5341 238.422 mo
30.5341 238.424 li
30.5341 237.424 li
33.5341 237.422 li
33.5341 238.422 li
cp
29.5341 238.424 mo
26.5341 238.427 li
26.5341 237.427 li
29.5341 237.424 li
29.5341 238.424 li
cp
25.5341 238.428 mo
22.5341 238.43 li
22.5341 237.43 li
25.5341 237.428 li
25.5341 238.428 li
cp
21.5341 238.431 mo
18.5341 238.433 li
18.5341 237.433 li
21.5341 237.431 li
21.5341 238.431 li
cp
17.5341 238.434 mo
14.5341 238.436 li
14.5341 237.436 li
17.5341 237.434 li
17.5341 238.434 li
cp
13.5341 238.437 mo
12.9941 238.437 li
12.9941 234.977 li
13.9941 234.977 li
13.9941 237.937 li
13.4941 237.437 li
13.9941 237.437 li
13.5341 237.437 li
13.5341 238.437 li
cp
12.9941 233.977 mo
13.9941 233.977 mo
12.9941 233.977 li
12.9941 230.977 li
13.9941 230.977 li
cp
12.9941 233.977 mo
cp
12.9941 229.977 mo
13.9941 229.977 mo
12.9941 229.977 li
12.9941 226.977 li
13.9941 226.977 li
cp
12.9941 229.977 mo
cp
12.9941 225.977 mo
13.9941 225.977 mo
12.9941 225.977 li
12.9941 222.977 li
13.9941 222.977 li
cp
12.9941 225.977 mo
cp
12.9941 221.977 mo
13.9941 221.977 mo
12.9941 221.977 li
12.9941 218.977 li
13.9941 218.977 li
cp
12.9941 221.977 mo
cp
12.9941 217.977 mo
13.9941 217.977 mo
12.9941 217.977 li
12.9941 214.977 li
13.9941 214.977 li
cp
12.9941 217.977 mo
cp
12.9941 213.977 mo
13.9941 213.977 mo
12.9941 213.977 li
12.9941 210.977 li
13.9941 210.977 li
cp
12.9941 213.977 mo
cp
12.9941 209.977 mo
13.9941 209.977 mo
12.9941 209.977 li
12.9941 206.977 li
13.9941 206.977 li
cp
12.9941 209.977 mo
cp
12.9941 205.977 mo
13.9941 205.977 mo
12.9941 205.977 li
12.9941 202.977 li
13.9941 202.977 li
cp
12.9941 205.977 mo
cp
12.9941 201.977 mo
13.9941 201.977 mo
12.9941 201.977 li
12.9941 198.977 li
13.9941 198.977 li
cp
12.9941 201.977 mo
cp
12.9941 197.977 mo
13.9941 197.977 mo
12.9941 197.977 li
12.9941 194.977 li
13.9941 194.977 li
cp
12.9941 197.977 mo
cp
12.9941 193.977 mo
13.9941 193.977 mo
12.9941 193.977 li
12.9941 190.977 li
13.9941 190.977 li
cp
12.9941 193.977 mo
cp
12.9941 189.977 mo
13.9941 189.977 mo
12.9941 189.977 li
12.9941 186.977 li
13.9941 186.977 li
cp
12.9941 189.977 mo
cp
12.9941 185.977 mo
13.9941 185.977 mo
12.9941 185.977 li
12.9941 182.977 li
13.9941 182.977 li
cp
12.9941 185.977 mo
cp
12.9941 181.977 mo
13.9941 181.977 mo
12.9941 181.977 li
12.9941 178.977 li
13.9941 178.977 li
cp
12.9941 181.977 mo
cp
12.9941 177.977 mo
13.9941 177.977 mo
12.9941 177.977 li
12.9941 174.977 li
13.9941 174.977 li
cp
12.9941 177.977 mo
cp
12.9941 173.977 mo
13.9941 173.977 mo
12.9941 173.977 li
12.9941 170.977 li
13.9941 170.977 li
cp
12.9941 173.977 mo
cp
12.9941 169.977 mo
13.9941 169.977 mo
12.9941 169.977 li
12.9941 166.977 li
13.9941 166.977 li
cp
12.9941 169.977 mo
cp
12.9941 165.977 mo
13.9941 165.977 mo
12.9941 165.977 li
12.9941 162.977 li
13.9941 162.977 li
cp
12.9941 165.977 mo
cp
12.9941 161.977 mo
13.9941 161.977 mo
12.9941 161.977 li
12.9941 158.977 li
13.9941 158.977 li
cp
12.9941 161.977 mo
cp
12.9941 157.977 mo
13.9941 157.977 mo
12.9941 157.977 li
12.9941 154.977 li
13.9941 154.977 li
cp
12.9941 157.977 mo
cp
12.9941 153.977 mo
13.9941 153.977 mo
12.9941 153.977 li
12.9941 150.977 li
13.9941 150.977 li
cp
12.9941 153.977 mo
cp
12.9941 149.977 mo
13.9941 149.977 mo
12.9941 149.977 li
12.9941 146.977 li
13.9941 146.977 li
cp
12.9941 149.977 mo
cp
12.9941 145.977 mo
13.9941 145.977 mo
12.9941 145.977 li
12.9941 142.977 li
13.9941 142.977 li
cp
12.9941 145.977 mo
cp
12.9941 141.977 mo
13.9941 141.977 mo
12.9941 141.977 li
12.9941 138.977 li
13.9941 138.977 li
cp
12.9941 141.977 mo
cp
12.9941 137.977 mo
13.9941 137.977 mo
12.9941 137.977 li
12.9941 134.977 li
13.9941 134.977 li
cp
12.9941 137.977 mo
cp
12.9941 133.977 mo
13.9941 133.977 mo
12.9941 133.977 li
12.9941 130.977 li
13.9941 130.977 li
cp
12.9941 133.977 mo
cp
12.9941 129.977 mo
13.9941 129.977 mo
12.9941 129.977 li
12.9941 126.977 li
13.9941 126.977 li
cp
12.9941 129.977 mo
cp
12.9941 125.977 mo
13.9941 125.977 mo
12.9941 125.977 li
12.9941 122.977 li
13.9941 122.977 li
cp
12.9941 125.977 mo
cp
12.9941 121.977 mo
13.9941 121.977 mo
12.9941 121.977 li
12.9941 118.977 li
13.9941 118.977 li
cp
12.9941 121.977 mo
cp
12.9941 117.977 mo
13.9941 117.977 mo
12.9941 117.977 li
12.9941 114.977 li
13.9941 114.977 li
cp
12.9941 117.977 mo
cp
12.9941 113.977 mo
13.9941 113.977 mo
12.9941 113.977 li
12.9941 110.977 li
13.9941 110.977 li
cp
12.9941 113.977 mo
cp
12.9941 109.977 mo
13.9941 109.977 mo
12.9941 109.977 li
12.9941 106.977 li
13.9941 106.977 li
cp
12.9941 109.977 mo
cp
12.9941 105.977 mo
13.9941 105.977 mo
12.9941 105.977 li
12.9941 102.977 li
13.9941 102.977 li
cp
12.9941 105.977 mo
cp
12.9941 101.977 mo
13.9941 101.977 mo
12.9941 101.977 li
12.9941 98.9765 li
13.9941 98.9765 li
cp
12.9941 101.977 mo
cp
12.9941 97.9765 mo
13.9941 97.9765 mo
12.9941 97.9765 li
12.9941 94.9765 li
13.9941 94.9765 li
cp
12.9941 97.9765 mo
cp
12.9941 93.9765 mo
13.9941 93.9765 mo
12.9941 93.9765 li
12.9941 90.9765 li
13.9941 90.9765 li
cp
12.9941 93.9765 mo
cp
12.9941 89.9765 mo
13.9941 89.9765 mo
12.9941 89.9765 li
12.9941 86.9765 li
13.9941 86.9765 li
cp
12.9941 89.9765 mo
cp
12.9941 85.9765 mo
13.9941 85.9765 mo
12.9941 85.9765 li
12.9941 82.9765 li
13.9941 82.9765 li
cp
12.9941 85.9765 mo
cp
12.9941 81.9765 mo
13.9941 81.9765 mo
12.9941 81.9765 li
12.9941 78.9765 li
13.9941 78.9765 li
cp
12.9941 81.9765 mo
cp
12.9941 77.9765 mo
13.9941 77.9765 mo
12.9941 77.9765 li
12.9941 74.9761 li
13.9941 74.9761 li
cp
12.9941 77.9765 mo
cp
12.9941 73.9765 mo
12.9941 71.9865 li
15.0041 71.9865 li
15.0041 72.9865 li
13.4941 72.9865 li
13.9941 72.4865 li
13.9941 73.9765 li
12.9941 73.9765 li
cp
16.0041 71.9865 mo
16.0041 71.9865 mo
19.0041 71.9865 li
19.0041 72.9865 li
16.0041 72.9865 li
cp
20.0041 71.9865 mo
20.0041 71.9865 mo
23.0041 71.9865 li
23.0041 72.9865 li
20.0041 72.9865 li
cp
24.0041 71.9865 mo
24.0041 71.9865 mo
27.0041 71.9865 li
27.0041 72.9865 li
24.0041 72.9865 li
cp
28.0041 71.9865 mo
28.0041 71.9865 mo
31.0041 71.9865 li
31.0041 72.9865 li
28.0041 72.9865 li
cp
32.0041 71.9865 mo
32.0041 71.9865 mo
35.0041 71.9865 li
35.0041 72.9865 li
32.0041 72.9865 li
cp
36.0041 71.9865 mo
36.0041 71.9865 mo
39.0041 71.9865 li
39.0041 72.9865 li
36.0041 72.9865 li
cp
40.0041 71.9865 mo
40.0041 71.9865 mo
43.0041 71.9865 li
43.0041 72.9865 li
40.0041 72.9865 li
cp
44.0041 71.9865 mo
44.0041 71.9865 mo
47.0041 71.9865 li
47.0041 72.9865 li
44.0041 72.9865 li
cp
48.0041 71.9865 mo
48.0041 71.9865 mo
51.0041 71.9865 li
51.0041 72.9865 li
48.0041 72.9865 li
cp
52.0041 71.9865 mo
52.0041 71.9865 mo
55.004 71.9865 li
55.004 72.9865 li
52.0041 72.9865 li
cp
56.0041 71.9865 mo
56.0041 71.9865 mo
59.0041 71.9865 li
59.0041 72.9865 li
56.0041 72.9865 li
cp
60.0041 71.9865 mo
62.9941 71.9865 li
62.9941 72.9865 li
60.0041 72.9865 li
60.0041 71.9865 li
.80038 .47193 .046113 0 cmyk
f
13.1931 72.2365 mo
225.093 72.2365 li
225.093 238.236 li
13.1931 238.236 li
cp
225.093 72.2365 mo
cp
13.4941 72.8365 mo
13.7941 72.5365 li
13.7941 237.936 li
13.4941 237.636 li
224.793 237.636 li
224.493 237.936 li
224.493 72.5365 li
224.793 72.8365 li
13.4941 72.8365 li
f
264.813 237.577 mo
476.133 237.577 li
476.133 72.0965 li
264.813 72.0965 li
cp
.15213 .042969 .009674 0 cmyk
f
264.543 71.8365 mo
476.443 71.8365 li
476.443 237.837 li
264.543 237.837 li
cp
476.443 71.8365 mo
cp
264.843 72.4365 mo
265.143 72.1365 li
265.143 237.536 li
264.843 237.236 li
476.143 237.236 li
475.843 237.536 li
475.843 72.1365 li
476.143 72.4365 li
264.843 72.4365 li
.80038 .47193 .046113 0 cmyk
f
475.543 72.1365 mo
476.143 138.937 li
347.243 155.937 li
344.843 72.7365 li
475.543 72.1365 li
.14533 0 .19532 0 cmyk
ef
476.647 139.374 mo
346.759 156.505 li
344.328 72.2385 li
476.039 71.6345 li
476.647 139.374 li
cp
475.043 72.1405 mo
475.545 72.6365 li
344.845 73.2365 li
345.343 72.7225 li
347.743 155.923 li
347.178 155.44 li
476.078 138.44 li
475.643 138.94 li
475.043 72.1405 li
.77972 .51687 .23331 0 cmyk
f
347.693 155.637 mo
264.193 204.587 li
264.793 161.387 li
264.193 72.5865 li
345.393 72.1365 li
347.693 155.637 li
0 .061555 .24347 0 cmyk
ef
263.681 205.466 mo
264.293 161.38 li
264.293 161.389 li
263.69 72.0895 li
345.879 71.6335 li
348.201 155.919 li
263.681 205.466 li
cp
347.44 155.206 mo
347.193 155.65 li
344.893 72.1505 li
345.396 72.6365 li
264.196 73.0865 li
264.693 72.5835 li
265.293 161.389 li
264.693 204.594 li
263.94 204.156 li
347.44 155.206 li
.77972 .51687 .23331 0 cmyk
f
264.543 71.8365 mo
476.443 71.8365 li
476.443 237.837 li
264.543 237.837 li
cp
476.443 71.8365 mo
cp
264.843 72.4365 mo
265.143 72.1365 li
265.143 237.536 li
264.843 237.236 li
476.143 237.236 li
475.843 237.536 li
475.843 72.1365 li
476.143 72.4365 li
264.843 72.4365 li
.80038 .47193 .046113 0 cmyk
f
598.645 157.719 mo
725.745 83.5185 li
725.241 82.6545 li
598.141 156.855 li
598.645 157.719 li
.64495 .27805 0 0 cmyk
f
546.613 238.159 mo
599.212 157.059 li
598.373 156.514 li
545.774 237.615 li
546.613 238.159 li
f
597.152 158.029 mo
581.052 72.7795 li
582.034 72.5935 li
598.134 157.843 li
597.152 158.029 li
f
88.8931 86.2565 mo
92.2531 80.2565 li
95.4931 86.2565 li
88.8931 86.2565 li
.7518 0 .87069 0 cmyk
ef
92.2431 79.2485 mo
96.3891 86.7865 li
88.0971 86.7865 li
92.2431 79.2485 li
cp
89.3811 86.5275 mo
88.9431 85.7865 li
95.5431 85.7865 li
95.1051 86.5275 li
91.8051 80.5275 li
92.6811 80.5275 li
89.3811 86.5275 li
f
158.853 122.137 mo
162.213 116.137 li
165.453 122.137 li
158.853 122.137 li
.57174 .48158 .45197 0 cmyk
ef
162.193 115.098 mo
166.339 122.636 li
158.047 122.636 li
162.193 115.098 li
cp
159.331 122.378 mo
158.893 121.636 li
165.493 121.636 li
165.055 122.378 li
161.755 116.378 li
162.631 116.378 li
159.331 122.378 li
f
102.453 116.137 mo
105.693 110.137 li
109.053 116.137 li
102.453 116.137 li
.7518 0 .87069 0 cmyk
ef
105.693 109.098 mo
109.839 116.636 li
101.547 116.636 li
105.693 109.098 li
cp
102.831 116.378 mo
102.393 115.636 li
108.993 115.636 li
108.555 116.378 li
105.255 110.378 li
106.131 110.378 li
102.831 116.378 li
f
115.893 118.297 mo
119.133 112.297 li
122.493 118.297 li
115.893 118.297 li
ef
119.143 111.299 mo
123.289 118.837 li
114.997 118.837 li
119.143 111.299 li
cp
116.281 118.578 mo
115.843 117.837 li
122.443 117.837 li
122.005 118.578 li
118.705 112.578 li
119.581 112.578 li
116.281 118.578 li
f
98.4931 134.736 mo
101.733 128.736 li
105.093 134.736 li
98.4931 134.736 li
ef
101.743 127.749 mo
105.889 135.286 li
97.5971 135.286 li
101.743 127.749 li
cp
98.8811 135.028 mo
98.4431 134.286 li
105.043 134.286 li
104.605 135.028 li
101.305 129.028 li
102.181 129.028 li
98.8811 135.028 li
f
109.293 100.297 mo
112.533 94.2965 li
115.893 100.297 li
109.293 100.297 li
ef
112.543 93.2985 mo
116.689 100.837 li
108.397 100.837 li
112.543 93.2985 li
cp
109.681 100.578 mo
109.243 99.8365 li
115.843 99.8365 li
115.405 100.578 li
112.105 94.5775 li
112.981 94.5775 li
109.681 100.578 li
f
139.893 100.297 mo
143.133 94.2965 li
146.493 100.297 li
139.893 100.297 li
ef
143.143 93.2985 mo
147.289 100.837 li
138.997 100.837 li
143.143 93.2985 li
cp
140.281 100.578 mo
139.843 99.8365 li
146.443 99.8365 li
146.005 100.578 li
142.705 94.5775 li
143.581 94.5775 li
140.281 100.578 li
f
131.373 88.2965 mo
134.613 82.2965 li
137.973 88.2965 li
131.373 88.2965 li
ef
134.643 81.2985 mo
138.789 88.8365 li
130.497 88.8365 li
134.643 81.2985 li
cp
131.781 88.5775 mo
131.343 87.8365 li
137.943 87.8365 li
137.505 88.5775 li
134.205 82.5775 li
135.081 82.5775 li
131.781 88.5775 li
f
102.693 88.2965 mo
105.933 82.2965 li
109.293 88.2965 li
102.693 88.2965 li
ef
105.943 81.2985 mo
110.089 88.8365 li
101.797 88.8365 li
105.943 81.2985 li
cp
103.081 88.5775 mo
102.643 87.8365 li
109.243 87.8365 li
108.805 88.5775 li
105.505 82.5775 li
106.381 82.5775 li
103.081 88.5775 li
f
100.293 186.936 mo
100.243 184.949 101.776 183.337 103.668 183.337 cv
105.56 183.337 107.093 184.949 107.093 186.936 cv
107.093 188.924 105.56 190.536 103.668 190.536 cv
101.776 190.536 100.243 188.924 100.293 186.936 cv
.64495 .27805 0 0 cmyk
ef
99.7621 186.521 mo
99.8211 186.116 li
99.9171 185.725 li
101.41 181.227 107.478 182.27 107.594 186.936 cv
107.574 187.353 li
107.515 187.758 li
106.469 192.354 100.348 192.005 99.7621 187.353 cv
99.7421 186.936 li
99.7621 186.521 li
cp
100.742 186.961 mo
100.742 186.913 li
100.76 187.281 li
100.755 187.232 li
100.807 187.59 li
100.798 187.544 li
100.883 187.889 li
100.869 187.842 li
100.984 188.173 li
100.967 188.13 li
101.111 188.445 li
101.089 188.402 li
101.261 188.699 li
101.235 188.66 li
101.433 188.936 li
101.403 188.9 li
101.624 189.156 li
101.592 189.12 li
101.835 189.353 li
101.798 189.322 li
102.062 189.529 li
102.022 189.501 li
102.305 189.681 li
102.261 189.656 li
102.561 189.807 li
102.514 189.786 li
102.829 189.909 li
102.78 189.892 li
103.108 189.98 li
103.057 189.969 li
103.397 190.025 li
103.344 190.018 li
103.695 190.038 li
103.641 190.038 li
103.992 190.018 li
103.939 190.025 li
104.279 189.969 li
104.228 189.98 li
104.556 189.892 li
104.507 189.909 li
104.822 189.786 li
104.775 189.807 li
105.075 189.656 li
105.031 189.681 li
105.314 189.501 li
105.274 189.529 li
105.538 189.322 li
105.501 189.353 li
105.744 189.12 li
105.712 189.156 li
105.933 188.9 li
105.903 188.936 li
106.101 188.66 li
106.075 188.699 li
106.247 188.402 li
106.225 188.445 li
106.369 188.13 li
106.352 188.173 li
106.467 187.842 li
106.453 187.889 li
106.538 187.544 li
106.529 187.59 li
106.581 187.232 li
106.576 187.281 li
106.594 186.913 li
106.594 186.961 li
106.576 186.592 li
106.581 186.641 li
106.529 186.283 li
106.538 186.329 li
106.453 185.984 li
106.467 186.031 li
106.352 185.699 li
106.369 185.743 li
106.225 185.428 li
106.247 185.47 li
106.075 185.173 li
106.101 185.214 li
105.903 184.936 li
105.933 184.974 li
105.712 184.717 li
105.744 184.753 li
105.501 184.521 li
105.538 184.551 li
105.274 184.344 li
105.314 184.372 li
105.031 184.193 li
105.075 184.217 li
104.775 184.065 li
104.822 184.087 li
104.507 183.965 li
104.556 183.982 li
104.228 183.893 li
104.279 183.904 li
103.939 183.849 li
103.992 183.854 li
103.641 183.836 li
103.695 183.836 li
103.344 183.854 li
103.397 183.849 li
103.057 183.904 li
103.108 183.893 li
102.78 183.982 li
102.829 183.965 li
102.514 184.087 li
102.561 184.065 li
102.261 184.217 li
102.305 184.193 li
102.022 184.372 li
102.062 184.344 li
101.798 184.551 li
101.835 184.521 li
101.592 184.753 li
101.624 184.717 li
101.403 184.974 li
101.433 184.936 li
101.235 185.214 li
101.261 185.173 li
101.089 185.47 li
101.111 185.428 li
100.967 185.743 li
100.984 185.699 li
100.869 186.031 li
100.883 185.984 li
100.798 186.329 li
100.807 186.283 li
100.755 186.641 li
100.76 186.592 li
100.742 186.961 li
.80038 .47193 .046113 0 cmyk
f
70.4131 182.137 mo
70.4431 180.148 71.9761 178.536 73.8681 178.536 cv
75.7601 178.536 77.2931 180.148 77.2931 182.137 cv
77.2931 184.124 75.7601 185.736 73.8681 185.736 cv
71.9761 185.736 70.4431 184.124 70.4131 182.137 cv
.57174 .48158 .45197 0 cmyk
ef
69.9621 181.721 mo
70.0211 181.316 li
70.1171 180.924 li
71.6101 176.426 77.6781 177.47 77.7941 182.137 cv
77.7741 182.553 li
77.7151 182.958 li
76.6691 187.553 70.5481 187.206 69.9621 182.553 cv
69.9421 182.137 li
69.9621 181.721 li
cp
70.9421 182.161 mo
70.9421 182.113 li
70.9601 182.48 li
70.9551 182.432 li
71.0071 182.79 li
70.9981 182.743 li
71.0831 183.089 li
71.0691 183.043 li
71.1841 183.374 li
71.1671 183.329 li
71.3111 183.645 li
71.2891 183.603 li
71.4611 183.9 li
71.4351 183.859 li
71.6331 184.137 li
71.6031 184.1 li
71.8241 184.355 li
71.7921 184.32 li
72.0351 184.553 li
71.9981 184.522 li
72.2621 184.729 li
72.2221 184.701 li
72.5051 184.881 li
72.4611 184.855 li
72.7611 185.008 li
72.7141 184.987 li
73.0291 185.108 li
72.9801 185.092 li
73.3081 185.181 li
73.2571 185.169 li
73.5971 185.225 li
73.5441 185.219 li
73.8951 185.238 li
73.8411 185.238 li
74.1921 185.219 li
74.1391 185.225 li
74.4791 185.169 li
74.4281 185.181 li
74.7561 185.092 li
74.7071 185.108 li
75.0221 184.987 li
74.9751 185.008 li
75.2751 184.855 li
75.2311 184.881 li
75.5141 184.701 li
75.4741 184.729 li
75.7381 184.522 li
75.7011 184.553 li
75.9441 184.32 li
75.9121 184.355 li
76.1331 184.1 li
76.1031 184.137 li
76.3011 183.859 li
76.2751 183.9 li
76.4471 183.603 li
76.4251 183.645 li
76.5691 183.329 li
76.5521 183.374 li
76.6671 183.043 li
76.6531 183.089 li
76.7381 182.743 li
76.7291 182.79 li
76.7811 182.432 li
76.7761 182.48 li
76.7941 182.113 li
76.7941 182.161 li
76.7761 181.793 li
76.7811 181.841 li
76.7291 181.483 li
76.7381 181.53 li
76.6531 181.185 li
76.6671 181.23 li
76.5521 180.9 li
76.5691 180.944 li
76.4251 180.629 li
76.4471 180.671 li
76.2751 180.374 li
76.3011 180.414 li
76.1031 180.137 li
76.1331 180.174 li
75.9121 179.918 li
75.9441 179.953 li
75.7011 179.721 li
75.7381 179.751 li
75.4741 179.544 li
75.5141 179.573 li
75.2311 179.393 li
75.2751 179.418 li
74.9751 179.266 li
75.0221 179.286 li
74.7071 179.165 li
74.7561 179.182 li
74.4281 179.092 li
74.4791 179.104 li
74.1391 179.049 li
74.1921 179.055 li
73.8411 179.036 li
73.8951 179.036 li
73.5441 179.055 li
73.5971 179.049 li
73.2571 179.104 li
73.3081 179.092 li
72.9801 179.182 li
73.0291 179.165 li
72.7141 179.286 li
72.7611 179.266 li
72.4611 179.418 li
72.5051 179.393 li
72.2221 179.573 li
72.2621 179.544 li
71.9981 179.751 li
72.0351 179.721 li
71.7921 179.953 li
71.8241 179.918 li
71.6031 180.174 li
71.6331 180.137 li
71.4351 180.414 li
71.4611 180.374 li
71.2891 180.671 li
71.3111 180.629 li
71.1671 180.944 li
71.1841 180.9 li
71.0691 181.23 li
71.0831 181.185 li
70.9981 181.53 li
71.0071 181.483 li
70.9551 181.841 li
70.9601 181.793 li
70.9421 182.161 li
f
158.613 154.297 mo
158.643 152.349 160.176 150.737 162.068 150.737 cv
163.96 150.737 165.493 152.349 165.493 154.337 cv
165.493 156.325 163.96 157.937 162.068 157.937 cv
160.176 157.937 158.643 156.325 158.613 154.297 cv
.64495 .27805 0 0 cmyk
ef
158.162 153.921 mo
158.221 153.516 li
158.317 153.124 li
159.81 148.626 165.878 149.669 165.994 154.337 cv
165.974 154.753 li
165.915 155.158 li
164.869 159.754 158.748 159.406 158.162 154.753 cv
158.142 154.337 li
158.162 153.921 li
cp
159.142 154.361 mo
159.142 154.313 li
159.16 154.68 li
159.155 154.633 li
159.207 154.991 li
159.198 154.943 li
159.283 155.288 li
159.269 155.243 li
159.384 155.574 li
159.367 155.529 li
159.511 155.844 li
159.489 155.803 li
159.661 156.1 li
159.635 156.06 li
159.833 156.337 li
159.803 156.299 li
160.024 156.555 li
159.992 156.521 li
160.235 156.753 li
160.198 156.721 li
160.462 156.928 li
160.422 156.9 li
160.705 157.081 li
160.661 157.055 li
160.961 157.208 li
160.914 157.187 li
161.229 157.307 li
161.18 157.292 li
161.508 157.381 li
161.457 157.37 li
161.797 157.424 li
161.744 157.419 li
162.095 157.438 li
162.041 157.438 li
162.392 157.419 li
162.339 157.424 li
162.679 157.37 li
162.628 157.381 li
162.956 157.292 li
162.907 157.307 li
163.222 157.187 li
163.175 157.208 li
163.475 157.055 li
163.431 157.081 li
163.714 156.9 li
163.674 156.928 li
163.938 156.721 li
163.901 156.753 li
164.144 156.521 li
164.112 156.555 li
164.333 156.299 li
164.303 156.337 li
164.501 156.06 li
164.475 156.1 li
164.647 155.803 li
164.625 155.844 li
164.769 155.529 li
164.752 155.574 li
164.867 155.243 li
164.853 155.288 li
164.938 154.943 li
164.929 154.991 li
164.981 154.633 li
164.976 154.68 li
164.994 154.313 li
164.994 154.361 li
164.976 153.993 li
164.981 154.04 li
164.929 153.682 li
164.938 153.73 li
164.853 153.385 li
164.867 153.43 li
164.752 153.1 li
164.769 153.144 li
164.625 152.829 li
164.647 152.87 li
164.475 152.574 li
164.501 152.613 li
164.303 152.337 li
164.333 152.374 li
164.112 152.118 li
164.144 152.152 li
163.901 151.921 li
163.938 151.952 li
163.674 151.745 li
163.714 151.773 li
163.431 151.592 li
163.475 151.618 li
163.175 151.465 li
163.222 151.486 li
162.907 151.365 li
162.956 151.382 li
162.628 151.292 li
162.679 151.303 li
162.339 151.249 li
162.392 151.255 li
162.041 151.236 li
162.095 151.236 li
161.744 151.255 li
161.797 151.249 li
161.457 151.303 li
161.508 151.292 li
161.18 151.382 li
161.229 151.365 li
160.914 151.486 li
160.961 151.465 li
160.661 151.618 li
160.705 151.592 li
160.422 151.773 li
160.462 151.745 li
160.198 151.952 li
160.235 151.921 li
159.992 152.152 li
160.024 152.118 li
159.803 152.374 li
159.833 152.337 li
159.635 152.613 li
159.661 152.574 li
159.489 152.87 li
159.511 152.829 li
159.367 153.144 li
159.384 153.1 li
159.269 153.43 li
159.283 153.385 li
159.198 153.73 li
159.207 153.682 li
159.155 154.04 li
159.16 153.993 li
159.142 154.361 li
.80038 .47193 .046113 0 cmyk
f
158.613 191.977 mo
158.643 189.949 160.176 188.337 162.068 188.337 cv
163.96 188.337 165.493 189.949 165.493 191.936 cv
165.493 193.924 163.96 195.536 162.068 195.536 cv
160.176 195.536 158.643 193.924 158.613 191.977 cv
.64495 .27805 0 0 cmyk
ef
158.162 191.521 mo
158.221 191.116 li
158.317 190.725 li
159.81 186.227 165.878 187.27 165.994 191.936 cv
165.974 192.353 li
165.915 192.758 li
164.869 197.354 158.748 197.005 158.162 192.353 cv
158.142 191.936 li
158.162 191.521 li
cp
159.142 191.961 mo
159.142 191.913 li
159.16 192.281 li
159.155 192.232 li
159.207 192.59 li
159.198 192.544 li
159.283 192.889 li
159.269 192.842 li
159.384 193.173 li
159.367 193.13 li
159.511 193.445 li
159.489 193.402 li
159.661 193.699 li
159.635 193.66 li
159.833 193.936 li
159.803 193.9 li
160.024 194.156 li
159.992 194.12 li
160.235 194.353 li
160.198 194.322 li
160.462 194.529 li
160.422 194.501 li
160.705 194.681 li
160.661 194.656 li
160.961 194.807 li
160.914 194.786 li
161.229 194.909 li
161.18 194.892 li
161.508 194.98 li
161.457 194.969 li
161.797 195.025 li
161.744 195.018 li
162.095 195.038 li
162.041 195.038 li
162.392 195.018 li
162.339 195.025 li
162.679 194.969 li
162.628 194.98 li
162.956 194.892 li
162.907 194.909 li
163.222 194.786 li
163.175 194.807 li
163.475 194.656 li
163.431 194.681 li
163.714 194.501 li
163.674 194.529 li
163.938 194.322 li
163.901 194.353 li
164.144 194.12 li
164.112 194.156 li
164.333 193.9 li
164.303 193.936 li
164.501 193.66 li
164.475 193.699 li
164.647 193.402 li
164.625 193.445 li
164.769 193.13 li
164.752 193.173 li
164.867 192.842 li
164.853 192.889 li
164.938 192.544 li
164.929 192.59 li
164.981 192.232 li
164.976 192.281 li
164.994 191.913 li
164.994 191.961 li
164.976 191.592 li
164.981 191.641 li
164.929 191.283 li
164.938 191.329 li
164.853 190.984 li
164.867 191.031 li
164.752 190.699 li
164.769 190.743 li
164.625 190.428 li
164.647 190.47 li
164.475 190.173 li
164.501 190.214 li
164.303 189.936 li
164.333 189.974 li
164.112 189.717 li
164.144 189.753 li
163.901 189.521 li
163.938 189.551 li
163.674 189.344 li
163.714 189.372 li
163.431 189.193 li
163.475 189.217 li
163.175 189.065 li
163.222 189.087 li
162.907 188.965 li
162.956 188.982 li
162.628 188.893 li
162.679 188.904 li
162.339 188.849 li
162.392 188.854 li
162.041 188.836 li
162.095 188.836 li
161.744 188.854 li
161.797 188.849 li
161.457 188.904 li
161.508 188.893 li
161.18 188.982 li
161.229 188.965 li
160.914 189.087 li
160.961 189.065 li
160.661 189.217 li
160.705 189.193 li
160.422 189.372 li
160.462 189.344 li
160.198 189.551 li
160.235 189.521 li
159.992 189.753 li
160.024 189.717 li
159.803 189.974 li
159.833 189.936 li
159.635 190.214 li
159.661 190.173 li
159.489 190.47 li
159.511 190.428 li
159.367 190.743 li
159.384 190.699 li
159.269 191.031 li
159.283 190.984 li
159.198 191.329 li
159.207 191.283 li
159.155 191.641 li
159.16 191.592 li
159.142 191.961 li
.80038 .47193 .046113 0 cmyk
f
197.253 114.697 mo
197.193 112.749 198.726 111.137 200.618 111.137 cv
202.51 111.137 204.043 112.749 204.043 114.736 cv
204.043 116.725 202.51 118.337 200.618 118.337 cv
198.726 118.337 197.193 116.725 197.253 114.697 cv
.64495 .27805 0 0 cmyk
ef
196.712 114.32 mo
196.771 113.915 li
196.867 113.524 li
198.36 109.026 204.428 110.069 204.544 114.736 cv
204.524 115.152 li
204.465 115.557 li
203.419 120.154 197.298 119.805 196.712 115.152 cv
196.692 114.736 li
196.712 114.32 li
cp
197.692 114.76 mo
197.692 114.712 li
197.71 115.08 li
197.705 115.033 li
197.757 115.391 li
197.748 115.343 li
197.833 115.688 li
197.819 115.643 li
197.934 115.973 li
197.917 115.929 li
198.061 116.244 li
198.039 116.202 li
198.211 116.499 li
198.185 116.46 li
198.382 116.736 li
198.353 116.699 li
198.574 116.955 li
198.542 116.921 li
198.785 117.152 li
198.748 117.121 li
199.012 117.328 li
198.972 117.3 li
199.255 117.48 li
199.211 117.455 li
199.511 117.607 li
199.464 117.587 li
199.779 117.707 li
199.73 117.691 li
200.058 117.781 li
200.007 117.77 li
200.347 117.824 li
200.294 117.818 li
200.644 117.837 li
200.591 117.837 li
200.942 117.818 li
200.889 117.824 li
201.229 117.77 li
201.178 117.781 li
201.506 117.691 li
201.457 117.707 li
201.772 117.587 li
201.725 117.607 li
202.025 117.455 li
201.981 117.48 li
202.264 117.3 li
202.224 117.328 li
202.488 117.121 li
202.451 117.152 li
202.694 116.921 li
202.662 116.955 li
202.883 116.699 li
202.853 116.736 li
203.051 116.46 li
203.025 116.499 li
203.197 116.202 li
203.175 116.244 li
203.319 115.929 li
203.302 115.973 li
203.417 115.643 li
203.403 115.688 li
203.488 115.343 li
203.479 115.391 li
203.53 115.033 li
203.526 115.08 li
203.544 114.712 li
203.544 114.76 li
203.526 114.393 li
203.53 114.44 li
203.479 114.082 li
203.488 114.13 li
203.403 113.785 li
203.417 113.83 li
203.302 113.499 li
203.319 113.544 li
203.175 113.229 li
203.197 113.27 li
203.025 112.973 li
203.051 113.013 li
202.853 112.736 li
202.883 112.773 li
202.662 112.518 li
202.694 112.552 li
202.451 112.32 li
202.488 112.352 li
202.224 112.145 li
202.264 112.173 li
201.981 111.992 li
202.025 112.018 li
201.725 111.865 li
201.772 111.886 li
201.457 111.766 li
201.506 111.781 li
201.178 111.692 li
201.229 111.703 li
200.889 111.648 li
200.942 111.654 li
200.591 111.635 li
200.644 111.635 li
200.294 111.654 li
200.347 111.648 li
200.007 111.703 li
200.058 111.692 li
199.73 111.781 li
199.779 111.766 li
199.464 111.886 li
199.511 111.865 li
199.211 112.018 li
199.255 111.992 li
198.972 112.173 li
199.012 112.145 li
198.748 112.352 li
198.785 112.32 li
198.542 112.552 li
198.574 112.518 li
198.353 112.773 li
198.382 112.736 li
198.185 113.013 li
198.211 112.973 li
198.039 113.27 li
198.061 113.229 li
197.917 113.544 li
197.934 113.499 li
197.819 113.83 li
197.833 113.785 li
197.748 114.13 li
197.757 114.082 li
197.705 114.44 li
197.71 114.393 li
197.692 114.76 li
.80038 .47193 .046113 0 cmyk
f
201.573 152.736 mo
201.593 150.798 203.126 149.186 205.018 149.186 cv
206.91 149.186 208.443 150.798 208.443 152.786 cv
208.443 154.774 206.91 156.386 205.018 156.386 cv
203.126 156.386 201.593 154.774 201.573 152.736 cv
.64495 .27805 0 0 cmyk
ef
201.112 152.37 mo
201.171 151.965 li
201.267 151.574 li
202.76 147.076 208.828 148.119 208.944 152.786 cv
208.924 153.202 li
208.865 153.607 li
207.819 158.203 201.698 157.855 201.112 153.202 cv
201.092 152.786 li
201.112 152.37 li
cp
202.092 152.811 mo
202.092 152.762 li
202.11 153.13 li
202.105 153.083 li
202.157 153.441 li
202.148 153.393 li
202.233 153.738 li
202.219 153.693 li
202.334 154.023 li
202.317 153.979 li
202.461 154.294 li
202.439 154.253 li
202.611 154.549 li
202.585 154.509 li
202.783 154.786 li
202.753 154.749 li
202.974 155.005 li
202.942 154.971 li
203.185 155.202 li
203.148 155.171 li
203.412 155.378 li
203.372 155.35 li
203.655 155.531 li
203.611 155.505 li
203.911 155.658 li
203.864 155.637 li
204.179 155.757 li
204.13 155.742 li
204.458 155.831 li
204.407 155.82 li
204.747 155.874 li
204.694 155.868 li
205.045 155.887 li
204.992 155.887 li
205.342 155.868 li
205.289 155.874 li
205.629 155.82 li
205.578 155.831 li
205.906 155.742 li
205.857 155.757 li
206.172 155.637 li
206.125 155.658 li
206.425 155.505 li
206.381 155.531 li
206.664 155.35 li
206.624 155.378 li
206.888 155.171 li
206.851 155.202 li
207.094 154.971 li
207.062 155.005 li
207.283 154.749 li
207.253 154.786 li
207.451 154.509 li
207.425 154.549 li
207.597 154.253 li
207.575 154.294 li
207.719 153.979 li
207.702 154.023 li
207.817 153.693 li
207.803 153.738 li
207.888 153.393 li
207.879 153.441 li
207.931 153.083 li
207.926 153.13 li
207.944 152.762 li
207.944 152.811 li
207.926 152.443 li
207.931 152.49 li
207.879 152.132 li
207.888 152.18 li
207.803 151.835 li
207.817 151.88 li
207.702 151.549 li
207.719 151.594 li
207.575 151.279 li
207.597 151.32 li
207.425 151.023 li
207.451 151.063 li
207.253 150.786 li
207.283 150.824 li
207.062 150.568 li
207.094 150.602 li
206.851 150.37 li
206.888 150.402 li
206.624 150.195 li
206.664 150.223 li
206.381 150.042 li
206.425 150.068 li
206.125 149.915 li
206.172 149.936 li
205.857 149.816 li
205.906 149.831 li
205.578 149.742 li
205.629 149.753 li
205.289 149.699 li
205.342 149.704 li
204.992 149.686 li
205.045 149.686 li
204.694 149.704 li
204.747 149.699 li
204.407 149.753 li
204.458 149.742 li
204.13 149.831 li
204.179 149.816 li
203.864 149.936 li
203.911 149.915 li
203.611 150.068 li
203.655 150.042 li
203.372 150.223 li
203.412 150.195 li
203.148 150.402 li
203.185 150.37 li
202.942 150.602 li
202.974 150.568 li
202.753 150.824 li
202.783 150.786 li
202.585 151.063 li
202.611 151.023 li
202.439 151.32 li
202.461 151.279 li
202.317 151.594 li
202.334 151.549 li
202.219 151.88 li
202.233 151.835 li
202.148 152.18 li
202.157 152.132 li
202.105 152.49 li
202.11 152.443 li
202.092 152.811 li
.80038 .47193 .046113 0 cmyk
f
124.533 166.297 mo
124.493 164.299 126.026 162.687 127.918 162.687 cv
129.81 162.687 131.343 164.299 131.343 166.287 cv
131.343 168.275 129.81 169.887 127.918 169.887 cv
126.026 169.887 124.493 168.275 124.533 166.297 cv
.64495 .27805 0 0 cmyk
ef
124.012 165.87 mo
124.071 165.465 li
124.167 165.074 li
125.66 160.576 131.728 161.619 131.844 166.286 cv
131.824 166.702 li
131.765 167.107 li
130.719 171.703 124.598 171.355 124.012 166.702 cv
123.992 166.286 li
124.012 165.87 li
cp
124.992 166.311 mo
124.992 166.262 li
125.01 166.63 li
125.005 166.583 li
125.057 166.941 li
125.048 166.893 li
125.133 167.238 li
125.119 167.193 li
125.234 167.523 li
125.217 167.479 li
125.361 167.794 li
125.339 167.753 li
125.511 168.049 li
125.485 168.009 li
125.682 168.286 li
125.653 168.249 li
125.874 168.505 li
125.842 168.471 li
126.085 168.702 li
126.048 168.671 li
126.312 168.878 li
126.272 168.85 li
126.555 169.031 li
126.511 169.005 li
126.811 169.158 li
126.764 169.137 li
127.079 169.258 li
127.03 169.242 li
127.358 169.331 li
127.307 169.32 li
127.647 169.374 li
127.594 169.368 li
127.944 169.387 li
127.891 169.387 li
128.242 169.368 li
128.189 169.374 li
128.529 169.32 li
128.478 169.331 li
128.806 169.242 li
128.757 169.258 li
129.072 169.137 li
129.025 169.158 li
129.325 169.005 li
129.281 169.031 li
129.564 168.85 li
129.524 168.878 li
129.788 168.671 li
129.751 168.702 li
129.994 168.471 li
129.962 168.505 li
130.183 168.249 li
130.153 168.286 li
130.351 168.009 li
130.325 168.049 li
130.497 167.753 li
130.475 167.794 li
130.619 167.479 li
130.602 167.523 li
130.717 167.193 li
130.703 167.238 li
130.788 166.893 li
130.779 166.941 li
130.83 166.583 li
130.826 166.63 li
130.844 166.262 li
130.844 166.311 li
130.826 165.943 li
130.83 165.99 li
130.779 165.632 li
130.788 165.68 li
130.703 165.335 li
130.717 165.38 li
130.602 165.049 li
130.619 165.094 li
130.475 164.779 li
130.497 164.82 li
130.325 164.523 li
130.351 164.563 li
130.153 164.286 li
130.183 164.324 li
129.962 164.068 li
129.994 164.102 li
129.751 163.87 li
129.788 163.902 li
129.524 163.695 li
129.564 163.723 li
129.281 163.542 li
129.325 163.568 li
129.025 163.415 li
129.072 163.436 li
128.757 163.316 li
128.806 163.331 li
128.478 163.242 li
128.529 163.253 li
128.189 163.199 li
128.242 163.204 li
127.891 163.186 li
127.944 163.186 li
127.594 163.204 li
127.647 163.199 li
127.307 163.253 li
127.358 163.242 li
127.03 163.331 li
127.079 163.316 li
126.764 163.436 li
126.811 163.415 li
126.511 163.568 li
126.555 163.542 li
126.272 163.723 li
126.312 163.695 li
126.048 163.902 li
126.085 163.87 li
125.842 164.102 li
125.874 164.068 li
125.653 164.324 li
125.682 164.286 li
125.485 164.563 li
125.511 164.523 li
125.339 164.82 li
125.361 164.779 li
125.217 165.094 li
125.234 165.049 li
125.119 165.38 li
125.133 165.335 li
125.048 165.68 li
125.057 165.632 li
125.005 165.99 li
125.01 165.943 li
124.992 166.311 li
.80038 .47193 .046113 0 cmyk
f
145.653 213.816 mo
145.693 211.848 147.226 210.236 149.118 210.236 cv
151.01 210.236 152.543 211.848 152.543 213.836 cv
152.543 215.824 151.01 217.436 149.118 217.436 cv
147.226 217.436 145.693 215.824 145.653 213.816 cv
.64495 .27805 0 0 cmyk
ef
145.212 213.421 mo
145.271 213.016 li
145.367 212.625 li
146.86 208.126 152.928 209.169 153.044 213.837 cv
153.024 214.253 li
152.965 214.658 li
151.919 219.254 145.798 218.906 145.212 214.253 cv
145.192 213.837 li
145.212 213.421 li
cp
146.192 213.861 mo
146.192 213.813 li
146.21 214.181 li
146.205 214.133 li
146.257 214.491 li
146.248 214.444 li
146.333 214.788 li
146.319 214.742 li
146.434 215.074 li
146.417 215.03 li
146.561 215.345 li
146.539 215.303 li
146.711 215.6 li
146.685 215.56 li
146.883 215.837 li
146.853 215.799 li
147.074 216.056 li
147.042 216.021 li
147.285 216.253 li
147.248 216.221 li
147.512 216.428 li
147.472 216.401 li
147.755 216.581 li
147.711 216.556 li
148.011 216.708 li
147.964 216.686 li
148.279 216.809 li
148.23 216.792 li
148.558 216.88 li
148.507 216.87 li
148.847 216.924 li
148.794 216.919 li
149.145 216.938 li
149.091 216.938 li
149.442 216.919 li
149.389 216.924 li
149.729 216.87 li
149.678 216.88 li
150.006 216.792 li
149.957 216.809 li
150.272 216.686 li
150.225 216.708 li
150.525 216.556 li
150.481 216.581 li
150.764 216.401 li
150.724 216.428 li
150.988 216.221 li
150.951 216.253 li
151.194 216.021 li
151.162 216.056 li
151.383 215.799 li
151.353 215.837 li
151.551 215.56 li
151.525 215.6 li
151.697 215.303 li
151.675 215.345 li
151.819 215.03 li
151.802 215.074 li
151.917 214.742 li
151.903 214.788 li
151.988 214.444 li
151.979 214.491 li
152.031 214.133 li
152.026 214.181 li
152.044 213.813 li
152.044 213.861 li
152.026 213.492 li
152.031 213.54 li
151.979 213.182 li
151.988 213.229 li
151.903 212.884 li
151.917 212.931 li
151.802 212.6 li
151.819 212.643 li
151.675 212.328 li
151.697 212.37 li
151.525 212.074 li
151.551 212.113 li
151.353 211.837 li
151.383 211.874 li
151.162 211.617 li
151.194 211.652 li
150.951 211.421 li
150.988 211.452 li
150.724 211.245 li
150.764 211.272 li
150.481 211.092 li
150.525 211.117 li
150.225 210.965 li
150.272 210.987 li
149.957 210.866 li
150.006 210.882 li
149.678 210.793 li
149.729 210.803 li
149.389 210.749 li
149.442 210.755 li
149.091 210.736 li
149.145 210.736 li
148.794 210.755 li
148.847 210.749 li
148.507 210.803 li
148.558 210.793 li
148.23 210.882 li
148.279 210.866 li
147.964 210.987 li
148.011 210.965 li
147.711 211.117 li
147.755 211.092 li
147.472 211.272 li
147.512 211.245 li
147.248 211.452 li
147.285 211.421 li
147.042 211.652 li
147.074 211.617 li
146.853 211.874 li
146.883 211.837 li
146.685 212.113 li
146.711 212.074 li
146.539 212.37 li
146.561 212.328 li
146.417 212.643 li
146.434 212.6 li
146.319 212.931 li
146.333 212.884 li
146.248 213.229 li
146.257 213.182 li
146.205 213.54 li
146.21 213.492 li
146.192 213.861 li
.80038 .47193 .046113 0 cmyk
f
95.4931 213.816 mo
95.5431 211.848 97.0761 210.236 98.9681 210.236 cv
100.86 210.236 102.393 211.848 102.393 213.836 cv
102.393 215.824 100.86 217.436 98.9681 217.436 cv
97.0761 217.436 95.5431 215.824 95.4931 213.816 cv
.64495 .27805 0 0 cmyk
ef
95.0621 213.421 mo
95.1211 213.016 li
95.2171 212.625 li
96.7101 208.126 102.778 209.169 102.894 213.837 cv
102.874 214.253 li
102.815 214.658 li
101.769 219.254 95.6481 218.906 95.0621 214.253 cv
95.0421 213.837 li
95.0621 213.421 li
cp
96.0421 213.861 mo
96.0421 213.813 li
96.0601 214.181 li
96.0551 214.133 li
96.1071 214.491 li
96.0981 214.444 li
96.1831 214.788 li
96.1691 214.742 li
96.2841 215.074 li
96.2671 215.03 li
96.4111 215.345 li
96.3891 215.303 li
96.5611 215.6 li
96.5351 215.56 li
96.7331 215.837 li
96.7031 215.799 li
96.9241 216.056 li
96.8921 216.021 li
97.1351 216.253 li
97.0981 216.221 li
97.3621 216.428 li
97.3221 216.401 li
97.6051 216.581 li
97.5611 216.556 li
97.8611 216.708 li
97.8141 216.686 li
98.1291 216.809 li
98.0801 216.792 li
98.4081 216.88 li
98.3571 216.87 li
98.6971 216.924 li
98.6441 216.919 li
98.9941 216.938 li
98.9411 216.938 li
99.2921 216.919 li
99.2391 216.924 li
99.5791 216.87 li
99.5281 216.88 li
99.8561 216.792 li
99.8071 216.809 li
100.122 216.686 li
100.075 216.708 li
100.375 216.556 li
100.331 216.581 li
100.614 216.401 li
100.574 216.428 li
100.838 216.221 li
100.801 216.253 li
101.044 216.021 li
101.012 216.056 li
101.233 215.799 li
101.203 215.837 li
101.401 215.56 li
101.375 215.6 li
101.547 215.303 li
101.525 215.345 li
101.669 215.03 li
101.652 215.074 li
101.767 214.742 li
101.753 214.788 li
101.838 214.444 li
101.829 214.491 li
101.88 214.133 li
101.876 214.181 li
101.894 213.813 li
101.894 213.861 li
101.876 213.492 li
101.88 213.54 li
101.829 213.182 li
101.838 213.229 li
101.753 212.884 li
101.767 212.931 li
101.652 212.6 li
101.669 212.643 li
101.525 212.328 li
101.547 212.37 li
101.375 212.074 li
101.401 212.113 li
101.203 211.837 li
101.233 211.874 li
101.012 211.617 li
101.044 211.652 li
100.801 211.421 li
100.838 211.452 li
100.574 211.245 li
100.614 211.272 li
100.331 211.092 li
100.375 211.117 li
100.075 210.965 li
100.122 210.987 li
99.8071 210.866 li
99.8561 210.882 li
99.5281 210.793 li
99.5791 210.803 li
99.2391 210.749 li
99.2921 210.755 li
98.9411 210.736 li
98.9941 210.736 li
98.6441 210.755 li
98.6971 210.749 li
98.3571 210.803 li
98.4081 210.793 li
98.0801 210.882 li
98.1291 210.866 li
97.8141 210.987 li
97.8611 210.965 li
97.5611 211.117 li
97.6051 211.092 li
97.3221 211.272 li
97.3621 211.245 li
97.0981 211.452 li
97.1351 211.421 li
96.8921 211.652 li
96.9241 211.617 li
96.7031 211.874 li
96.7331 211.837 li
96.5351 212.113 li
96.5611 212.074 li
96.3891 212.37 li
96.4111 212.328 li
96.2671 212.643 li
96.2841 212.6 li
96.1691 212.931 li
96.1831 212.884 li
96.0981 213.229 li
96.1071 213.182 li
96.0551 213.54 li
96.0601 213.492 li
96.0421 213.861 li
.80038 .47193 .046113 0 cmyk
f
183.453 197.857 mo
183.493 195.898 185.026 194.286 186.918 194.286 cv
188.81 194.286 190.343 195.898 190.343 197.887 cv
190.343 199.874 188.81 201.486 186.918 201.486 cv
185.026 201.486 183.493 199.874 183.453 197.857 cv
.64495 .27805 0 0 cmyk
ef
183.012 197.471 mo
183.071 197.066 li
183.167 196.674 li
184.66 192.177 190.728 193.22 190.844 197.887 cv
190.824 198.303 li
190.765 198.708 li
189.719 203.303 183.598 202.956 183.012 198.303 cv
182.992 197.887 li
183.012 197.471 li
cp
183.992 197.911 mo
183.992 197.863 li
184.01 198.23 li
184.005 198.182 li
184.057 198.54 li
184.048 198.493 li
184.133 198.839 li
184.119 198.793 li
184.234 199.124 li
184.217 199.079 li
184.361 199.395 li
184.339 199.353 li
184.511 199.65 li
184.485 199.609 li
184.682 199.887 li
184.653 199.85 li
184.874 200.105 li
184.842 200.07 li
185.085 200.303 li
185.048 200.272 li
185.312 200.479 li
185.272 200.451 li
185.554 200.631 li
185.511 200.605 li
185.811 200.758 li
185.764 200.737 li
186.079 200.858 li
186.03 200.842 li
186.358 200.931 li
186.307 200.919 li
186.647 200.975 li
186.594 200.969 li
186.944 200.988 li
186.891 200.988 li
187.242 200.969 li
187.189 200.975 li
187.529 200.919 li
187.478 200.931 li
187.806 200.842 li
187.757 200.858 li
188.072 200.737 li
188.025 200.758 li
188.325 200.605 li
188.281 200.631 li
188.564 200.451 li
188.524 200.479 li
188.788 200.272 li
188.751 200.303 li
188.994 200.07 li
188.962 200.105 li
189.183 199.85 li
189.153 199.887 li
189.351 199.609 li
189.325 199.65 li
189.497 199.353 li
189.475 199.395 li
189.619 199.079 li
189.602 199.124 li
189.717 198.793 li
189.703 198.839 li
189.788 198.493 li
189.779 198.54 li
189.83 198.182 li
189.826 198.23 li
189.844 197.863 li
189.844 197.911 li
189.826 197.543 li
189.83 197.591 li
189.779 197.233 li
189.788 197.28 li
189.703 196.935 li
189.717 196.98 li
189.602 196.65 li
189.619 196.694 li
189.475 196.379 li
189.497 196.421 li
189.325 196.124 li
189.351 196.164 li
189.153 195.887 li
189.183 195.924 li
188.962 195.668 li
188.994 195.703 li
188.751 195.471 li
188.788 195.501 li
188.524 195.294 li
188.564 195.323 li
188.281 195.143 li
188.325 195.168 li
188.025 195.016 li
188.072 195.036 li
187.757 194.915 li
187.806 194.932 li
187.478 194.842 li
187.529 194.854 li
187.189 194.799 li
187.242 194.805 li
186.891 194.786 li
186.944 194.786 li
186.594 194.805 li
186.647 194.799 li
186.307 194.854 li
186.358 194.842 li
186.03 194.932 li
186.079 194.915 li
185.764 195.036 li
185.811 195.016 li
185.511 195.168 li
185.554 195.143 li
185.272 195.323 li
185.312 195.294 li
185.048 195.501 li
185.085 195.471 li
184.842 195.703 li
184.874 195.668 li
184.653 195.924 li
184.682 195.887 li
184.485 196.164 li
184.511 196.124 li
184.339 196.421 li
184.361 196.379 li
184.217 196.694 li
184.234 196.65 li
184.119 196.98 li
184.133 196.935 li
184.048 197.28 li
184.057 197.233 li
184.005 197.591 li
184.01 197.543 li
183.992 197.911 li
.80038 .47193 .046113 0 cmyk
f
29.2531 112.297 mo
37.2931 112.297 li
37.2931 102.577 li
29.2531 102.577 li
cp
0 .30243 .90338 0 cmyk
f
28.7441 102.036 mo
37.7941 102.036 li
37.7941 112.837 li
28.7441 112.837 li
cp
37.7941 102.036 mo
cp
29.2441 103.036 mo
29.7441 102.536 li
29.7441 112.337 li
29.2441 111.837 li
37.2941 111.837 li
36.7941 112.337 li
36.7941 102.536 li
37.2941 103.036 li
29.2441 103.036 li
f
70.4131 89.2565 mo
78.4531 89.2565 li
78.4531 79.4165 li
70.4131 79.4165 li
cp
.57174 .48158 .45197 0 cmyk
f
69.9431 78.9365 mo
78.9931 78.9365 li
78.9931 89.7365 li
69.9431 89.7365 li
cp
78.9931 78.9365 mo
cp
70.4431 79.9365 mo
70.9431 79.4365 li
70.9431 89.2365 li
70.4431 88.7365 li
78.4931 88.7365 li
77.9931 89.2365 li
77.9931 79.4365 li
78.4931 79.9365 li
70.4431 79.9365 li
f
69.2131 160.536 mo
77.2531 160.536 li
77.2531 150.697 li
69.2131 150.697 li
cp
0 .30243 .90338 0 cmyk
f
68.7431 150.236 mo
77.7931 150.236 li
77.7931 161.036 li
68.7431 161.036 li
cp
77.7931 150.236 mo
cp
69.2431 151.236 mo
69.7431 150.736 li
69.7431 160.536 li
69.2431 160.036 li
77.2931 160.036 li
76.7931 160.536 li
76.7931 150.736 li
77.2931 151.236 li
69.2431 151.236 li
f
23.1331 188.376 mo
31.1731 188.376 li
31.1731 178.536 li
23.1331 178.536 li
cp
f
22.6431 178.036 mo
31.693 178.036 li
31.693 188.837 li
22.6431 188.837 li
cp
31.6931 178.036 mo
cp
23.1431 179.036 mo
23.6431 178.536 li
23.6431 188.337 li
23.1431 187.837 li
31.1931 187.837 li
30.6931 188.337 li
30.6931 178.536 li
31.1931 179.036 li
23.1431 179.036 li
f
41.6131 211.297 mo
49.6531 211.297 li
49.6531 201.456 li
41.6131 201.456 li
cp
f
41.1431 200.987 mo
50.193 200.987 li
50.193 211.786 li
41.1431 211.786 li
cp
50.1931 200.987 mo
cp
41.6431 201.987 mo
42.1431 201.487 li
42.1431 211.286 li
41.6431 210.786 li
49.6931 210.786 li
49.1931 211.286 li
49.1931 201.487 li
49.6931 201.987 li
41.6431 201.987 li
f
37.2941 195.577 mo
45.3341 195.577 li
45.3341 185.736 li
37.2941 185.736 li
cp
f
36.7931 185.237 mo
45.8431 185.237 li
45.8431 196.036 li
36.7931 196.036 li
cp
45.8431 185.237 mo
cp
37.2931 186.237 mo
37.7931 185.737 li
37.7931 195.536 li
37.2931 195.036 li
45.3431 195.036 li
44.8431 195.536 li
44.8431 185.737 li
45.3431 186.237 li
37.2931 186.237 li
f
61.1731 136.417 mo
69.2127 136.417 li
69.2127 126.577 li
61.1731 126.577 li
cp
f
60.6931 126.087 mo
69.7427 126.087 li
69.7427 136.887 li
60.6931 136.887 li
cp
69.7431 126.087 mo
cp
61.1931 127.087 mo
61.6931 126.587 li
61.6931 136.387 li
61.1931 135.887 li
69.2431 135.887 li
68.7431 136.387 li
68.7431 126.587 li
69.2431 127.087 li
61.1931 127.087 li
f
37.2941 167.736 mo
45.3341 167.736 li
45.3341 157.896 li
37.2941 157.896 li
cp
f
36.7931 157.437 mo
45.8431 157.437 li
45.8431 168.237 li
36.7931 168.237 li
cp
45.8431 157.437 mo
cp
37.2931 158.437 mo
37.7931 157.937 li
37.7931 167.737 li
37.2931 167.237 li
45.3431 167.237 li
44.8431 167.737 li
44.8431 157.937 li
45.3431 158.437 li
37.2931 158.437 li
f
55.2941 112.297 mo
63.4541 112.297 li
63.4541 102.577 li
55.2941 102.577 li
cp
f
54.8431 102.036 mo
63.893 102.036 li
63.893 112.837 li
54.8431 112.837 li
cp
63.8931 102.036 mo
cp
55.3431 103.036 mo
55.8431 102.536 li
55.8431 112.337 li
55.3431 111.837 li
63.3931 111.837 li
62.8931 112.337 li
62.8931 102.536 li
63.3931 103.036 li
55.3431 103.036 li
f
29.2531 149.137 mo
37.2931 149.137 li
37.2931 139.417 li
29.2531 139.417 li
cp
f
28.7441 138.887 mo
37.7941 138.887 li
37.7941 149.687 li
28.7441 149.687 li
cp
37.7941 138.887 mo
cp
29.2441 139.887 mo
29.7441 139.387 li
29.7441 149.187 li
29.2441 148.687 li
37.2941 148.687 li
36.7941 149.187 li
36.7941 139.387 li
37.2941 139.887 li
29.2441 139.887 li
f
62.1561 93.9325 mo
68.6461 89.5795 li
66.8961 88.7305 li
67.4911 96.5225 li
67.6731 98.0065 69.7821 97.8465 69.7351 96.3515 cv
68.9931 86.6365 li
60.9031 92.0635 li
59.8061 92.8545 60.6761 94.5015 61.9481 94.0425 cv
62.1561 93.9325 li
cp
63.3561 100.827 mo
69.0311 89.1365 li
67.0061 88.1535 li
61.3321 99.8455 li
63.3561 100.827 li
f
151.319 113.337 mo
158.504 116.41 li
156.944 117.568 li
156.081 109.801 li
155.985 108.309 158.083 108.076 158.317 109.552 cv
159.393 119.236 li
150.434 115.406 li
149.21 114.833 149.761 113.049 151.094 113.268 cv
151.319 113.337 li
cp
147.896 101.865 mo
158.965 116.773 li
157.159 118.114 li
146.09 103.207 li
147.896 101.865 li
.7518 0 .87069 0 cmyk
f
88.3891 181.333 mo
80.8221 183.284 li
81.3511 181.414 li
86.7741 187.04 li
87.7611 188.165 86.2411 189.63 85.1541 188.602 cv
78.3931 181.587 li
87.8281 179.155 li
89.1481 178.862 89.7981 180.608 88.6101 181.251 cv
88.3891 181.333 li
cp
96.2871 187.819 mo
80.2351 183.277 li
80.8481 181.112 li
96.8991 185.654 li
96.2871 187.819 li
.64495 .27805 0 0 cmyk
f
0 .9617 .90481 0 cmyk
%ADOBeginSubsetFont: GBAAAA+STHupo-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (GBAAAA+STHupo)
%%Title: (GBAAAA+STHupo Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /GBAAAA+STHupo def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-67 -233 1057 800} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 578 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
577 <001C60D8A8C9B5EE310DDDCCF9AB1B3DC6CFE2F8964EE20FC8A11E7BBFD
3C5CAEF826D061A10731EBB8C03EF883CE33066742012D78DB6AA9C60497C763
33F715E9A4E3965E6925B3E8FACEB48736BAFD388B2758954B2DD9472288751F
E3E6018D23B8C827F710DAFBB3897A2CED8926F116415BA1619991336B8AC611
CA250803BAAA42E9B1FE8B231D08864165C4879C2DB0C3559321716115FFF590
42B17409023> |
0 <001C60D8A8C9B5EE31F4> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /GBAAAA+STHupo-Identity-H /Identity-H 0 [/GBAAAA+STHupo] ct_ComposeFont pop end end
%ADOEndSubsetFont
/AFOLOK+STHupo /GBAAAA+STHupo-Identity-H findfont ct_VMDictPut
AFOLOK+STHupo [12 0 0 -12 0 0 ]msf
76.1931 90.6365 mo
(\002A)sh
AFOLOK+STHupo [12 0 0 -12 0 0 ]msf
76.1931 90.6365 mo
(\002A) false chp
.343 lw
2 lc
2 lj
2 ml
[] 0 dsh
true sadj
@
AFOLOK+STHupo [12 0 0 -12 0 0 ]msf
159.743 121.137 mo
(\002A)sh
AFOLOK+STHupo [12 0 0 -12 0 0 ]msf
159.743 121.137 mo
(\002A) false chp
@
AFOLOK+STHupo [12 0 0 -12 0 0 ]msf
65.6427 181.787 mo
(\002A)sh
AFOLOK+STHupo [12 0 0 -12 0 0 ]msf
65.6427 181.787 mo
(\002A) false chp
@
337.293 89.2565 mo
340.653 83.2565 li
343.893 89.2565 li
337.293 89.2565 li
.7518 0 .87069 0 cmyk
ef
340.593 82.1985 mo
344.739 89.7365 li
336.447 89.7365 li
340.593 82.1985 li
cp
337.731 89.4775 mo
337.293 88.7365 li
343.893 88.7365 li
343.455 89.4775 li
340.155 83.4775 li
341.031 83.4775 li
337.731 89.4775 li
f
405.693 116.257 mo
408.933 110.257 li
412.293 116.257 li
405.693 116.257 li
.57174 .48158 .45197 0 cmyk
ef
408.943 109.249 mo
413.089 116.786 li
404.797 116.786 li
408.943 109.249 li
cp
406.081 116.528 mo
405.643 115.786 li
412.243 115.786 li
411.805 116.528 li
408.505 110.528 li
409.381 110.528 li
406.081 116.528 li
f
355.773 120.096 mo
359.013 114.096 li
362.373 120.096 li
355.773 120.096 li
.7518 0 .87069 0 cmyk
ef
359.043 113.049 mo
363.189 120.587 li
354.897 120.587 li
359.043 113.049 li
cp
356.181 120.328 mo
355.743 119.587 li
362.343 119.587 li
361.905 120.328 li
358.605 114.328 li
359.481 114.328 li
356.181 120.328 li
f
368.973 122.257 mo
372.213 116.257 li
375.573 122.257 li
368.973 122.257 li
ef
372.243 115.249 mo
376.389 122.786 li
368.097 122.786 li
372.243 115.249 li
cp
369.381 122.528 mo
368.943 121.786 li
375.543 121.786 li
375.105 122.528 li
371.805 116.528 li
372.681 116.528 li
369.381 122.528 li
f
351.573 138.697 mo
354.813 132.697 li
358.173 138.697 li
351.573 138.697 li
ef
354.843 131.699 mo
358.989 139.236 li
350.697 139.236 li
354.843 131.699 li
cp
351.981 138.978 mo
351.543 138.236 li
358.143 138.236 li
357.705 138.978 li
354.405 132.978 li
355.281 132.978 li
351.981 138.978 li
f
362.373 104.257 mo
365.613 98.2565 li
368.973 104.257 li
362.373 104.257 li
ef
365.643 97.2485 mo
369.789 104.786 li
361.497 104.786 li
365.643 97.2485 li
cp
362.781 104.528 mo
362.343 103.786 li
368.943 103.786 li
368.505 104.528 li
365.205 98.5275 li
366.081 98.5275 li
362.781 104.528 li
f
392.973 104.257 mo
396.213 98.2565 li
399.573 104.257 li
392.973 104.257 li
ef
396.243 97.2485 mo
400.389 104.786 li
392.097 104.786 li
396.243 97.2485 li
cp
393.381 104.528 mo
392.943 103.786 li
399.543 103.786 li
399.105 104.528 li
395.805 98.5275 li
396.681 98.5275 li
393.381 104.528 li
f
384.453 92.2565 mo
387.693 86.2565 li
391.053 92.2565 li
384.453 92.2565 li
ef
387.743 85.2485 mo
391.889 92.7865 li
383.597 92.7865 li
387.743 85.2485 li
cp
384.881 92.5275 mo
384.443 91.7865 li
391.043 91.7865 li
390.605 92.5275 li
387.305 86.5275 li
388.181 86.5275 li
384.881 92.5275 li
f
355.773 92.2565 mo
359.013 86.2565 li
362.373 92.2565 li
355.773 92.2565 li
ef
359.043 85.2485 mo
363.189 92.7865 li
354.897 92.7865 li
359.043 85.2485 li
cp
356.181 92.5275 mo
355.743 91.7865 li
362.343 91.7865 li
361.905 92.5275 li
358.605 86.5275 li
359.481 86.5275 li
356.181 92.5275 li
f
353.373 190.896 mo
353.343 188.898 354.876 187.286 356.768 187.286 cv
358.66 187.286 360.193 188.898 360.193 190.887 cv
360.193 192.874 358.66 194.486 356.768 194.486 cv
354.876 194.486 353.343 192.874 353.373 190.896 cv
.64495 .27805 0 0 cmyk
ef
352.862 190.471 mo
352.921 190.066 li
353.017 189.674 li
354.51 185.177 360.578 186.22 360.694 190.887 cv
360.674 191.303 li
360.615 191.708 li
359.569 196.303 353.448 195.956 352.862 191.303 cv
352.842 190.887 li
352.862 190.471 li
cp
353.842 190.911 mo
353.842 190.863 li
353.86 191.23 li
353.855 191.182 li
353.907 191.54 li
353.898 191.493 li
353.983 191.839 li
353.969 191.793 li
354.084 192.124 li
354.067 192.079 li
354.211 192.395 li
354.189 192.353 li
354.361 192.65 li
354.335 192.609 li
354.532 192.887 li
354.503 192.85 li
354.724 193.105 li
354.692 193.07 li
354.935 193.303 li
354.898 193.272 li
355.162 193.479 li
355.122 193.451 li
355.404 193.631 li
355.361 193.605 li
355.661 193.758 li
355.614 193.737 li
355.929 193.859 li
355.88 193.842 li
356.208 193.931 li
356.157 193.919 li
356.497 193.975 li
356.444 193.969 li
356.794 193.988 li
356.741 193.988 li
357.092 193.969 li
357.039 193.975 li
357.379 193.919 li
357.328 193.931 li
357.656 193.842 li
357.607 193.859 li
357.922 193.737 li
357.875 193.758 li
358.175 193.605 li
358.131 193.631 li
358.414 193.451 li
358.374 193.479 li
358.638 193.272 li
358.601 193.303 li
358.844 193.07 li
358.812 193.105 li
359.033 192.85 li
359.003 192.887 li
359.201 192.609 li
359.175 192.65 li
359.347 192.353 li
359.325 192.395 li
359.469 192.079 li
359.452 192.124 li
359.567 191.793 li
359.553 191.839 li
359.638 191.493 li
359.629 191.54 li
359.68 191.182 li
359.676 191.23 li
359.694 190.863 li
359.694 190.911 li
359.676 190.543 li
359.68 190.591 li
359.629 190.233 li
359.638 190.28 li
359.553 189.935 li
359.567 189.98 li
359.452 189.65 li
359.469 189.694 li
359.325 189.379 li
359.347 189.421 li
359.175 189.124 li
359.201 189.164 li
359.003 188.887 li
359.033 188.924 li
358.812 188.668 li
358.844 188.703 li
358.601 188.471 li
358.638 188.501 li
358.374 188.294 li
358.414 188.323 li
358.131 188.143 li
358.175 188.168 li
357.875 188.016 li
357.922 188.036 li
357.607 187.915 li
357.656 187.932 li
357.328 187.842 li
357.379 187.854 li
357.039 187.799 li
357.092 187.805 li
356.741 187.786 li
356.794 187.786 li
356.444 187.805 li
356.497 187.799 li
356.157 187.854 li
356.208 187.842 li
355.88 187.932 li
355.929 187.915 li
355.614 188.036 li
355.661 188.016 li
355.361 188.168 li
355.404 188.143 li
355.122 188.323 li
355.162 188.294 li
354.898 188.501 li
354.935 188.471 li
354.692 188.703 li
354.724 188.668 li
354.503 188.924 li
354.532 188.887 li
354.335 189.164 li
354.361 189.124 li
354.189 189.421 li
354.211 189.379 li
354.067 189.694 li
354.084 189.65 li
353.969 189.98 li
353.983 189.935 li
353.898 190.28 li
353.907 190.233 li
353.855 190.591 li
353.86 190.543 li
353.842 190.911 li
.80038 .47193 .046113 0 cmyk
f
323.493 186.096 mo
323.543 184.099 325.076 182.487 326.968 182.487 cv
328.86 182.487 330.393 184.099 330.393 186.087 cv
330.393 188.074 328.86 189.686 326.968 189.686 cv
325.076 189.686 323.543 188.074 323.493 186.096 cv
.57174 .48158 .45197 0 cmyk
ef
323.062 185.671 mo
323.121 185.266 li
323.217 184.875 li
324.71 180.376 330.778 181.419 330.894 186.087 cv
330.874 186.503 li
330.815 186.908 li
329.769 191.504 323.648 191.156 323.062 186.503 cv
323.042 186.087 li
323.062 185.671 li
cp
324.042 186.111 mo
324.042 186.063 li
324.06 186.431 li
324.055 186.383 li
324.107 186.741 li
324.098 186.694 li
324.183 187.038 li
324.169 186.992 li
324.284 187.324 li
324.267 187.28 li
324.411 187.595 li
324.389 187.553 li
324.561 187.85 li
324.535 187.81 li
324.733 188.087 li
324.703 188.049 li
324.924 188.306 li
324.892 188.271 li
325.135 188.503 li
325.098 188.471 li
325.362 188.678 li
325.322 188.651 li
325.605 188.831 li
325.561 188.806 li
325.861 188.958 li
325.814 188.936 li
326.129 189.059 li
326.08 189.042 li
326.408 189.13 li
326.357 189.12 li
326.697 189.174 li
326.644 189.169 li
326.994 189.188 li
326.941 189.188 li
327.292 189.169 li
327.239 189.174 li
327.579 189.12 li
327.528 189.13 li
327.856 189.042 li
327.807 189.059 li
328.122 188.936 li
328.075 188.958 li
328.375 188.806 li
328.331 188.831 li
328.614 188.651 li
328.574 188.678 li
328.838 188.471 li
328.801 188.503 li
329.044 188.271 li
329.012 188.306 li
329.233 188.049 li
329.203 188.087 li
329.401 187.81 li
329.375 187.85 li
329.547 187.553 li
329.525 187.595 li
329.669 187.28 li
329.652 187.324 li
329.767 186.992 li
329.753 187.038 li
329.838 186.694 li
329.829 186.741 li
329.88 186.383 li
329.876 186.431 li
329.894 186.063 li
329.894 186.111 li
329.876 185.742 li
329.88 185.79 li
329.829 185.432 li
329.838 185.479 li
329.753 185.134 li
329.767 185.181 li
329.652 184.85 li
329.669 184.893 li
329.525 184.578 li
329.547 184.62 li
329.375 184.324 li
329.401 184.363 li
329.203 184.087 li
329.233 184.124 li
329.012 183.867 li
329.044 183.902 li
328.801 183.671 li
328.838 183.702 li
328.574 183.495 li
328.614 183.522 li
328.331 183.342 li
328.375 183.367 li
328.075 183.215 li
328.122 183.237 li
327.807 183.116 li
327.856 183.132 li
327.528 183.043 li
327.579 183.053 li
327.239 182.999 li
327.292 183.005 li
326.941 182.986 li
326.994 182.986 li
326.644 183.005 li
326.697 182.999 li
326.357 183.053 li
326.408 183.043 li
326.08 183.132 li
326.129 183.116 li
325.814 183.237 li
325.861 183.215 li
325.561 183.367 li
325.605 183.342 li
325.322 183.522 li
325.362 183.495 li
325.098 183.702 li
325.135 183.671 li
324.892 183.902 li
324.924 183.867 li
324.703 184.124 li
324.733 184.087 li
324.535 184.363 li
324.561 184.324 li
324.389 184.62 li
324.411 184.578 li
324.267 184.893 li
324.284 184.85 li
324.169 185.181 li
324.183 185.134 li
324.098 185.479 li
324.107 185.432 li
324.055 185.79 li
324.06 185.742 li
324.042 186.111 li
f
411.693 158.257 mo
411.743 156.299 413.276 154.686 415.168 154.686 cv
417.06 154.686 418.593 156.299 418.593 158.286 cv
418.593 160.275 417.06 161.887 415.168 161.887 cv
413.276 161.887 411.743 160.275 411.693 158.257 cv
.64495 .27805 0 0 cmyk
ef
411.262 157.87 mo
411.321 157.465 li
411.417 157.074 li
412.909 152.576 418.978 153.619 419.094 158.286 cv
419.074 158.702 li
419.015 159.107 li
417.969 163.703 411.848 163.355 411.262 158.702 cv
411.242 158.286 li
411.262 157.87 li
cp
412.242 158.311 mo
412.242 158.262 li
412.26 158.63 li
412.255 158.583 li
412.307 158.941 li
412.298 158.893 li
412.383 159.238 li
412.369 159.193 li
412.484 159.523 li
412.467 159.479 li
412.611 159.794 li
412.589 159.753 li
412.761 160.049 li
412.735 160.009 li
412.933 160.286 li
412.903 160.249 li
413.124 160.505 li
413.092 160.471 li
413.335 160.702 li
413.298 160.671 li
413.562 160.878 li
413.522 160.85 li
413.805 161.031 li
413.761 161.005 li
414.061 161.158 li
414.014 161.137 li
414.329 161.257 li
414.28 161.242 li
414.608 161.331 li
414.557 161.32 li
414.897 161.374 li
414.844 161.368 li
415.195 161.387 li
415.141 161.387 li
415.492 161.368 li
415.439 161.374 li
415.779 161.32 li
415.728 161.331 li
416.056 161.242 li
416.007 161.257 li
416.322 161.137 li
416.275 161.158 li
416.575 161.005 li
416.531 161.031 li
416.814 160.85 li
416.774 160.878 li
417.038 160.671 li
417.001 160.702 li
417.244 160.471 li
417.212 160.505 li
417.433 160.249 li
417.403 160.286 li
417.601 160.009 li
417.575 160.049 li
417.747 159.753 li
417.725 159.794 li
417.869 159.479 li
417.852 159.523 li
417.967 159.193 li
417.953 159.238 li
418.038 158.893 li
418.029 158.941 li
418.08 158.583 li
418.076 158.63 li
418.094 158.262 li
418.094 158.311 li
418.076 157.943 li
418.08 157.99 li
418.029 157.632 li
418.038 157.68 li
417.953 157.335 li
417.967 157.38 li
417.852 157.049 li
417.869 157.094 li
417.725 156.779 li
417.747 156.82 li
417.575 156.523 li
417.601 156.563 li
417.403 156.286 li
417.433 156.324 li
417.212 156.068 li
417.244 156.102 li
417.001 155.87 li
417.038 155.902 li
416.774 155.695 li
416.814 155.723 li
416.531 155.542 li
416.575 155.568 li
416.275 155.415 li
416.322 155.436 li
416.007 155.316 li
416.056 155.331 li
415.728 155.242 li
415.779 155.253 li
415.439 155.199 li
415.492 155.204 li
415.141 155.186 li
415.195 155.186 li
414.844 155.204 li
414.897 155.199 li
414.557 155.253 li
414.608 155.242 li
414.28 155.331 li
414.329 155.316 li
414.014 155.436 li
414.061 155.415 li
413.761 155.568 li
413.805 155.542 li
413.522 155.723 li
413.562 155.695 li
413.298 155.902 li
413.335 155.87 li
413.092 156.102 li
413.124 156.068 li
412.903 156.324 li
412.933 156.286 li
412.735 156.563 li
412.761 156.523 li
412.589 156.82 li
412.611 156.779 li
412.467 157.094 li
412.484 157.049 li
412.369 157.38 li
412.383 157.335 li
412.298 157.68 li
412.307 157.632 li
412.255 157.99 li
412.26 157.943 li
412.242 158.311 li
.80038 .47193 .046113 0 cmyk
f
411.693 195.936 mo
411.743 193.898 413.276 192.286 415.168 192.286 cv
417.06 192.286 418.593 193.898 418.593 195.887 cv
418.593 197.875 417.06 199.487 415.168 199.487 cv
413.276 199.487 411.743 197.875 411.693 195.936 cv
.64495 .27805 0 0 cmyk
ef
411.262 195.471 mo
411.321 195.066 li
411.417 194.674 li
412.91 190.177 418.978 191.22 419.094 195.887 cv
419.074 196.303 li
419.015 196.708 li
417.969 201.303 411.848 200.956 411.262 196.303 cv
411.242 195.887 li
411.262 195.471 li
cp
412.242 195.911 mo
412.242 195.863 li
412.26 196.23 li
412.255 196.182 li
412.307 196.54 li
412.298 196.493 li
412.383 196.839 li
412.369 196.793 li
412.484 197.124 li
412.467 197.079 li
412.611 197.395 li
412.589 197.353 li
412.761 197.65 li
412.735 197.609 li
412.933 197.887 li
412.903 197.85 li
413.124 198.105 li
413.092 198.07 li
413.335 198.303 li
413.298 198.272 li
413.562 198.479 li
413.522 198.451 li
413.805 198.631 li
413.761 198.605 li
414.061 198.758 li
414.014 198.737 li
414.329 198.858 li
414.28 198.842 li
414.608 198.931 li
414.557 198.919 li
414.897 198.975 li
414.844 198.969 li
415.195 198.988 li
415.141 198.988 li
415.492 198.969 li
415.439 198.975 li
415.779 198.919 li
415.728 198.931 li
416.056 198.842 li
416.007 198.858 li
416.322 198.737 li
416.275 198.758 li
416.575 198.605 li
416.531 198.631 li
416.814 198.451 li
416.774 198.479 li
417.038 198.272 li
417.001 198.303 li
417.244 198.07 li
417.212 198.105 li
417.433 197.85 li
417.403 197.887 li
417.601 197.609 li
417.575 197.65 li
417.747 197.353 li
417.725 197.395 li
417.869 197.079 li
417.852 197.124 li
417.967 196.793 li
417.953 196.839 li
418.038 196.493 li
418.029 196.54 li
418.08 196.182 li
418.076 196.23 li
418.094 195.863 li
418.094 195.911 li
418.076 195.543 li
418.08 195.591 li
418.029 195.233 li
418.038 195.28 li
417.953 194.935 li
417.967 194.98 li
417.852 194.65 li
417.869 194.694 li
417.725 194.379 li
417.747 194.421 li
417.575 194.124 li
417.601 194.164 li
417.403 193.887 li
417.433 193.924 li
417.212 193.668 li
417.244 193.703 li
417.001 193.471 li
417.038 193.501 li
416.774 193.294 li
416.814 193.323 li
416.531 193.143 li
416.575 193.168 li
416.275 193.016 li
416.322 193.036 li
416.007 192.915 li
416.056 192.932 li
415.728 192.842 li
415.779 192.854 li
415.439 192.799 li
415.492 192.805 li
415.141 192.786 li
415.195 192.786 li
414.844 192.805 li
414.897 192.799 li
414.557 192.854 li
414.608 192.842 li
414.28 192.932 li
414.329 192.915 li
414.014 193.036 li
414.061 193.016 li
413.761 193.168 li
413.805 193.143 li
413.522 193.323 li
413.562 193.294 li
413.298 193.501 li
413.335 193.471 li
413.092 193.703 li
413.124 193.668 li
412.903 193.924 li
412.933 193.887 li
412.735 194.164 li
412.761 194.124 li
412.589 194.421 li
412.611 194.379 li
412.467 194.694 li
412.484 194.65 li
412.369 194.98 li
412.383 194.935 li
412.298 195.28 li
412.307 195.233 li
412.255 195.591 li
412.26 195.543 li
412.242 195.911 li
.80038 .47193 .046113 0 cmyk
f
443.493 110.497 mo
443.443 108.499 444.976 106.887 446.868 106.887 cv
448.76 106.887 450.293 108.499 450.293 110.487 cv
450.293 112.475 448.76 114.087 446.868 114.087 cv
444.976 114.087 443.443 112.475 443.493 110.497 cv
.64495 .27805 0 0 cmyk
ef
442.962 110.07 mo
443.021 109.665 li
443.117 109.274 li
444.61 104.776 450.678 105.819 450.794 110.486 cv
450.774 110.902 li
450.715 111.307 li
449.669 115.904 443.548 115.555 442.962 110.902 cv
442.942 110.486 li
442.962 110.07 li
cp
443.942 110.51 mo
443.942 110.462 li
443.96 110.83 li
443.956 110.783 li
444.007 111.141 li
443.998 111.093 li
444.083 111.438 li
444.069 111.393 li
444.184 111.723 li
444.167 111.679 li
444.311 111.994 li
444.289 111.952 li
444.461 112.249 li
444.435 112.21 li
444.633 112.486 li
444.603 112.449 li
444.824 112.705 li
444.792 112.671 li
445.035 112.902 li
444.998 112.871 li
445.262 113.078 li
445.222 113.05 li
445.505 113.23 li
445.461 113.205 li
445.761 113.357 li
445.714 113.337 li
446.029 113.457 li
445.98 113.441 li
446.308 113.531 li
446.257 113.52 li
446.597 113.574 li
446.544 113.568 li
446.894 113.587 li
446.842 113.587 li
447.192 113.568 li
447.139 113.574 li
447.479 113.52 li
447.428 113.531 li
447.756 113.441 li
447.707 113.457 li
448.022 113.337 li
447.975 113.357 li
448.275 113.205 li
448.231 113.23 li
448.514 113.05 li
448.474 113.078 li
448.738 112.871 li
448.701 112.902 li
448.944 112.671 li
448.912 112.705 li
449.133 112.449 li
449.103 112.486 li
449.301 112.21 li
449.275 112.249 li
449.447 111.952 li
449.425 111.994 li
449.569 111.679 li
449.552 111.723 li
449.667 111.393 li
449.653 111.438 li
449.738 111.093 li
449.729 111.141 li
449.781 110.783 li
449.776 110.83 li
449.794 110.462 li
449.794 110.51 li
449.776 110.143 li
449.781 110.19 li
449.729 109.832 li
449.738 109.88 li
449.653 109.535 li
449.667 109.58 li
449.552 109.249 li
449.569 109.294 li
449.425 108.979 li
449.447 109.02 li
449.275 108.723 li
449.301 108.763 li
449.103 108.486 li
449.133 108.523 li
448.912 108.268 li
448.944 108.302 li
448.701 108.07 li
448.738 108.102 li
448.474 107.895 li
448.514 107.923 li
448.231 107.742 li
448.275 107.768 li
447.975 107.615 li
448.022 107.636 li
447.707 107.516 li
447.756 107.531 li
447.428 107.442 li
447.479 107.453 li
447.139 107.398 li
447.192 107.404 li
446.842 107.385 li
446.894 107.385 li
446.544 107.404 li
446.597 107.398 li
446.257 107.453 li
446.308 107.442 li
445.98 107.531 li
446.029 107.516 li
445.714 107.636 li
445.761 107.615 li
445.461 107.768 li
445.505 107.742 li
445.222 107.923 li
445.262 107.895 li
444.998 108.102 li
445.035 108.07 li
444.792 108.302 li
444.824 108.268 li
444.603 108.523 li
444.633 108.486 li
444.435 108.763 li
444.461 108.723 li
444.289 109.02 li
444.311 108.979 li
444.167 109.294 li
444.184 109.249 li
444.069 109.58 li
444.083 109.535 li
443.998 109.88 li
444.007 109.832 li
443.956 110.19 li
443.96 110.143 li
443.942 110.51 li
.80038 .47193 .046113 0 cmyk
f
454.653 156.697 mo
454.693 154.749 456.226 153.137 458.118 153.137 cv
460.01 153.137 461.543 154.749 461.543 156.736 cv
461.543 158.725 460.01 160.337 458.118 160.337 cv
456.226 160.337 454.693 158.725 454.653 156.697 cv
.64495 .27805 0 0 cmyk
ef
454.212 156.32 mo
454.271 155.915 li
454.367 155.524 li
455.86 151.026 461.928 152.069 462.044 156.736 cv
462.024 157.152 li
461.965 157.557 li
460.919 162.154 454.798 161.805 454.212 157.152 cv
454.192 156.736 li
454.212 156.32 li
cp
455.192 156.76 mo
455.192 156.712 li
455.21 157.08 li
455.206 157.033 li
455.257 157.391 li
455.248 157.343 li
455.333 157.688 li
455.319 157.643 li
455.434 157.973 li
455.417 157.929 li
455.561 158.244 li
455.539 158.202 li
455.711 158.499 li
455.685 158.46 li
455.883 158.736 li
455.853 158.699 li
456.074 158.955 li
456.042 158.921 li
456.285 159.152 li
456.248 159.121 li
456.512 159.328 li
456.472 159.3 li
456.755 159.48 li
456.711 159.455 li
457.011 159.607 li
456.964 159.587 li
457.279 159.707 li
457.23 159.691 li
457.558 159.781 li
457.507 159.77 li
457.847 159.824 li
457.794 159.818 li
458.144 159.837 li
458.092 159.837 li
458.442 159.818 li
458.389 159.824 li
458.729 159.77 li
458.678 159.781 li
459.006 159.691 li
458.957 159.707 li
459.272 159.587 li
459.225 159.607 li
459.525 159.455 li
459.481 159.48 li
459.764 159.3 li
459.724 159.328 li
459.988 159.121 li
459.951 159.152 li
460.194 158.921 li
460.162 158.955 li
460.383 158.699 li
460.353 158.736 li
460.551 158.46 li
460.525 158.499 li
460.697 158.202 li
460.675 158.244 li
460.819 157.929 li
460.802 157.973 li
460.917 157.643 li
460.903 157.688 li
460.988 157.343 li
460.979 157.391 li
461.031 157.033 li
461.026 157.08 li
461.044 156.712 li
461.044 156.76 li
461.026 156.393 li
461.031 156.44 li
460.979 156.082 li
460.988 156.13 li
460.903 155.785 li
460.917 155.83 li
460.802 155.499 li
460.819 155.544 li
460.675 155.229 li
460.697 155.27 li
460.525 154.973 li
460.551 155.013 li
460.353 154.736 li
460.383 154.773 li
460.162 154.518 li
460.194 154.552 li
459.951 154.32 li
459.988 154.352 li
459.724 154.145 li
459.764 154.173 li
459.481 153.992 li
459.525 154.018 li
459.225 153.865 li
459.272 153.886 li
458.957 153.764 li
459.006 153.781 li
458.678 153.692 li
458.729 153.703 li
458.389 153.648 li
458.442 153.654 li
458.092 153.635 li
458.144 153.635 li
457.794 153.654 li
457.847 153.648 li
457.507 153.703 li
457.558 153.692 li
457.23 153.781 li
457.279 153.764 li
456.964 153.886 li
457.011 153.865 li
456.711 154.018 li
456.755 153.992 li
456.472 154.173 li
456.512 154.145 li
456.248 154.352 li
456.285 154.32 li
456.042 154.552 li
456.074 154.518 li
455.853 154.773 li
455.883 154.736 li
455.685 155.013 li
455.711 154.973 li
455.539 155.27 li
455.561 155.229 li
455.417 155.544 li
455.434 155.499 li
455.319 155.83 li
455.333 155.785 li
455.248 156.13 li
455.257 156.082 li
455.206 156.44 li
455.21 156.393 li
455.192 156.76 li
.80038 .47193 .046113 0 cmyk
f
377.613 170.257 mo
377.593 168.249 379.126 166.637 381.018 166.637 cv
382.91 166.637 384.443 168.249 384.443 170.236 cv
384.443 172.225 382.91 173.837 381.018 173.837 cv
379.126 173.837 377.593 172.225 377.613 170.257 cv
.64495 .27805 0 0 cmyk
ef
377.112 169.82 mo
377.171 169.415 li
377.267 169.024 li
378.76 164.526 384.828 165.569 384.944 170.236 cv
384.924 170.652 li
384.865 171.057 li
383.819 175.654 377.698 175.305 377.112 170.652 cv
377.092 170.236 li
377.112 169.82 li
cp
378.092 170.26 mo
378.092 170.212 li
378.11 170.58 li
378.105 170.533 li
378.157 170.891 li
378.148 170.843 li
378.233 171.188 li
378.219 171.143 li
378.334 171.473 li
378.317 171.429 li
378.461 171.744 li
378.439 171.702 li
378.611 171.999 li
378.585 171.96 li
378.782 172.236 li
378.753 172.199 li
378.974 172.455 li
378.942 172.421 li
379.185 172.652 li
379.148 172.621 li
379.412 172.828 li
379.372 172.8 li
379.654 172.98 li
379.611 172.955 li
379.911 173.107 li
379.864 173.087 li
380.179 173.207 li
380.13 173.191 li
380.458 173.281 li
380.407 173.27 li
380.747 173.324 li
380.694 173.318 li
381.044 173.337 li
380.991 173.337 li
381.342 173.318 li
381.289 173.324 li
381.629 173.27 li
381.578 173.281 li
381.906 173.191 li
381.857 173.207 li
382.172 173.087 li
382.125 173.107 li
382.425 172.955 li
382.381 172.98 li
382.664 172.8 li
382.624 172.828 li
382.888 172.621 li
382.851 172.652 li
383.094 172.421 li
383.062 172.455 li
383.283 172.199 li
383.253 172.236 li
383.451 171.96 li
383.425 171.999 li
383.597 171.702 li
383.575 171.744 li
383.719 171.429 li
383.702 171.473 li
383.817 171.143 li
383.803 171.188 li
383.888 170.843 li
383.879 170.891 li
383.93 170.533 li
383.926 170.58 li
383.944 170.212 li
383.944 170.26 li
383.926 169.893 li
383.93 169.94 li
383.879 169.582 li
383.888 169.63 li
383.803 169.285 li
383.817 169.33 li
383.702 168.999 li
383.719 169.044 li
383.575 168.729 li
383.597 168.77 li
383.425 168.473 li
383.451 168.513 li
383.253 168.236 li
383.283 168.273 li
383.062 168.018 li
383.094 168.052 li
382.851 167.82 li
382.888 167.852 li
382.624 167.645 li
382.664 167.673 li
382.381 167.492 li
382.425 167.518 li
382.125 167.365 li
382.172 167.386 li
381.857 167.266 li
381.906 167.281 li
381.578 167.192 li
381.629 167.203 li
381.289 167.148 li
381.342 167.154 li
380.991 167.135 li
381.044 167.135 li
380.694 167.154 li
380.747 167.148 li
380.407 167.203 li
380.458 167.192 li
380.13 167.281 li
380.179 167.266 li
379.864 167.386 li
379.911 167.365 li
379.611 167.518 li
379.654 167.492 li
379.372 167.673 li
379.412 167.645 li
379.148 167.852 li
379.185 167.82 li
378.942 168.052 li
378.974 168.018 li
378.753 168.273 li
378.782 168.236 li
378.585 168.513 li
378.611 168.473 li
378.439 168.77 li
378.461 168.729 li
378.317 169.044 li
378.334 168.999 li
378.219 169.33 li
378.233 169.285 li
378.148 169.63 li
378.157 169.582 li
378.105 169.94 li
378.11 169.893 li
378.092 170.26 li
.80038 .47193 .046113 0 cmyk
f
398.853 217.777 mo
398.793 215.799 400.326 214.187 402.218 214.187 cv
404.11 214.187 405.643 215.799 405.643 217.786 cv
405.643 219.775 404.11 221.387 402.218 221.387 cv
400.326 221.387 398.793 219.775 398.853 217.777 cv
.64495 .27805 0 0 cmyk
ef
398.312 217.37 mo
398.371 216.965 li
398.467 216.574 li
399.96 212.077 406.028 213.12 406.144 217.786 cv
406.124 218.202 li
406.065 218.607 li
405.019 223.203 398.898 222.855 398.312 218.202 cv
398.292 217.786 li
398.312 217.37 li
cp
399.292 217.811 mo
399.292 217.762 li
399.31 218.13 li
399.305 218.082 li
399.357 218.44 li
399.348 218.393 li
399.433 218.738 li
399.419 218.693 li
399.534 219.023 li
399.517 218.979 li
399.661 219.294 li
399.639 219.253 li
399.811 219.549 li
399.785 219.509 li
399.983 219.786 li
399.953 219.749 li
400.174 220.005 li
400.142 219.97 li
400.385 220.202 li
400.348 220.172 li
400.612 220.379 li
400.572 220.35 li
400.855 220.531 li
400.811 220.505 li
401.111 220.658 li
401.064 220.637 li
401.379 220.758 li
401.33 220.742 li
401.658 220.831 li
401.607 220.819 li
401.947 220.874 li
401.894 220.868 li
402.244 220.887 li
402.191 220.887 li
402.542 220.868 li
402.489 220.874 li
402.829 220.819 li
402.778 220.831 li
403.106 220.742 li
403.057 220.758 li
403.372 220.637 li
403.325 220.658 li
403.625 220.505 li
403.581 220.531 li
403.864 220.35 li
403.824 220.379 li
404.088 220.172 li
404.051 220.202 li
404.294 219.97 li
404.262 220.005 li
404.483 219.749 li
404.453 219.786 li
404.651 219.509 li
404.625 219.549 li
404.797 219.253 li
404.775 219.294 li
404.919 218.979 li
404.902 219.023 li
405.017 218.693 li
405.003 218.738 li
405.088 218.393 li
405.079 218.44 li
405.13 218.082 li
405.126 218.13 li
405.144 217.762 li
405.144 217.811 li
405.126 217.443 li
405.13 217.491 li
405.079 217.133 li
405.088 217.18 li
405.003 216.835 li
405.017 216.88 li
404.902 216.549 li
404.919 216.594 li
404.775 216.279 li
404.797 216.32 li
404.625 216.023 li
404.651 216.064 li
404.453 215.786 li
404.483 215.824 li
404.262 215.568 li
404.294 215.603 li
404.051 215.37 li
404.088 215.401 li
403.824 215.194 li
403.864 215.223 li
403.581 215.042 li
403.625 215.068 li
403.325 214.915 li
403.372 214.936 li
403.057 214.814 li
403.106 214.831 li
402.778 214.742 li
402.829 214.754 li
402.489 214.699 li
402.542 214.704 li
402.191 214.686 li
402.244 214.686 li
401.894 214.704 li
401.947 214.699 li
401.607 214.754 li
401.658 214.742 li
401.33 214.831 li
401.379 214.814 li
401.064 214.936 li
401.111 214.915 li
400.811 215.068 li
400.855 215.042 li
400.572 215.223 li
400.612 215.194 li
400.348 215.401 li
400.385 215.37 li
400.142 215.603 li
400.174 215.568 li
399.953 215.824 li
399.983 215.786 li
399.785 216.064 li
399.811 216.023 li
399.639 216.32 li
399.661 216.279 li
399.517 216.594 li
399.534 216.549 li
399.419 216.88 li
399.433 216.835 li
399.348 217.18 li
399.357 217.133 li
399.305 217.491 li
399.31 217.443 li
399.292 217.811 li
.80038 .47193 .046113 0 cmyk
f
348.693 217.777 mo
348.643 215.799 350.176 214.187 352.068 214.187 cv
353.96 214.187 355.493 215.799 355.493 217.786 cv
355.493 219.775 353.96 221.387 352.068 221.387 cv
350.176 221.387 348.643 219.775 348.693 217.777 cv
.64495 .27805 0 0 cmyk
ef
348.162 217.37 mo
348.221 216.965 li
348.317 216.574 li
349.81 212.077 355.878 213.12 355.994 217.786 cv
355.974 218.202 li
355.915 218.607 li
354.869 223.203 348.748 222.855 348.162 218.202 cv
348.142 217.786 li
348.162 217.37 li
cp
349.142 217.811 mo
349.142 217.762 li
349.16 218.13 li
349.155 218.082 li
349.207 218.44 li
349.198 218.393 li
349.283 218.738 li
349.269 218.693 li
349.384 219.023 li
349.367 218.979 li
349.511 219.294 li
349.489 219.253 li
349.661 219.549 li
349.635 219.509 li
349.833 219.786 li
349.803 219.749 li
350.024 220.005 li
349.992 219.97 li
350.235 220.202 li
350.198 220.172 li
350.462 220.379 li
350.422 220.35 li
350.705 220.531 li
350.661 220.505 li
350.961 220.658 li
350.914 220.637 li
351.229 220.758 li
351.18 220.742 li
351.508 220.831 li
351.457 220.819 li
351.797 220.874 li
351.744 220.868 li
352.095 220.887 li
352.041 220.887 li
352.392 220.868 li
352.339 220.874 li
352.679 220.819 li
352.628 220.831 li
352.956 220.742 li
352.907 220.758 li
353.222 220.637 li
353.175 220.658 li
353.475 220.505 li
353.431 220.531 li
353.714 220.35 li
353.674 220.379 li
353.938 220.172 li
353.901 220.202 li
354.144 219.97 li
354.112 220.005 li
354.333 219.749 li
354.303 219.786 li
354.501 219.509 li
354.475 219.549 li
354.647 219.253 li
354.625 219.294 li
354.769 218.979 li
354.752 219.023 li
354.867 218.693 li
354.853 218.738 li
354.938 218.393 li
354.929 218.44 li
354.98 218.082 li
354.976 218.13 li
354.994 217.762 li
354.994 217.811 li
354.976 217.443 li
354.98 217.491 li
354.929 217.133 li
354.938 217.18 li
354.853 216.835 li
354.867 216.88 li
354.752 216.549 li
354.769 216.594 li
354.625 216.279 li
354.647 216.32 li
354.475 216.023 li
354.501 216.064 li
354.303 215.786 li
354.333 215.824 li
354.112 215.568 li
354.144 215.603 li
353.901 215.37 li
353.938 215.401 li
353.674 215.194 li
353.714 215.223 li
353.431 215.042 li
353.475 215.068 li
353.175 214.915 li
353.222 214.936 li
352.907 214.814 li
352.956 214.831 li
352.628 214.742 li
352.679 214.754 li
352.339 214.699 li
352.392 214.704 li
352.041 214.686 li
352.095 214.686 li
351.744 214.704 li
351.797 214.699 li
351.457 214.754 li
351.508 214.742 li
351.18 214.831 li
351.229 214.814 li
350.914 214.936 li
350.961 214.915 li
350.661 215.068 li
350.705 215.042 li
350.422 215.223 li
350.462 215.194 li
350.198 215.401 li
350.235 215.37 li
349.992 215.603 li
350.024 215.568 li
349.803 215.824 li
349.833 215.786 li
349.635 216.064 li
349.661 216.023 li
349.489 216.32 li
349.511 216.279 li
349.367 216.594 li
349.384 216.549 li
349.269 216.88 li
349.283 216.835 li
349.198 217.18 li
349.207 217.133 li
349.155 217.491 li
349.16 217.443 li
349.142 217.811 li
.80038 .47193 .046113 0 cmyk
f
436.653 201.816 mo
436.593 199.848 438.126 198.236 440.018 198.236 cv
441.91 198.236 443.443 199.848 443.443 201.836 cv
443.443 203.824 441.91 205.436 440.018 205.436 cv
438.126 205.436 436.593 203.824 436.653 201.816 cv
.64495 .27805 0 0 cmyk
ef
436.112 201.421 mo
436.171 201.016 li
436.267 200.625 li
437.76 196.126 443.828 197.169 443.944 201.837 cv
443.924 202.253 li
443.865 202.658 li
442.819 207.254 436.698 206.906 436.112 202.253 cv
436.092 201.837 li
436.112 201.421 li
cp
437.092 201.861 mo
437.092 201.813 li
437.11 202.181 li
437.105 202.133 li
437.157 202.491 li
437.148 202.444 li
437.233 202.788 li
437.219 202.742 li
437.334 203.074 li
437.317 203.03 li
437.461 203.345 li
437.439 203.303 li
437.611 203.6 li
437.585 203.56 li
437.782 203.837 li
437.753 203.799 li
437.974 204.056 li
437.941 204.021 li
438.185 204.253 li
438.148 204.221 li
438.412 204.428 li
438.372 204.401 li
438.654 204.581 li
438.611 204.556 li
438.911 204.708 li
438.864 204.686 li
439.179 204.809 li
439.13 204.792 li
439.458 204.88 li
439.407 204.87 li
439.747 204.924 li
439.694 204.919 li
440.044 204.938 li
439.991 204.938 li
440.342 204.919 li
440.289 204.924 li
440.629 204.87 li
440.578 204.88 li
440.906 204.792 li
440.857 204.809 li
441.172 204.686 li
441.125 204.708 li
441.425 204.556 li
441.381 204.581 li
441.664 204.401 li
441.624 204.428 li
441.888 204.221 li
441.851 204.253 li
442.094 204.021 li
442.062 204.056 li
442.283 203.799 li
442.253 203.837 li
442.451 203.56 li
442.425 203.6 li
442.597 203.303 li
442.575 203.345 li
442.719 203.03 li
442.702 203.074 li
442.817 202.742 li
442.803 202.788 li
442.888 202.444 li
442.879 202.491 li
442.931 202.133 li
442.926 202.181 li
442.944 201.813 li
442.944 201.861 li
442.926 201.492 li
442.931 201.54 li
442.879 201.182 li
442.888 201.229 li
442.803 200.884 li
442.817 200.931 li
442.702 200.6 li
442.719 200.643 li
442.575 200.328 li
442.597 200.37 li
442.425 200.074 li
442.451 200.113 li
442.253 199.837 li
442.283 199.874 li
442.062 199.617 li
442.094 199.652 li
441.851 199.421 li
441.888 199.452 li
441.624 199.245 li
441.664 199.272 li
441.381 199.092 li
441.425 199.117 li
441.125 198.965 li
441.172 198.987 li
440.857 198.866 li
440.906 198.882 li
440.578 198.793 li
440.629 198.803 li
440.289 198.749 li
440.342 198.755 li
439.991 198.736 li
440.044 198.736 li
439.694 198.755 li
439.747 198.749 li
439.407 198.803 li
439.458 198.793 li
439.13 198.882 li
439.179 198.866 li
438.864 198.987 li
438.911 198.965 li
438.611 199.117 li
438.654 199.092 li
438.372 199.272 li
438.412 199.245 li
438.148 199.452 li
438.185 199.421 li
437.941 199.652 li
437.974 199.617 li
437.753 199.874 li
437.782 199.837 li
437.585 200.113 li
437.611 200.074 li
437.439 200.37 li
437.461 200.328 li
437.317 200.643 li
437.334 200.6 li
437.219 200.931 li
437.233 200.884 li
437.148 201.229 li
437.157 201.182 li
437.105 201.54 li
437.11 201.492 li
437.092 201.861 li
.80038 .47193 .046113 0 cmyk
f
282.333 116.257 mo
290.373 116.257 li
290.373 106.536 li
282.333 106.536 li
cp
0 .30243 .90338 0 cmyk
f
281.843 105.986 mo
290.893 105.986 li
290.893 116.786 li
281.843 116.786 li
cp
290.893 105.986 mo
cp
282.343 106.986 mo
282.843 106.486 li
282.843 116.286 li
282.343 115.786 li
290.393 115.786 li
289.893 116.286 li
289.893 106.486 li
290.393 106.986 li
282.343 106.986 li
f
320.373 92.2565 mo
328.413 92.2565 li
328.413 82.5365 li
320.373 82.5365 li
cp
.57174 .48158 .45197 0 cmyk
f
319.843 81.9865 mo
328.893 81.9865 li
328.893 92.7865 li
319.843 92.7865 li
cp
328.893 81.9865 mo
cp
320.343 82.9865 mo
320.843 82.4865 li
320.843 92.2865 li
320.343 91.7865 li
328.393 91.7865 li
327.893 92.2865 li
327.893 82.4865 li
328.393 82.9865 li
320.343 82.9865 li
f
322.293 164.497 mo
330.453 164.497 li
330.453 154.657 li
322.293 154.657 li
cp
0 .30243 .90338 0 cmyk
f
321.843 154.187 mo
330.893 154.187 li
330.893 164.987 li
321.843 164.987 li
cp
330.893 154.187 mo
cp
322.343 155.187 mo
322.843 154.687 li
322.843 164.487 li
322.343 163.987 li
330.393 163.987 li
329.893 164.487 li
329.893 154.687 li
330.393 155.187 li
322.343 155.187 li
f
275.733 191.137 mo
283.773 191.137 li
283.773 181.417 li
275.733 181.417 li
cp
f
275.193 180.887 mo
284.243 180.887 li
284.243 191.686 li
275.193 191.686 li
cp
284.243 180.887 mo
cp
275.693 181.887 mo
276.193 181.387 li
276.193 191.186 li
275.693 190.686 li
283.743 190.686 li
283.243 191.186 li
283.243 181.387 li
283.743 181.887 li
275.693 181.887 li
f
290.973 197.137 mo
299.013 197.137 li
299.013 187.296 li
290.973 187.296 li
cp
f
290.443 186.786 mo
299.493 186.786 li
299.493 197.587 li
290.443 197.587 li
cp
299.493 186.786 mo
cp
290.943 187.786 mo
291.443 187.286 li
291.443 197.087 li
290.943 196.587 li
298.993 196.587 li
298.493 197.087 li
298.493 187.286 li
298.993 187.786 li
290.943 187.786 li
f
314.253 140.376 mo
322.293 140.376 li
322.293 130.536 li
314.253 130.536 li
cp
f
313.793 130.036 mo
322.843 130.036 li
322.843 140.837 li
313.793 140.837 li
cp
322.843 130.036 mo
cp
314.293 131.036 mo
314.793 130.536 li
314.793 140.337 li
314.293 139.837 li
322.343 139.837 li
321.843 140.337 li
321.843 130.536 li
322.343 131.036 li
314.293 131.036 li
f
290.373 171.697 mo
298.413 171.697 li
298.413 161.857 li
290.373 161.857 li
cp
f
289.893 161.387 mo
298.943 161.387 li
298.943 172.187 li
289.893 172.187 li
cp
298.943 161.387 mo
cp
290.393 162.387 mo
290.893 161.887 li
290.893 171.687 li
290.393 171.187 li
298.443 171.187 li
297.943 171.687 li
297.943 161.887 li
298.443 162.387 li
290.393 162.387 li
f
308.493 116.257 mo
316.533 116.257 li
316.533 106.536 li
308.493 106.536 li
cp
f
307.943 105.986 mo
316.993 105.986 li
316.993 116.786 li
307.943 116.786 li
cp
316.993 105.986 mo
cp
308.443 106.986 mo
308.943 106.486 li
308.943 116.286 li
308.443 115.786 li
316.493 115.786 li
315.993 116.286 li
315.993 106.486 li
316.493 106.986 li
308.443 106.986 li
f
282.333 153.096 mo
290.373 153.096 li
290.373 143.376 li
282.333 143.376 li
cp
f
281.843 142.837 mo
290.893 142.837 li
290.893 153.637 li
281.843 153.637 li
cp
290.893 142.837 mo
cp
282.343 143.837 mo
282.843 143.337 li
282.843 153.137 li
282.343 152.637 li
290.393 152.637 li
289.893 153.137 li
289.893 143.337 li
290.393 143.837 li
282.343 143.837 li
f
0 .9617 .90481 0 cmyk
AFOLOK+STHupo [12 0 0 -12 0 0 ]msf
439.593 112.437 mo
(\002A)sh
AFOLOK+STHupo [12 0 0 -12 0 0 ]msf
439.593 112.437 mo
(\002A) false chp
@
AFOLOK+STHupo [12 0 0 -12 0 0 ]msf
335.543 86.5369 mo
(\002A)sh
AFOLOK+STHupo [12 0 0 -12 0 0 ]msf
335.543 86.5369 mo
(\002A) false chp
@
AFOLOK+STHupo [12 0 0 -12 0 0 ]msf
294.993 193.437 mo
(\002A)sh
AFOLOK+STHupo [12 0 0 -12 0 0 ]msf
294.993 193.437 mo
(\002A) false chp
@
591.093 89.2565 mo
594.333 83.2565 li
597.693 89.2565 li
591.093 89.2565 li
.7518 0 .87069 0 cmyk
ef
594.343 82.1985 mo
598.489 89.7365 li
590.197 89.7365 li
594.343 82.1985 li
cp
591.481 89.4775 mo
591.043 88.7365 li
597.643 88.7365 li
597.205 89.4775 li
593.905 83.4775 li
594.781 83.4775 li
591.481 89.4775 li
f
657.813 116.137 mo
661.173 110.137 li
664.413 116.137 li
657.813 116.137 li
.57174 .48158 .45197 0 cmyk
ef
661.143 109.098 mo
665.289 116.636 li
656.997 116.636 li
661.143 109.098 li
cp
658.281 116.378 mo
657.843 115.636 li
664.443 115.636 li
664.005 116.378 li
660.705 110.378 li
661.581 110.378 li
658.281 116.378 li
f
605.853 119.257 mo
609.093 113.257 li
612.453 119.257 li
605.853 119.257 li
.7518 0 .87069 0 cmyk
ef
609.093 112.199 mo
613.239 119.736 li
604.947 119.736 li
609.093 112.199 li
cp
606.231 119.478 mo
605.793 118.736 li
612.393 118.736 li
611.955 119.478 li
608.655 113.478 li
609.531 113.478 li
606.231 119.478 li
f
621.093 122.257 mo
624.453 116.257 li
627.693 122.257 li
621.093 122.257 li
ef
624.443 115.249 mo
628.589 122.786 li
620.297 122.786 li
624.443 115.249 li
cp
621.581 122.528 mo
621.143 121.786 li
627.743 121.786 li
627.305 122.528 li
624.005 116.528 li
624.881 116.528 li
621.581 122.528 li
f
603.693 138.697 mo
607.053 132.697 li
610.293 138.697 li
603.693 138.697 li
ef
607.043 131.699 mo
611.189 139.236 li
602.897 139.236 li
607.043 131.699 li
cp
604.181 138.978 mo
603.743 138.236 li
610.343 138.236 li
609.905 138.978 li
606.605 132.978 li
607.481 132.978 li
604.181 138.978 li
f
614.493 104.257 mo
617.853 98.2565 li
621.093 104.257 li
614.493 104.257 li
ef
617.843 97.2485 mo
621.989 104.786 li
613.697 104.786 li
617.843 97.2485 li
cp
614.981 104.528 mo
614.543 103.786 li
621.143 103.786 li
620.705 104.528 li
617.405 98.5275 li
618.281 98.5275 li
614.981 104.528 li
f
645.093 104.257 mo
648.453 98.2565 li
651.693 104.257 li
645.093 104.257 li
ef
648.443 97.2485 mo
652.589 104.786 li
644.297 104.786 li
648.443 97.2485 li
cp
645.581 104.528 mo
645.143 103.786 li
651.743 103.786 li
651.305 104.528 li
648.005 98.5275 li
648.881 98.5275 li
645.581 104.528 li
f
636.693 92.2565 mo
639.933 86.2565 li
643.293 92.2565 li
636.693 92.2565 li
ef
639.943 85.2485 mo
644.089 92.7865 li
635.797 92.7865 li
639.943 85.2485 li
cp
637.081 92.5275 mo
636.643 91.7865 li
643.243 91.7865 li
642.805 92.5275 li
639.505 86.5275 li
640.381 86.5275 li
637.081 92.5275 li
f
607.893 92.2565 mo
611.253 86.2565 li
614.493 92.2565 li
607.893 92.2565 li
ef
611.243 85.2485 mo
615.389 92.7865 li
607.097 92.7865 li
611.243 85.2485 li
cp
608.381 92.5275 mo
607.943 91.7865 li
614.543 91.7865 li
614.105 92.5275 li
610.805 86.5275 li
611.681 86.5275 li
608.381 92.5275 li
f
605.493 190.896 mo
605.543 188.898 607.076 187.286 608.968 187.286 cv
610.86 187.286 612.393 188.898 612.393 190.887 cv
612.393 192.874 610.86 194.486 608.968 194.486 cv
607.076 194.486 605.543 192.874 605.493 190.896 cv
.64495 .27805 0 0 cmyk
ef
605.062 190.471 mo
605.121 190.066 li
605.217 189.674 li
606.71 185.177 612.778 186.22 612.894 190.887 cv
612.874 191.303 li
612.815 191.708 li
611.769 196.303 605.648 195.956 605.062 191.303 cv
605.042 190.887 li
605.062 190.471 li
cp
606.042 190.911 mo
606.042 190.863 li
606.06 191.23 li
606.055 191.182 li
606.107 191.54 li
606.098 191.493 li
606.183 191.839 li
606.169 191.793 li
606.284 192.124 li
606.267 192.079 li
606.411 192.395 li
606.389 192.353 li
606.561 192.65 li
606.535 192.609 li
606.733 192.887 li
606.703 192.85 li
606.924 193.105 li
606.891 193.07 li
607.135 193.303 li
607.098 193.272 li
607.362 193.479 li
607.322 193.451 li
607.605 193.631 li
607.561 193.605 li
607.861 193.758 li
607.814 193.737 li
608.129 193.859 li
608.08 193.842 li
608.408 193.931 li
608.357 193.919 li
608.697 193.975 li
608.644 193.969 li
608.994 193.988 li
608.941 193.988 li
609.292 193.969 li
609.239 193.975 li
609.579 193.919 li
609.528 193.931 li
609.856 193.842 li
609.807 193.859 li
610.122 193.737 li
610.075 193.758 li
610.375 193.605 li
610.331 193.631 li
610.614 193.451 li
610.574 193.479 li
610.838 193.272 li
610.801 193.303 li
611.044 193.07 li
611.012 193.105 li
611.233 192.85 li
611.203 192.887 li
611.401 192.609 li
611.375 192.65 li
611.547 192.353 li
611.525 192.395 li
611.669 192.079 li
611.652 192.124 li
611.767 191.793 li
611.753 191.839 li
611.838 191.493 li
611.829 191.54 li
611.881 191.182 li
611.876 191.23 li
611.894 190.863 li
611.894 190.911 li
611.876 190.543 li
611.881 190.591 li
611.829 190.233 li
611.838 190.28 li
611.753 189.935 li
611.767 189.98 li
611.652 189.65 li
611.669 189.694 li
611.525 189.379 li
611.547 189.421 li
611.375 189.124 li
611.401 189.164 li
611.203 188.887 li
611.233 188.924 li
611.012 188.668 li
611.044 188.703 li
610.801 188.471 li
610.838 188.501 li
610.574 188.294 li
610.614 188.323 li
610.331 188.143 li
610.375 188.168 li
610.075 188.016 li
610.122 188.036 li
609.807 187.915 li
609.856 187.932 li
609.528 187.842 li
609.579 187.854 li
609.239 187.799 li
609.292 187.805 li
608.941 187.786 li
608.994 187.786 li
608.644 187.805 li
608.697 187.799 li
608.357 187.854 li
608.408 187.842 li
608.08 187.932 li
608.129 187.915 li
607.814 188.036 li
607.861 188.016 li
607.561 188.168 li
607.605 188.143 li
607.322 188.323 li
607.362 188.294 li
607.098 188.501 li
607.135 188.471 li
606.891 188.703 li
606.924 188.668 li
606.703 188.924 li
606.733 188.887 li
606.535 189.164 li
606.561 189.124 li
606.389 189.421 li
606.411 189.379 li
606.267 189.694 li
606.284 189.65 li
606.169 189.98 li
606.183 189.935 li
606.098 190.28 li
606.107 190.233 li
606.055 190.591 li
606.06 190.543 li
606.042 190.911 li
.80038 .47193 .046113 0 cmyk
f
580.773 190.297 mo
580.793 188.349 582.326 186.737 584.218 186.737 cv
586.11 186.737 587.643 188.349 587.643 190.337 cv
587.643 192.324 586.11 193.936 584.218 193.936 cv
582.326 193.936 580.793 192.324 580.773 190.297 cv
.57174 .48158 .45197 0 cmyk
ef
580.312 189.921 mo
580.371 189.516 li
580.467 189.125 li
581.96 184.626 588.028 185.669 588.144 190.337 cv
588.124 190.753 li
588.065 191.158 li
587.019 195.754 580.898 195.406 580.312 190.753 cv
580.292 190.337 li
580.312 189.921 li
cp
581.292 190.361 mo
581.292 190.313 li
581.31 190.681 li
581.305 190.633 li
581.357 190.991 li
581.348 190.944 li
581.433 191.288 li
581.419 191.242 li
581.534 191.574 li
581.517 191.53 li
581.661 191.845 li
581.639 191.803 li
581.811 192.1 li
581.785 192.06 li
581.983 192.337 li
581.953 192.299 li
582.174 192.556 li
582.141 192.521 li
582.385 192.753 li
582.348 192.721 li
582.612 192.928 li
582.572 192.901 li
582.855 193.081 li
582.811 193.056 li
583.111 193.208 li
583.064 193.186 li
583.379 193.307 li
583.33 193.292 li
583.658 193.38 li
583.607 193.37 li
583.947 193.424 li
583.894 193.419 li
584.244 193.438 li
584.191 193.438 li
584.542 193.419 li
584.489 193.424 li
584.829 193.37 li
584.778 193.38 li
585.106 193.292 li
585.057 193.307 li
585.372 193.186 li
585.325 193.208 li
585.625 193.056 li
585.581 193.081 li
585.864 192.901 li
585.824 192.928 li
586.088 192.721 li
586.051 192.753 li
586.294 192.521 li
586.262 192.556 li
586.483 192.299 li
586.453 192.337 li
586.651 192.06 li
586.625 192.1 li
586.797 191.803 li
586.775 191.845 li
586.919 191.53 li
586.902 191.574 li
587.017 191.242 li
587.003 191.288 li
587.088 190.944 li
587.079 190.991 li
587.131 190.633 li
587.126 190.681 li
587.144 190.313 li
587.144 190.361 li
587.126 189.992 li
587.131 190.04 li
587.079 189.682 li
587.088 189.729 li
587.003 189.384 li
587.017 189.431 li
586.902 189.1 li
586.919 189.143 li
586.775 188.828 li
586.797 188.87 li
586.625 188.574 li
586.651 188.613 li
586.453 188.337 li
586.483 188.374 li
586.262 188.117 li
586.294 188.152 li
586.051 187.921 li
586.088 187.952 li
585.824 187.745 li
585.864 187.772 li
585.581 187.592 li
585.625 187.617 li
585.325 187.465 li
585.372 187.487 li
585.057 187.365 li
585.106 187.382 li
584.778 187.293 li
584.829 187.303 li
584.489 187.249 li
584.542 187.255 li
584.191 187.236 li
584.244 187.236 li
583.894 187.255 li
583.947 187.249 li
583.607 187.303 li
583.658 187.293 li
583.33 187.382 li
583.379 187.365 li
583.064 187.487 li
583.111 187.465 li
582.811 187.617 li
582.855 187.592 li
582.572 187.772 li
582.612 187.745 li
582.348 187.952 li
582.385 187.921 li
582.141 188.152 li
582.174 188.117 li
581.953 188.374 li
581.983 188.337 li
581.785 188.613 li
581.811 188.574 li
581.639 188.87 li
581.661 188.828 li
581.517 189.143 li
581.534 189.1 li
581.419 189.431 li
581.433 189.384 li
581.348 189.729 li
581.357 189.682 li
581.305 190.04 li
581.31 189.992 li
581.292 190.361 li
f
663.933 158.257 mo
663.943 156.299 665.476 154.686 667.368 154.686 cv
669.26 154.686 670.793 156.299 670.793 158.286 cv
670.793 160.275 669.26 161.887 667.368 161.887 cv
665.476 161.887 663.943 160.275 663.933 158.257 cv
.64495 .27805 0 0 cmyk
ef
663.462 157.87 mo
663.521 157.465 li
663.617 157.074 li
665.11 152.576 671.178 153.619 671.294 158.286 cv
671.274 158.702 li
671.215 159.107 li
670.169 163.703 664.048 163.355 663.462 158.702 cv
663.442 158.286 li
663.462 157.87 li
cp
664.442 158.311 mo
664.442 158.262 li
664.46 158.63 li
664.456 158.583 li
664.507 158.941 li
664.498 158.893 li
664.583 159.238 li
664.569 159.193 li
664.684 159.523 li
664.667 159.479 li
664.811 159.794 li
664.789 159.753 li
664.961 160.049 li
664.935 160.009 li
665.133 160.286 li
665.103 160.249 li
665.324 160.505 li
665.292 160.471 li
665.535 160.702 li
665.498 160.671 li
665.762 160.878 li
665.722 160.85 li
666.005 161.031 li
665.961 161.005 li
666.261 161.158 li
666.214 161.137 li
666.529 161.257 li
666.48 161.242 li
666.808 161.331 li
666.757 161.32 li
667.097 161.374 li
667.044 161.368 li
667.394 161.387 li
667.342 161.387 li
667.692 161.368 li
667.639 161.374 li
667.979 161.32 li
667.928 161.331 li
668.256 161.242 li
668.207 161.257 li
668.522 161.137 li
668.475 161.158 li
668.775 161.005 li
668.731 161.031 li
669.014 160.85 li
668.974 160.878 li
669.238 160.671 li
669.201 160.702 li
669.444 160.471 li
669.412 160.505 li
669.633 160.249 li
669.603 160.286 li
669.801 160.009 li
669.775 160.049 li
669.947 159.753 li
669.925 159.794 li
670.069 159.479 li
670.052 159.523 li
670.167 159.193 li
670.153 159.238 li
670.238 158.893 li
670.229 158.941 li
670.281 158.583 li
670.276 158.63 li
670.294 158.262 li
670.294 158.311 li
670.276 157.943 li
670.281 157.99 li
670.229 157.632 li
670.238 157.68 li
670.153 157.335 li
670.167 157.38 li
670.052 157.049 li
670.069 157.094 li
669.925 156.779 li
669.947 156.82 li
669.775 156.523 li
669.801 156.563 li
669.603 156.286 li
669.633 156.324 li
669.412 156.068 li
669.444 156.102 li
669.201 155.87 li
669.238 155.902 li
668.974 155.695 li
669.014 155.723 li
668.731 155.542 li
668.775 155.568 li
668.475 155.415 li
668.522 155.436 li
668.207 155.316 li
668.256 155.331 li
667.928 155.242 li
667.979 155.253 li
667.639 155.199 li
667.692 155.204 li
667.342 155.186 li
667.394 155.186 li
667.044 155.204 li
667.097 155.199 li
666.757 155.253 li
666.808 155.242 li
666.48 155.331 li
666.529 155.316 li
666.214 155.436 li
666.261 155.415 li
665.961 155.568 li
666.005 155.542 li
665.722 155.723 li
665.762 155.695 li
665.498 155.902 li
665.535 155.87 li
665.292 156.102 li
665.324 156.068 li
665.103 156.324 li
665.133 156.286 li
664.935 156.563 li
664.961 156.523 li
664.789 156.82 li
664.811 156.779 li
664.667 157.094 li
664.684 157.049 li
664.569 157.38 li
664.583 157.335 li
664.498 157.68 li
664.507 157.632 li
664.456 157.99 li
664.46 157.943 li
664.442 158.311 li
.80038 .47193 .046113 0 cmyk
f
663.933 195.936 mo
663.943 193.898 665.476 192.286 667.368 192.286 cv
669.26 192.286 670.793 193.898 670.793 195.887 cv
670.793 197.875 669.26 199.487 667.368 199.487 cv
665.476 199.487 663.943 197.875 663.933 195.936 cv
.64495 .27805 0 0 cmyk
ef
663.462 195.471 mo
663.521 195.066 li
663.617 194.674 li
665.11 190.177 671.178 191.22 671.294 195.887 cv
671.274 196.303 li
671.215 196.708 li
670.169 201.303 664.048 200.956 663.462 196.303 cv
663.442 195.887 li
663.462 195.471 li
cp
664.442 195.911 mo
664.442 195.863 li
664.46 196.23 li
664.456 196.182 li
664.507 196.54 li
664.498 196.493 li
664.583 196.839 li
664.569 196.793 li
664.684 197.124 li
664.667 197.079 li
664.811 197.395 li
664.789 197.353 li
664.961 197.65 li
664.935 197.609 li
665.133 197.887 li
665.103 197.85 li
665.324 198.105 li
665.292 198.07 li
665.535 198.303 li
665.498 198.272 li
665.762 198.479 li
665.722 198.451 li
666.005 198.631 li
665.961 198.605 li
666.261 198.758 li
666.214 198.737 li
666.529 198.858 li
666.48 198.842 li
666.808 198.931 li
666.757 198.919 li
667.097 198.975 li
667.044 198.969 li
667.394 198.988 li
667.342 198.988 li
667.692 198.969 li
667.639 198.975 li
667.979 198.919 li
667.928 198.931 li
668.256 198.842 li
668.207 198.858 li
668.522 198.737 li
668.475 198.758 li
668.775 198.605 li
668.731 198.631 li
669.014 198.451 li
668.974 198.479 li
669.238 198.272 li
669.201 198.303 li
669.444 198.07 li
669.412 198.105 li
669.633 197.85 li
669.603 197.887 li
669.801 197.609 li
669.775 197.65 li
669.947 197.353 li
669.925 197.395 li
670.069 197.079 li
670.052 197.124 li
670.167 196.793 li
670.153 196.839 li
670.238 196.493 li
670.229 196.54 li
670.281 196.182 li
670.276 196.23 li
670.294 195.863 li
670.294 195.911 li
670.276 195.543 li
670.281 195.591 li
670.229 195.233 li
670.238 195.28 li
670.153 194.935 li
670.167 194.98 li
670.052 194.65 li
670.069 194.694 li
669.925 194.379 li
669.947 194.421 li
669.775 194.124 li
669.801 194.164 li
669.603 193.887 li
669.633 193.924 li
669.412 193.668 li
669.444 193.703 li
669.201 193.471 li
669.238 193.501 li
668.974 193.294 li
669.014 193.323 li
668.731 193.143 li
668.775 193.168 li
668.475 193.016 li
668.522 193.036 li
668.207 192.915 li
668.256 192.932 li
667.928 192.842 li
667.979 192.854 li
667.639 192.799 li
667.692 192.805 li
667.342 192.786 li
667.394 192.786 li
667.044 192.805 li
667.097 192.799 li
666.757 192.854 li
666.808 192.842 li
666.48 192.932 li
666.529 192.915 li
666.214 193.036 li
666.261 193.016 li
665.961 193.168 li
666.005 193.143 li
665.722 193.323 li
665.762 193.294 li
665.498 193.501 li
665.535 193.471 li
665.292 193.703 li
665.324 193.668 li
665.103 193.924 li
665.133 193.887 li
664.935 194.164 li
664.961 194.124 li
664.789 194.421 li
664.811 194.379 li
664.667 194.694 li
664.684 194.65 li
664.569 194.98 li
664.583 194.935 li
664.498 195.28 li
664.507 195.233 li
664.456 195.591 li
664.46 195.543 li
664.442 195.911 li
.80038 .47193 .046113 0 cmyk
f
695.613 110.497 mo
695.643 108.499 697.176 106.887 699.068 106.887 cv
700.96 106.887 702.493 108.499 702.493 110.487 cv
702.493 112.475 700.96 114.087 699.068 114.087 cv
697.176 114.087 695.643 112.475 695.613 110.497 cv
.64495 .27805 0 0 cmyk
ef
695.162 110.07 mo
695.221 109.665 li
695.317 109.274 li
696.81 104.776 702.878 105.819 702.994 110.486 cv
702.974 110.902 li
702.915 111.307 li
701.869 115.904 695.748 115.555 695.162 110.902 cv
695.142 110.486 li
695.162 110.07 li
cp
696.142 110.51 mo
696.142 110.462 li
696.16 110.83 li
696.155 110.783 li
696.207 111.141 li
696.198 111.093 li
696.283 111.438 li
696.269 111.393 li
696.384 111.723 li
696.367 111.679 li
696.511 111.994 li
696.489 111.952 li
696.661 112.249 li
696.635 112.21 li
696.832 112.486 li
696.803 112.449 li
697.024 112.705 li
696.991 112.671 li
697.235 112.902 li
697.198 112.871 li
697.462 113.078 li
697.422 113.05 li
697.704 113.23 li
697.661 113.205 li
697.961 113.357 li
697.914 113.337 li
698.229 113.457 li
698.18 113.441 li
698.508 113.531 li
698.457 113.52 li
698.797 113.574 li
698.744 113.568 li
699.094 113.587 li
699.041 113.587 li
699.392 113.568 li
699.339 113.574 li
699.679 113.52 li
699.628 113.531 li
699.956 113.441 li
699.907 113.457 li
700.222 113.337 li
700.175 113.357 li
700.475 113.205 li
700.431 113.23 li
700.714 113.05 li
700.674 113.078 li
700.938 112.871 li
700.901 112.902 li
701.144 112.671 li
701.112 112.705 li
701.333 112.449 li
701.303 112.486 li
701.501 112.21 li
701.475 112.249 li
701.647 111.952 li
701.625 111.994 li
701.769 111.679 li
701.752 111.723 li
701.867 111.393 li
701.853 111.438 li
701.938 111.093 li
701.929 111.141 li
701.98 110.783 li
701.976 110.83 li
701.994 110.462 li
701.994 110.51 li
701.976 110.143 li
701.98 110.19 li
701.929 109.832 li
701.938 109.88 li
701.853 109.535 li
701.867 109.58 li
701.752 109.249 li
701.769 109.294 li
701.625 108.979 li
701.647 109.02 li
701.475 108.723 li
701.501 108.763 li
701.303 108.486 li
701.333 108.523 li
701.112 108.268 li
701.144 108.302 li
700.901 108.07 li
700.938 108.102 li
700.674 107.895 li
700.714 107.923 li
700.431 107.742 li
700.475 107.768 li
700.175 107.615 li
700.222 107.636 li
699.907 107.516 li
699.956 107.531 li
699.628 107.442 li
699.679 107.453 li
699.339 107.398 li
699.392 107.404 li
699.041 107.385 li
699.094 107.385 li
698.744 107.404 li
698.797 107.398 li
698.457 107.453 li
698.508 107.442 li
698.18 107.531 li
698.229 107.516 li
697.914 107.636 li
697.961 107.615 li
697.661 107.768 li
697.704 107.742 li
697.422 107.923 li
697.462 107.895 li
697.198 108.102 li
697.235 108.07 li
696.991 108.302 li
697.024 108.268 li
696.803 108.523 li
696.832 108.486 li
696.635 108.763 li
696.661 108.723 li
696.489 109.02 li
696.511 108.979 li
696.367 109.294 li
696.384 109.249 li
696.269 109.58 li
696.283 109.535 li
696.198 109.88 li
696.207 109.832 li
696.155 110.19 li
696.16 110.143 li
696.142 110.51 li
.80038 .47193 .046113 0 cmyk
f
706.893 156.697 mo
706.893 154.749 708.426 153.137 710.318 153.137 cv
712.21 153.137 713.743 154.749 713.743 156.736 cv
713.743 158.725 712.21 160.337 710.318 160.337 cv
708.426 160.337 706.893 158.725 706.893 156.697 cv
.64495 .27805 0 0 cmyk
ef
706.412 156.32 mo
706.471 155.915 li
706.567 155.524 li
708.06 151.026 714.128 152.069 714.244 156.736 cv
714.224 157.152 li
714.165 157.557 li
713.119 162.154 706.998 161.805 706.412 157.152 cv
706.392 156.736 li
706.412 156.32 li
cp
707.392 156.76 mo
707.392 156.712 li
707.41 157.08 li
707.405 157.033 li
707.457 157.391 li
707.448 157.343 li
707.533 157.688 li
707.519 157.643 li
707.634 157.973 li
707.617 157.929 li
707.761 158.244 li
707.739 158.202 li
707.911 158.499 li
707.885 158.46 li
708.082 158.736 li
708.053 158.699 li
708.274 158.955 li
708.241 158.921 li
708.485 159.152 li
708.448 159.121 li
708.712 159.328 li
708.672 159.3 li
708.954 159.48 li
708.911 159.455 li
709.211 159.607 li
709.164 159.587 li
709.479 159.707 li
709.43 159.691 li
709.758 159.781 li
709.707 159.77 li
710.047 159.824 li
709.994 159.818 li
710.344 159.837 li
710.291 159.837 li
710.642 159.818 li
710.589 159.824 li
710.929 159.77 li
710.878 159.781 li
711.206 159.691 li
711.157 159.707 li
711.472 159.587 li
711.425 159.607 li
711.725 159.455 li
711.681 159.48 li
711.964 159.3 li
711.924 159.328 li
712.188 159.121 li
712.151 159.152 li
712.394 158.921 li
712.362 158.955 li
712.583 158.699 li
712.553 158.736 li
712.751 158.46 li
712.725 158.499 li
712.897 158.202 li
712.875 158.244 li
713.019 157.929 li
713.002 157.973 li
713.117 157.643 li
713.103 157.688 li
713.188 157.343 li
713.179 157.391 li
713.23 157.033 li
713.226 157.08 li
713.244 156.712 li
713.244 156.76 li
713.226 156.393 li
713.23 156.44 li
713.179 156.082 li
713.188 156.13 li
713.103 155.785 li
713.117 155.83 li
713.002 155.499 li
713.019 155.544 li
712.875 155.229 li
712.897 155.27 li
712.725 154.973 li
712.751 155.013 li
712.553 154.736 li
712.583 154.773 li
712.362 154.518 li
712.394 154.552 li
712.151 154.32 li
712.188 154.352 li
711.924 154.145 li
711.964 154.173 li
711.681 153.992 li
711.725 154.018 li
711.425 153.865 li
711.472 153.886 li
711.157 153.764 li
711.206 153.781 li
710.878 153.692 li
710.929 153.703 li
710.589 153.648 li
710.642 153.654 li
710.291 153.635 li
710.344 153.635 li
709.994 153.654 li
710.047 153.648 li
709.707 153.703 li
709.758 153.692 li
709.43 153.781 li
709.479 153.764 li
709.164 153.886 li
709.211 153.865 li
708.911 154.018 li
708.954 153.992 li
708.672 154.173 li
708.712 154.145 li
708.448 154.352 li
708.485 154.32 li
708.241 154.552 li
708.274 154.518 li
708.053 154.773 li
708.082 154.736 li
707.885 155.013 li
707.911 154.973 li
707.739 155.27 li
707.761 155.229 li
707.617 155.544 li
707.634 155.499 li
707.519 155.83 li
707.533 155.785 li
707.448 156.13 li
707.457 156.082 li
707.405 156.44 li
707.41 156.393 li
707.392 156.76 li
.80038 .47193 .046113 0 cmyk
f
629.853 170.257 mo
629.793 168.249 631.326 166.637 633.218 166.637 cv
635.11 166.637 636.643 168.249 636.643 170.236 cv
636.643 172.225 635.11 173.837 633.218 173.837 cv
631.326 173.837 629.793 172.225 629.853 170.257 cv
.64495 .27805 0 0 cmyk
ef
629.312 169.82 mo
629.371 169.415 li
629.467 169.024 li
630.96 164.526 637.028 165.569 637.144 170.236 cv
637.124 170.652 li
637.065 171.057 li
636.019 175.654 629.898 175.305 629.312 170.652 cv
629.292 170.236 li
629.312 169.82 li
cp
630.292 170.26 mo
630.292 170.212 li
630.31 170.58 li
630.305 170.533 li
630.357 170.891 li
630.348 170.843 li
630.433 171.188 li
630.419 171.143 li
630.534 171.473 li
630.517 171.429 li
630.661 171.744 li
630.639 171.702 li
630.811 171.999 li
630.785 171.96 li
630.983 172.236 li
630.953 172.199 li
631.174 172.455 li
631.141 172.421 li
631.385 172.652 li
631.348 172.621 li
631.612 172.828 li
631.572 172.8 li
631.855 172.98 li
631.811 172.955 li
632.111 173.107 li
632.064 173.087 li
632.379 173.207 li
632.33 173.191 li
632.658 173.281 li
632.607 173.27 li
632.947 173.324 li
632.894 173.318 li
633.244 173.337 li
633.191 173.337 li
633.542 173.318 li
633.489 173.324 li
633.829 173.27 li
633.778 173.281 li
634.106 173.191 li
634.057 173.207 li
634.372 173.087 li
634.325 173.107 li
634.625 172.955 li
634.581 172.98 li
634.864 172.8 li
634.824 172.828 li
635.088 172.621 li
635.051 172.652 li
635.294 172.421 li
635.262 172.455 li
635.483 172.199 li
635.453 172.236 li
635.651 171.96 li
635.625 171.999 li
635.797 171.702 li
635.775 171.744 li
635.919 171.429 li
635.902 171.473 li
636.017 171.143 li
636.003 171.188 li
636.088 170.843 li
636.079 170.891 li
636.131 170.533 li
636.126 170.58 li
636.144 170.212 li
636.144 170.26 li
636.126 169.893 li
636.131 169.94 li
636.079 169.582 li
636.088 169.63 li
636.003 169.285 li
636.017 169.33 li
635.902 168.999 li
635.919 169.044 li
635.775 168.729 li
635.797 168.77 li
635.625 168.473 li
635.651 168.513 li
635.453 168.236 li
635.483 168.273 li
635.262 168.018 li
635.294 168.052 li
635.051 167.82 li
635.088 167.852 li
634.824 167.645 li
634.864 167.673 li
634.581 167.492 li
634.625 167.518 li
634.325 167.365 li
634.372 167.386 li
634.057 167.266 li
634.106 167.281 li
633.778 167.192 li
633.829 167.203 li
633.489 167.148 li
633.542 167.154 li
633.191 167.135 li
633.244 167.135 li
632.894 167.154 li
632.947 167.148 li
632.607 167.203 li
632.658 167.192 li
632.33 167.281 li
632.379 167.266 li
632.064 167.386 li
632.111 167.365 li
631.811 167.518 li
631.855 167.492 li
631.572 167.673 li
631.612 167.645 li
631.348 167.852 li
631.385 167.82 li
631.141 168.052 li
631.174 168.018 li
630.953 168.273 li
630.983 168.236 li
630.785 168.513 li
630.811 168.473 li
630.639 168.77 li
630.661 168.729 li
630.517 169.044 li
630.534 168.999 li
630.419 169.33 li
630.433 169.285 li
630.348 169.63 li
630.357 169.582 li
630.305 169.94 li
630.31 169.893 li
630.292 170.26 li
.80038 .47193 .046113 0 cmyk
f
650.973 217.777 mo
650.993 215.799 652.526 214.187 654.418 214.187 cv
656.31 214.187 657.843 215.799 657.843 217.786 cv
657.843 219.775 656.31 221.387 654.418 221.387 cv
652.526 221.387 650.993 219.775 650.973 217.777 cv
.64495 .27805 0 0 cmyk
ef
650.512 217.37 mo
650.571 216.965 li
650.667 216.574 li
652.16 212.077 658.228 213.12 658.344 217.786 cv
658.324 218.202 li
658.265 218.607 li
657.219 223.203 651.098 222.855 650.512 218.202 cv
650.492 217.786 li
650.512 217.37 li
cp
651.492 217.811 mo
651.492 217.762 li
651.51 218.13 li
651.505 218.082 li
651.557 218.44 li
651.548 218.393 li
651.633 218.738 li
651.619 218.693 li
651.734 219.023 li
651.717 218.979 li
651.861 219.294 li
651.839 219.253 li
652.011 219.549 li
651.985 219.509 li
652.182 219.786 li
652.153 219.749 li
652.374 220.005 li
652.341 219.97 li
652.585 220.202 li
652.548 220.172 li
652.812 220.379 li
652.772 220.35 li
653.054 220.531 li
653.011 220.505 li
653.311 220.658 li
653.264 220.637 li
653.579 220.758 li
653.53 220.742 li
653.858 220.831 li
653.807 220.819 li
654.147 220.874 li
654.094 220.868 li
654.444 220.887 li
654.391 220.887 li
654.742 220.868 li
654.689 220.874 li
655.029 220.819 li
654.978 220.831 li
655.306 220.742 li
655.257 220.758 li
655.572 220.637 li
655.525 220.658 li
655.825 220.505 li
655.781 220.531 li
656.064 220.35 li
656.024 220.379 li
656.288 220.172 li
656.251 220.202 li
656.494 219.97 li
656.462 220.005 li
656.683 219.749 li
656.653 219.786 li
656.851 219.509 li
656.825 219.549 li
656.997 219.253 li
656.975 219.294 li
657.119 218.979 li
657.102 219.023 li
657.217 218.693 li
657.203 218.738 li
657.288 218.393 li
657.279 218.44 li
657.33 218.082 li
657.326 218.13 li
657.344 217.762 li
657.344 217.811 li
657.326 217.443 li
657.33 217.491 li
657.279 217.133 li
657.288 217.18 li
657.203 216.835 li
657.217 216.88 li
657.102 216.549 li
657.119 216.594 li
656.975 216.279 li
656.997 216.32 li
656.825 216.023 li
656.851 216.064 li
656.653 215.786 li
656.683 215.824 li
656.462 215.568 li
656.494 215.603 li
656.251 215.37 li
656.288 215.401 li
656.024 215.194 li
656.064 215.223 li
655.781 215.042 li
655.825 215.068 li
655.525 214.915 li
655.572 214.936 li
655.257 214.814 li
655.306 214.831 li
654.978 214.742 li
655.029 214.754 li
654.689 214.699 li
654.742 214.704 li
654.391 214.686 li
654.444 214.686 li
654.094 214.704 li
654.147 214.699 li
653.807 214.754 li
653.858 214.742 li
653.53 214.831 li
653.579 214.814 li
653.264 214.936 li
653.311 214.915 li
653.011 215.068 li
653.054 215.042 li
652.772 215.223 li
652.812 215.194 li
652.548 215.401 li
652.585 215.37 li
652.341 215.603 li
652.374 215.568 li
652.153 215.824 li
652.182 215.786 li
651.985 216.064 li
652.011 216.023 li
651.839 216.32 li
651.861 216.279 li
651.717 216.594 li
651.734 216.549 li
651.619 216.88 li
651.633 216.835 li
651.548 217.18 li
651.557 217.133 li
651.505 217.491 li
651.51 217.443 li
651.492 217.811 li
.80038 .47193 .046113 0 cmyk
f
600.813 217.777 mo
600.843 215.799 602.376 214.187 604.268 214.187 cv
606.16 214.187 607.693 215.799 607.693 217.786 cv
607.693 219.775 606.16 221.387 604.268 221.387 cv
602.376 221.387 600.843 219.775 600.813 217.777 cv
.64495 .27805 0 0 cmyk
ef
600.362 217.37 mo
600.421 216.965 li
600.517 216.574 li
602.01 212.077 608.078 213.12 608.194 217.786 cv
608.174 218.202 li
608.115 218.607 li
607.069 223.203 600.948 222.855 600.362 218.202 cv
600.342 217.786 li
600.362 217.37 li
cp
601.342 217.811 mo
601.342 217.762 li
601.36 218.13 li
601.355 218.082 li
601.407 218.44 li
601.398 218.393 li
601.483 218.738 li
601.469 218.693 li
601.584 219.023 li
601.567 218.979 li
601.711 219.294 li
601.689 219.253 li
601.861 219.549 li
601.835 219.509 li
602.032 219.786 li
602.003 219.749 li
602.224 220.005 li
602.191 219.97 li
602.435 220.202 li
602.398 220.172 li
602.662 220.379 li
602.622 220.35 li
602.904 220.531 li
602.861 220.505 li
603.161 220.658 li
603.114 220.637 li
603.429 220.758 li
603.38 220.742 li
603.708 220.831 li
603.657 220.819 li
603.997 220.874 li
603.944 220.868 li
604.294 220.887 li
604.241 220.887 li
604.592 220.868 li
604.539 220.874 li
604.879 220.819 li
604.828 220.831 li
605.156 220.742 li
605.107 220.758 li
605.422 220.637 li
605.375 220.658 li
605.675 220.505 li
605.631 220.531 li
605.914 220.35 li
605.874 220.379 li
606.138 220.172 li
606.101 220.202 li
606.344 219.97 li
606.312 220.005 li
606.533 219.749 li
606.503 219.786 li
606.701 219.509 li
606.675 219.549 li
606.847 219.253 li
606.825 219.294 li
606.969 218.979 li
606.952 219.023 li
607.067 218.693 li
607.053 218.738 li
607.138 218.393 li
607.129 218.44 li
607.181 218.082 li
607.176 218.13 li
607.194 217.762 li
607.194 217.811 li
607.176 217.443 li
607.181 217.491 li
607.129 217.133 li
607.138 217.18 li
607.053 216.835 li
607.067 216.88 li
606.952 216.549 li
606.969 216.594 li
606.825 216.279 li
606.847 216.32 li
606.675 216.023 li
606.701 216.064 li
606.503 215.786 li
606.533 215.824 li
606.312 215.568 li
606.344 215.603 li
606.101 215.37 li
606.138 215.401 li
605.874 215.194 li
605.914 215.223 li
605.631 215.042 li
605.675 215.068 li
605.375 214.915 li
605.422 214.936 li
605.107 214.814 li
605.156 214.831 li
604.828 214.742 li
604.879 214.754 li
604.539 214.699 li
604.592 214.704 li
604.241 214.686 li
604.294 214.686 li
603.944 214.704 li
603.997 214.699 li
603.657 214.754 li
603.708 214.742 li
603.38 214.831 li
603.429 214.814 li
603.114 214.936 li
603.161 214.915 li
602.861 215.068 li
602.904 215.042 li
602.622 215.223 li
602.662 215.194 li
602.398 215.401 li
602.435 215.37 li
602.191 215.603 li
602.224 215.568 li
602.003 215.824 li
602.032 215.786 li
601.835 216.064 li
601.861 216.023 li
601.689 216.32 li
601.711 216.279 li
601.567 216.594 li
601.584 216.549 li
601.469 216.88 li
601.483 216.835 li
601.398 217.18 li
601.407 217.133 li
601.355 217.491 li
601.36 217.443 li
601.342 217.811 li
.80038 .47193 .046113 0 cmyk
f
688.773 201.816 mo
688.793 199.848 690.326 198.236 692.218 198.236 cv
694.11 198.236 695.643 199.848 695.643 201.836 cv
695.643 203.824 694.11 205.436 692.218 205.436 cv
690.326 205.436 688.793 203.824 688.773 201.816 cv
.64495 .27805 0 0 cmyk
ef
688.312 201.421 mo
688.371 201.016 li
688.467 200.625 li
689.96 196.126 696.028 197.169 696.144 201.837 cv
696.124 202.253 li
696.065 202.658 li
695.019 207.254 688.898 206.906 688.312 202.253 cv
688.292 201.837 li
688.312 201.421 li
cp
689.292 201.861 mo
689.292 201.813 li
689.31 202.181 li
689.305 202.133 li
689.357 202.491 li
689.348 202.444 li
689.433 202.788 li
689.419 202.742 li
689.534 203.074 li
689.517 203.03 li
689.661 203.345 li
689.639 203.303 li
689.811 203.6 li
689.785 203.56 li
689.983 203.837 li
689.953 203.799 li
690.174 204.056 li
690.141 204.021 li
690.385 204.253 li
690.348 204.221 li
690.612 204.428 li
690.572 204.401 li
690.855 204.581 li
690.811 204.556 li
691.111 204.708 li
691.064 204.686 li
691.379 204.809 li
691.33 204.792 li
691.658 204.88 li
691.607 204.87 li
691.947 204.924 li
691.894 204.919 li
692.244 204.938 li
692.191 204.938 li
692.542 204.919 li
692.489 204.924 li
692.829 204.87 li
692.778 204.88 li
693.106 204.792 li
693.057 204.809 li
693.372 204.686 li
693.325 204.708 li
693.625 204.556 li
693.581 204.581 li
693.864 204.401 li
693.824 204.428 li
694.088 204.221 li
694.051 204.253 li
694.294 204.021 li
694.262 204.056 li
694.483 203.799 li
694.453 203.837 li
694.651 203.56 li
694.625 203.6 li
694.797 203.303 li
694.775 203.345 li
694.919 203.03 li
694.902 203.074 li
695.017 202.742 li
695.003 202.788 li
695.088 202.444 li
695.079 202.491 li
695.131 202.133 li
695.126 202.181 li
695.144 201.813 li
695.144 201.861 li
695.126 201.492 li
695.131 201.54 li
695.079 201.182 li
695.088 201.229 li
695.003 200.884 li
695.017 200.931 li
694.902 200.6 li
694.919 200.643 li
694.775 200.328 li
694.797 200.37 li
694.625 200.074 li
694.651 200.113 li
694.453 199.837 li
694.483 199.874 li
694.262 199.617 li
694.294 199.652 li
694.051 199.421 li
694.088 199.452 li
693.824 199.245 li
693.864 199.272 li
693.581 199.092 li
693.625 199.117 li
693.325 198.965 li
693.372 198.987 li
693.057 198.866 li
693.106 198.882 li
692.778 198.793 li
692.829 198.803 li
692.489 198.749 li
692.542 198.755 li
692.191 198.736 li
692.244 198.736 li
691.894 198.755 li
691.947 198.749 li
691.607 198.803 li
691.658 198.793 li
691.33 198.882 li
691.379 198.866 li
691.064 198.987 li
691.111 198.965 li
690.811 199.117 li
690.855 199.092 li
690.572 199.272 li
690.612 199.245 li
690.348 199.452 li
690.385 199.421 li
690.141 199.652 li
690.174 199.617 li
689.953 199.874 li
689.983 199.837 li
689.785 200.113 li
689.811 200.074 li
689.639 200.37 li
689.661 200.328 li
689.517 200.643 li
689.534 200.6 li
689.419 200.931 li
689.433 200.884 li
689.348 201.229 li
689.357 201.182 li
689.305 201.54 li
689.31 201.492 li
689.292 201.861 li
.80038 .47193 .046113 0 cmyk
f
534.573 116.257 mo
542.613 116.257 li
542.613 106.536 li
534.573 106.536 li
cp
0 .30243 .90338 0 cmyk
f
534.043 105.986 mo
543.093 105.986 li
543.093 116.786 li
534.043 116.786 li
cp
543.093 105.986 mo
cp
534.543 106.986 mo
535.043 106.486 li
535.043 116.286 li
534.543 115.786 li
542.593 115.786 li
542.093 116.286 li
542.093 106.486 li
542.593 106.986 li
534.543 106.986 li
f
574.533 92.1365 mo
582.573 92.1365 li
582.573 82.2965 li
574.533 82.2965 li
cp
.57174 .48158 .45197 0 cmyk
f
574.043 81.8365 mo
583.093 81.8365 li
583.093 92.6365 li
574.043 92.6365 li
cp
583.093 81.8365 mo
cp
574.543 82.8365 mo
575.043 82.3365 li
575.043 92.1365 li
574.543 91.6365 li
582.593 91.6365 li
582.093 92.1365 li
582.093 82.3365 li
582.593 82.8365 li
574.543 82.8365 li
f
574.533 164.497 mo
582.573 164.497 li
582.573 154.657 li
574.533 154.657 li
cp
0 .30243 .90338 0 cmyk
f
574.043 154.187 mo
583.093 154.187 li
583.093 164.987 li
574.043 164.987 li
cp
583.093 154.187 mo
cp
574.543 155.187 mo
575.043 154.687 li
575.043 164.487 li
574.543 163.987 li
582.593 163.987 li
582.093 164.487 li
582.093 154.687 li
582.593 155.187 li
574.543 155.187 li
f
527.853 191.137 mo
535.893 191.137 li
535.893 181.417 li
527.853 181.417 li
cp
f
527.393 180.887 mo
536.443 180.887 li
536.443 191.686 li
527.393 191.686 li
cp
536.443 180.887 mo
cp
527.893 181.887 mo
528.393 181.387 li
528.393 191.186 li
527.893 190.686 li
535.943 190.686 li
535.443 191.186 li
535.443 181.387 li
535.943 181.887 li
527.893 181.887 li
f
546.213 217.417 mo
554.253 217.417 li
554.253 207.697 li
546.213 207.697 li
cp
f
545.693 207.137 mo
554.743 207.137 li
554.743 217.936 li
545.693 217.936 li
cp
554.743 207.137 mo
cp
546.193 208.137 mo
546.693 207.637 li
546.693 217.436 li
546.193 216.936 li
554.243 216.936 li
553.743 217.436 li
553.743 207.637 li
554.243 208.137 li
546.193 208.137 li
f
543.093 200.617 mo
551.253 200.617 li
551.253 190.777 li
543.093 190.777 li
cp
f
542.643 190.286 mo
551.693 190.286 li
551.693 201.087 li
542.643 201.087 li
cp
551.693 190.286 mo
cp
543.143 191.286 mo
543.643 190.786 li
543.643 200.587 li
543.143 200.087 li
551.193 200.087 li
550.693 200.587 li
550.693 190.786 li
551.193 191.286 li
543.143 191.286 li
f
566.493 140.376 mo
574.533 140.376 li
574.533 130.536 li
566.493 130.536 li
cp
f
565.993 130.036 mo
575.043 130.036 li
575.043 140.837 li
565.993 140.837 li
cp
575.043 130.036 mo
cp
566.493 131.036 mo
566.993 130.536 li
566.993 140.337 li
566.493 139.837 li
574.543 139.837 li
574.043 140.337 li
574.043 130.536 li
574.543 131.036 li
566.493 131.036 li
f
542.613 171.697 mo
550.653 171.697 li
550.653 161.857 li
542.613 161.857 li
cp
f
542.093 161.387 mo
551.143 161.387 li
551.143 172.187 li
542.093 172.187 li
cp
551.143 161.387 mo
cp
542.593 162.387 mo
543.093 161.887 li
543.093 171.687 li
542.593 171.187 li
550.643 171.187 li
550.143 171.687 li
550.143 161.887 li
550.643 162.387 li
542.593 162.387 li
f
560.613 116.257 mo
568.653 116.257 li
568.653 106.536 li
560.613 106.536 li
cp
f
560.143 105.986 mo
569.193 105.986 li
569.193 116.786 li
560.143 116.786 li
cp
569.193 105.986 mo
cp
560.643 106.986 mo
561.143 106.486 li
561.143 116.286 li
560.643 115.786 li
568.693 115.786 li
568.193 116.286 li
568.193 106.486 li
568.693 106.986 li
560.643 106.986 li
f
534.573 153.096 mo
542.613 153.096 li
542.613 143.376 li
534.573 143.376 li
cp
f
534.043 142.837 mo
543.093 142.837 li
543.093 153.637 li
534.043 153.637 li
cp
543.093 142.837 mo
cp
534.543 143.837 mo
535.043 143.337 li
535.043 153.137 li
534.543 152.637 li
542.593 152.637 li
542.093 153.137 li
542.093 143.337 li
542.593 143.837 li
534.543 143.837 li
f
297.933 215.257 mo
305.973 215.257 li
305.973 205.417 li
297.933 205.417 li
cp
f
297.393 204.936 mo
306.443 204.936 li
306.443 215.737 li
297.393 215.737 li
cp
306.443 204.936 mo
cp
297.893 205.936 mo
298.393 205.436 li
298.393 215.237 li
297.893 214.737 li
305.943 214.737 li
305.443 215.237 li
305.443 205.436 li
305.943 205.936 li
297.893 205.936 li
f
0 .9617 .90481 0 cmyk
AFOLOK+STHupo [12 0 0 -12 0 0 ]msf
300.493 215.536 mo
(\002A)sh
AFOLOK+STHupo [12 0 0 -12 0 0 ]msf
300.493 215.536 mo
(\002A) false chp
@
30.0931 20.4965 mo
36.6931 8.13651 li
43.2931 20.4965 li
30.0931 20.4965 li
.7518 0 .87069 0 cmyk
ef
36.6931 7.12949 mo
44.1291 20.9865 li
29.2571 20.9865 li
36.6931 7.12949 li
cp
30.5341 20.7225 mo
30.0931 19.9865 li
43.2931 19.9865 li
42.8521 20.7225 li
36.2521 8.42249 li
37.1341 8.42249 li
30.5341 20.7225 li
f
13.0531 20.4965 mo
24.6931 20.4965 li
24.6931 8.13651 li
13.0531 8.13651 li
cp
0 .30243 .90338 0 cmyk
f
12.5931 7.68649 mo
25.2431 7.68649 li
25.2431 20.9865 li
12.5931 20.9865 li
cp
25.2431 7.68649 mo
cp
13.0931 8.68649 mo
13.5931 8.18649 li
13.5931 20.4865 li
13.0931 19.9865 li
24.7431 19.9865 li
24.2431 20.4865 li
24.2431 8.18649 li
24.7431 8.68649 li
13.0931 8.68649 li
f
47.3731 13.7765 mo
47.3931 10.0865 50.2361 7.08649 53.7431 7.08649 cv
57.2501 7.08649 60.0931 10.0865 60.0931 13.7865 cv
60.0931 17.4865 57.2501 20.4865 53.7431 20.4865 cv
50.2361 20.4865 47.3931 17.4865 47.3731 13.7765 cv
.64495 .27805 0 0 cmyk
ef
46.9021 13.4175 mo
46.9281 13.0535 li
46.9711 12.6945 li
48.5931 3.91251 60.3001 4.93851 60.5931 13.7865 cv
60.5841 14.1555 li
60.5581 14.5195 li
59.3771 23.3435 47.6401 23.0015 46.9021 14.1555 cv
46.8931 13.7865 li
46.9021 13.4175 li
cp
47.8931 13.7985 mo
47.8931 13.7745 li
47.9011 14.1195 li
47.9001 14.0955 li
47.9241 14.4355 li
47.9221 14.4115 li
47.9631 14.7475 li
47.9591 14.7235 li
48.0151 15.0535 li
48.0101 15.0295 li
48.0811 15.3545 li
48.0761 15.3305 li
48.1611 15.6485 li
48.1551 15.6265 li
48.2541 15.9375 li
48.2471 15.9155 li
48.3601 16.2195 li
48.3521 16.1975 li
48.4791 16.4945 li
48.4691 16.4725 li
48.6091 16.7615 li
48.5981 16.7405 li
48.7511 17.0215 li
48.7401 17.0015 li
48.9051 17.2725 li
48.8921 17.2535 li
49.0691 17.5155 li
49.0561 17.4965 li
49.2441 17.7495 li
49.2291 17.7315 li
49.4291 17.9745 li
49.4141 17.9565 li
49.6241 18.1885 li
49.6071 18.1715 li
49.8281 18.3935 li
49.8111 18.3765 li
50.0411 18.5875 li
50.0231 18.5715 li
50.2631 18.7705 li
50.2441 18.7555 li
50.4931 18.9425 li
50.4731 18.9285 li
50.7301 19.1025 li
50.7101 19.0895 li
50.9761 19.2505 li
50.9541 19.2375 li
51.2281 19.3855 li
51.2051 19.3745 li
51.4871 19.5085 li
51.4631 19.4985 li
51.7521 19.6185 li
51.7281 19.6095 li
52.0231 19.7145 li
51.9981 19.7065 li
52.3001 19.7965 li
52.2741 19.7895 li
52.5821 19.8645 li
52.5561 19.8595 li
52.8691 19.9175 li
52.8421 19.9135 li
53.1601 19.9565 li
53.1341 19.9535 li
53.4561 19.9795 li
53.4301 19.9775 li
53.7561 19.9865 li
53.7301 19.9865 li
54.0561 19.9775 li
54.0301 19.9795 li
54.3521 19.9535 li
54.3261 19.9565 li
54.6441 19.9135 li
54.6171 19.9175 li
54.9301 19.8595 li
54.9041 19.8645 li
55.2121 19.7895 li
55.1861 19.7965 li
55.4881 19.7065 li
55.4631 19.7145 li
55.7581 19.6095 li
55.7341 19.6185 li
56.0231 19.4985 li
55.9991 19.5085 li
56.2811 19.3745 li
56.2581 19.3855 li
56.5321 19.2375 li
56.5101 19.2505 li
56.7761 19.0895 li
56.7561 19.1025 li
57.0131 18.9285 li
56.9931 18.9425 li
57.2421 18.7555 li
57.2231 18.7705 li
57.4631 18.5715 li
57.4451 18.5875 li
57.6751 18.3765 li
57.6581 18.3935 li
57.8791 18.1715 li
57.8621 18.1885 li
58.0721 17.9565 li
58.0571 17.9745 li
58.2571 17.7315 li
58.2421 17.7495 li
58.4301 17.4965 li
58.4171 17.5155 li
58.5941 17.2535 li
58.5811 17.2725 li
58.7461 17.0015 li
58.7351 17.0215 li
58.8881 16.7405 li
58.8771 16.7615 li
59.0171 16.4725 li
59.0071 16.4945 li
59.1341 16.1975 li
59.1261 16.2195 li
59.2391 15.9155 li
59.2321 15.9375 li
59.3311 15.6265 li
59.3251 15.6485 li
59.4101 15.3305 li
59.4051 15.3545 li
59.4761 15.0295 li
59.4711 15.0535 li
59.5271 14.7235 li
59.5231 14.7475 li
59.5641 14.4115 li
59.5611 14.4355 li
59.5861 14.0955 li
59.5851 14.1195 li
59.5931 13.7745 li
59.5931 13.7985 li
59.5851 13.4535 li
59.5861 13.4775 li
59.5611 13.1375 li
59.5641 13.1615 li
59.5231 12.8255 li
59.5271 12.8495 li
59.4711 12.5195 li
59.4761 12.5435 li
59.4051 12.2185 li
59.4101 12.2425 li
59.3251 11.9245 li
59.3311 11.9465 li
59.2321 11.6355 li
59.2391 11.6575 li
59.1261 11.3535 li
59.1341 11.3755 li
59.0071 11.0785 li
59.0171 11.1005 li
58.8771 10.8115 li
58.8881 10.8325 li
58.7351 10.5515 li
58.7461 10.5715 li
58.5811 10.3005 li
58.5941 10.3195 li
58.4171 10.0575 li
58.4301 10.0765 li
58.2421 9.82352 li
58.2571 9.84152 li
58.0571 9.59851 li
58.0721 9.61652 li
57.8621 9.38452 li
57.8791 9.40152 li
57.6581 9.1795 li
57.6751 9.1965 li
57.4451 8.9855 li
57.4631 9.00153 li
57.2231 8.80252 li
57.2421 8.8175 li
56.9931 8.63052 li
57.0131 8.6445 li
56.7561 8.47052 li
56.7761 8.48352 li
56.5101 8.32251 li
56.5321 8.33551 li
56.2581 8.1875 li
56.2811 8.19852 li
55.9991 8.06451 li
56.0231 8.07452 li
55.7341 7.9545 li
55.7581 7.9635 li
55.4631 7.85852 li
55.4881 7.86652 li
55.1861 7.77652 li
55.2121 7.78351 li
54.9041 7.7085 li
54.9301 7.7135 li
54.6171 7.65552 li
54.6441 7.65952 li
54.3261 7.61652 li
54.3521 7.61951 li
54.0301 7.59351 li
54.0561 7.59552 li
53.7301 7.58652 li
53.7561 7.58652 li
53.4301 7.59552 li
53.4561 7.59351 li
53.1341 7.61951 li
53.1601 7.61652 li
52.8421 7.65952 li
52.8691 7.65552 li
52.5561 7.7135 li
52.5821 7.7085 li
52.2741 7.78351 li
52.3001 7.77652 li
51.9981 7.86652 li
52.0231 7.85852 li
51.7281 7.9635 li
51.7521 7.9545 li
51.4631 8.07452 li
51.4871 8.06451 li
51.2051 8.19852 li
51.2281 8.1875 li
50.9541 8.33551 li
50.9761 8.32251 li
50.7101 8.48352 li
50.7301 8.47052 li
50.4731 8.6445 li
50.4931 8.63052 li
50.2441 8.8175 li
50.2631 8.80252 li
50.0231 9.00153 li
50.0411 8.9855 li
49.8111 9.1965 li
49.8281 9.1795 li
49.6071 9.40152 li
49.6241 9.38452 li
49.4141 9.61652 li
49.4291 9.59851 li
49.2291 9.84152 li
49.2441 9.82352 li
49.0561 10.0765 li
49.0691 10.0575 li
48.8921 10.3195 li
48.9051 10.3005 li
48.7401 10.5715 li
48.7511 10.5515 li
48.5981 10.8325 li
48.6091 10.8115 li
48.4691 11.1005 li
48.4791 11.0785 li
48.3521 11.3755 li
48.3601 11.3535 li
48.2471 11.6575 li
48.2541 11.6355 li
48.1551 11.9465 li
48.1611 11.9245 li
48.0761 12.2425 li
48.0811 12.2185 li
48.0101 12.5435 li
48.0151 12.5195 li
47.9591 12.8495 li
47.9631 12.8255 li
47.9221 13.1615 li
47.9241 13.1375 li
47.9001 13.4775 li
47.9011 13.4535 li
47.8931 13.7985 li
.80038 .47193 .046113 0 cmyk
f
.92929 .8793 .88968 .79928 cmyk
%ADOBeginSubsetFont: JBAAAA+ArialMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (JBAAAA+ArialMT)
%%Title: (JBAAAA+ArialMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /JBAAAA+ArialMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-665 -325 2000 1040} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 90 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 11 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
49 <001C60D8A8C9B6079F629170873C67115641D0B6890161EC48F71E8D2106
F3AC927984C1E464F121F968> |
82 <001C60D8A8C9B7EF32334FFE7884F6C3B903D000D9FD76C2EAE8EDCCA90A
987875625CA0393015EF6761BE1C3B6D9E9DA4BABE1DD313B783BCBF8F620C84
6C7F6361946173FB7A4A6BF94EAA0CB4947DD1974AF371F3C211E584576DE9AD
79F9DA988E9E531810E3876F3029BB1D2ED366525F30E48DD7CE3C9B66C5CC09
9F518C54BB58C51D6FB6D0C8> |
85 <001C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE112857
894FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619
ADD420F549AB7C795751D32E8EE6> |
80 <001C60D8A8C9B6B41CBB5F87BE20C872DF59FABCB36542419CBFA3D5519A
D5BA8076F32ECFD724B055F72CAC37BC47239ACC8B0FB48B8ACFF099B97085BD
99C333951D0338D27FF6AB9B3F3C69320476BA0CD4F9573B79AD358A91B0176A
FB9AEF169308783E9C6287F18E6E658AF5AA6C9688B500806DA169A1B21069D5
5C54A2FF607A6A38976171B08665C3ACCAA84DFB970D01180645CE5CBC48DFE3
7B> |
68 <001C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D1EA
7DC8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D883
CA6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A87DB
BA48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2405
FD710F7ADB95B4F576668A6DB104942C88ED8D01E4E58188F5E32A24B5B964D5
CEC10C08F76C0F472E84A0FB6EB5E37AAEE233DE54C212B0A012D3E20F864B2D
53463E221F81B784B6F7BE81FBFCAE6785C2430454DD81C436E0A516BF8C8307
B2879FF86378629C5EA7E586D83C83550D2E732930F7FE3BAD07B86C81E024D1
77B5D88A> |
79 <001C60D8A8C9B88C08722AD20D19A90F9064193C8D82> |
3 <001C60D8A8C9B854D00D> |
86 <001C60D8A8C9B7A73DA057E90C9BFBE0FE301E99CB771FA2F05368A6342B
5F80456D91458EA2F3CAD55CDF89BFF34EEB39D7DD325B057E2BF0E9B878C214
E2BD1BD70DCABE10E0DC8EBCF7B100B55EBE94FB0F17084E21EBD279B324AEAB
D96538911D053BE9D7ECBF43F934B1033C9E405BBE31E7EDB643609C8D779046
E1B250C3CF05E6FA4787649137D90F47F85972A6603BA900DD7CB710E02662DB
3287CB26D7B7AE794611498865FC85A28083D2F6C2DEC302D47619A4A577C5B8
435558FCFE71A1BB6783AFD5F58B6D2C03593B3F2297A66A7E6D13C1E321C57F
4172D53C8FCAF4D28F2B78D3A4BF03> |
83 <001C60D8A8C9B7EF322B3B0CFC8FED720BC90E20B208D27DC4B8F11F10B9
6470F8B4F5FABEC7F7010781F5077B417FE44279776F2304ACD6E0EA12F43633
0DC4B79C907B9D28468D10FF9256A7D2CA504E4498D719ACD86FCA89B33C61F5
56CF1168C3F262A781155D5EBF0C47D71C584AB93037B47B18D39FE408A49672
C1E63F9E8368D19E113FC95C59A9FA4650E46F6399F2FF256844E27568BA34B9> |
72 <001C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449
B0D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C
8B6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0E
EA03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C37
295284C077711C162623860AACA404F650F8D516970257> |
0 <001C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A93
6AA182F5809A9> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /JBAAAA+ArialMT-Identity-H /Identity-H 0 [/JBAAAA+ArialMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/AFOLOL+ArialMT /JBAAAA+ArialMT-Identity-H findfont ct_VMDictPut
AFOLOL+ArialMT [18 0 0 -18 0 0 ]msf
65.2931 19.4361 mo
(\0001\000R\000U\000P\000D\000O\000\003\000V\000D\000P\000S\000O\000H\000V)
[12.9941 10.0061 5.99194 14.9919 10.0061 3.99408 5.00208 8.99808 10.0061 14.9919 10.0061 3.99408 
10.0061 0 ]xsh
243.213 20.4965 mo
249.813 8.13651 li
256.413 20.4965 li
243.213 20.4965 li
.57174 .48158 .45197 0 cmyk
ef
249.793 7.12949 mo
257.229 20.9865 li
242.357 20.9865 li
249.793 7.12949 li
cp
243.634 20.7225 mo
243.193 19.9865 li
256.393 19.9865 li
255.952 20.7225 li
249.352 8.42249 li
250.234 8.42249 li
243.634 20.7225 li
f
226.173 20.4965 mo
237.813 20.4965 li
237.813 8.13651 li
226.173 8.13651 li
cp
f
225.693 7.68649 mo
238.343 7.68649 li
238.343 20.9865 li
225.693 20.9865 li
cp
238.343 7.68649 mo
cp
226.193 8.68649 mo
226.693 8.18649 li
226.693 20.4865 li
226.193 19.9865 li
237.843 19.9865 li
237.343 20.4865 li
237.343 8.18649 li
237.843 8.68649 li
226.193 8.68649 li
f
260.493 13.7765 mo
260.493 10.0865 263.336 7.08649 266.843 7.08649 cv
270.35 7.08649 273.193 10.0865 273.193 13.7865 cv
273.193 17.4865 270.35 20.4865 266.843 20.4865 cv
263.336 20.4865 260.493 17.4865 260.493 13.7765 cv
ef
260.002 13.4175 mo
260.028 13.0535 li
260.071 12.6945 li
261.693 3.91251 273.4 4.93851 273.693 13.7865 cv
273.684 14.1555 li
273.658 14.5195 li
272.477 23.3435 260.739 23.0005 260.002 14.1555 cv
259.993 13.7865 li
260.002 13.4175 li
cp
260.993 13.7985 mo
260.993 13.7745 li
261.001 14.1195 li
261 14.0955 li
261.024 14.4355 li
261.022 14.4115 li
261.063 14.7475 li
261.059 14.7235 li
261.115 15.0535 li
261.11 15.0295 li
261.181 15.3545 li
261.176 15.3305 li
261.261 15.6485 li
261.255 15.6265 li
261.354 15.9375 li
261.347 15.9155 li
261.46 16.2195 li
261.452 16.1975 li
261.579 16.4945 li
261.569 16.4725 li
261.709 16.7615 li
261.698 16.7405 li
261.851 17.0215 li
261.84 17.0015 li
262.005 17.2725 li
261.992 17.2535 li
262.169 17.5155 li
262.156 17.4965 li
262.344 17.7495 li
262.329 17.7315 li
262.529 17.9745 li
262.514 17.9565 li
262.724 18.1885 li
262.707 18.1715 li
262.928 18.3935 li
262.911 18.3765 li
263.141 18.5875 li
263.123 18.5715 li
263.363 18.7705 li
263.344 18.7555 li
263.593 18.9425 li
263.573 18.9285 li
263.83 19.1025 li
263.81 19.0895 li
264.076 19.2505 li
264.054 19.2375 li
264.328 19.3855 li
264.305 19.3745 li
264.587 19.5085 li
264.563 19.4985 li
264.852 19.6185 li
264.828 19.6095 li
265.123 19.7145 li
265.098 19.7065 li
265.4 19.7965 li
265.374 19.7895 li
265.682 19.8645 li
265.656 19.8595 li
265.969 19.9175 li
265.942 19.9135 li
266.26 19.9565 li
266.234 19.9535 li
266.556 19.9795 li
266.53 19.9775 li
266.856 19.9865 li
266.83 19.9865 li
267.156 19.9775 li
267.13 19.9795 li
267.452 19.9535 li
267.426 19.9565 li
267.744 19.9135 li
267.717 19.9175 li
268.03 19.8595 li
268.004 19.8645 li
268.312 19.7895 li
268.286 19.7965 li
268.588 19.7065 li
268.563 19.7145 li
268.858 19.6095 li
268.834 19.6185 li
269.123 19.4985 li
269.099 19.5085 li
269.381 19.3745 li
269.358 19.3855 li
269.632 19.2375 li
269.61 19.2505 li
269.876 19.0895 li
269.856 19.1025 li
270.113 18.9285 li
270.093 18.9425 li
270.342 18.7555 li
270.323 18.7705 li
270.563 18.5715 li
270.545 18.5875 li
270.775 18.3765 li
270.758 18.3935 li
270.979 18.1715 li
270.962 18.1885 li
271.172 17.9565 li
271.157 17.9745 li
271.357 17.7315 li
271.342 17.7495 li
271.53 17.4965 li
271.517 17.5155 li
271.694 17.2535 li
271.681 17.2725 li
271.846 17.0015 li
271.835 17.0215 li
271.988 16.7405 li
271.977 16.7615 li
272.117 16.4725 li
272.107 16.4945 li
272.234 16.1975 li
272.226 16.2195 li
272.339 15.9155 li
272.332 15.9375 li
272.431 15.6265 li
272.425 15.6485 li
272.51 15.3305 li
272.505 15.3545 li
272.576 15.0295 li
272.571 15.0535 li
272.627 14.7235 li
272.623 14.7475 li
272.664 14.4115 li
272.662 14.4355 li
272.686 14.0955 li
272.685 14.1195 li
272.693 13.7745 li
272.693 13.7985 li
272.685 13.4535 li
272.686 13.4775 li
272.662 13.1375 li
272.664 13.1615 li
272.623 12.8255 li
272.627 12.8495 li
272.571 12.5195 li
272.576 12.5435 li
272.505 12.2185 li
272.51 12.2425 li
272.425 11.9245 li
272.431 11.9465 li
272.332 11.6355 li
272.339 11.6575 li
272.226 11.3535 li
272.234 11.3755 li
272.107 11.0785 li
272.117 11.1005 li
271.977 10.8115 li
271.988 10.8325 li
271.835 10.5515 li
271.846 10.5715 li
271.681 10.3005 li
271.694 10.3195 li
271.517 10.0575 li
271.53 10.0765 li
271.342 9.82352 li
271.357 9.84152 li
271.157 9.59851 li
271.172 9.61652 li
270.962 9.38452 li
270.979 9.40152 li
270.758 9.1795 li
270.775 9.1965 li
270.545 8.9855 li
270.563 9.00153 li
270.323 8.80252 li
270.342 8.8175 li
270.093 8.63052 li
270.113 8.6445 li
269.856 8.47052 li
269.876 8.48352 li
269.61 8.32251 li
269.632 8.33551 li
269.358 8.1875 li
269.381 8.19852 li
269.099 8.06451 li
269.123 8.07452 li
268.834 7.9545 li
268.858 7.9635 li
268.563 7.85852 li
268.588 7.86652 li
268.286 7.77652 li
268.312 7.78351 li
268.004 7.7085 li
268.03 7.7135 li
267.717 7.65552 li
267.744 7.65952 li
267.426 7.61652 li
267.452 7.61951 li
267.13 7.59351 li
267.156 7.59552 li
266.83 7.58652 li
266.856 7.58652 li
266.53 7.59552 li
266.556 7.59351 li
266.234 7.61951 li
266.26 7.61652 li
265.942 7.65952 li
265.969 7.65552 li
265.656 7.7135 li
265.682 7.7085 li
265.374 7.78351 li
265.4 7.77652 li
265.098 7.86652 li
265.123 7.85852 li
264.828 7.9635 li
264.852 7.9545 li
264.563 8.07452 li
264.587 8.06451 li
264.305 8.19852 li
264.328 8.1875 li
264.054 8.33551 li
264.076 8.32251 li
263.81 8.48352 li
263.83 8.47052 li
263.573 8.6445 li
263.593 8.63052 li
263.344 8.8175 li
263.363 8.80252 li
263.123 9.00153 li
263.141 8.9855 li
262.911 9.1965 li
262.928 9.1795 li
262.707 9.40152 li
262.724 9.38452 li
262.514 9.61652 li
262.529 9.59851 li
262.329 9.84152 li
262.344 9.82352 li
262.156 10.0765 li
262.169 10.0575 li
261.992 10.3195 li
262.005 10.3005 li
261.84 10.5715 li
261.851 10.5515 li
261.698 10.8325 li
261.709 10.8115 li
261.569 11.1005 li
261.579 11.0785 li
261.452 11.3755 li
261.46 11.3535 li
261.347 11.6575 li
261.354 11.6355 li
261.255 11.9465 li
261.261 11.9245 li
261.176 12.2425 li
261.181 12.2185 li
261.11 12.5435 li
261.115 12.5195 li
261.059 12.8495 li
261.063 12.8255 li
261.022 13.1615 li
261.024 13.1375 li
261 13.4775 li
261.001 13.4535 li
260.993 13.7985 li
f
.92929 .8793 .88968 .79928 cmyk
%ADOBeginSubsetFont: JBAAAA+ArialMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/JBAAAA+ArialMT 9 GetGlyphDirectory
36 <001C60D8A8C9B64EDFED26B9E21A4F64848088903AC9891CF791BDBC4AB2
9ACC8B3E8D13924A7DDE35F09AC5F4A8229C87124C732743268600EF8D458220
8BD16D82> |
71 <001C60D8A8C9B7EF322407C6655A1B3652DB8522EB511BE6B0855A72D962
1458876CAD1FA22A00635F436A34E23EAFC09C394044ECC1389CD99E4AF1C1F6
DD52305C78619784840FC37A805B0805EF290BC9E049CF068290816CB7E74DB6
12941355BCE71CBDD11DD0F9CA29531036ED13EFB9CAB613E9F630FBBC9408EF
13CE4683D92968530F64760C3DF85C7C7EA06EBA8BF859> |
89 <001C60D8A8C9B7A73DB99D94C9412F55B03E92C174A4755E69F97C27D916
2B37724F74F272B140D258652D102C2EAC46833C73F9> |
76 <001C60D8A8C9B88C087228DFC7C7ABCC71B868F57EDB285655227000619B
171C8A80AB> |
38 <001C60D8A8C9B6079F6D1C46AC2732DFBDC9143C94793529C1940296210A
AD6EE09C39CFC4DAB7C5F3BA33C9E10838E0BC6FC9318A4E57F309EE20438B43
4C69AE73A499211EBA75E22A57C1581D93869428818DC700A28C027571D7047C
DFA8B017AACDE96DE4B2579EFD2C826A30F6EBDDC52701A22CDD669ADC60B66F
32261A1F55EDEF9802FD4511E0EF130772EDFD708A4113A1EDB1E717E0FA7D31
4851DE59> |
73 <001C60D8A8C9B854D0F47057B2F13303E258FCAEE9E8BBA6E28AE872907C
5663BFD2A0F535ED0EB011F2C2A875E053FAF73E8AA16B1F99510A6812F90D61
CF3F1DA5EF558899A9AE12AAF6AF4568E0F6003B0A2FF6F33293> |
70 <001C60D8A8C9B7A73DB9D8FD6AA4FBAF8D65C36EA1D4AADBD389F972C0ED
CE9E7F36285FA93A80D3647871D2CE5AAAA6A6A370DC54E1595FB6AAB3E389C9
F7BBBB85F787D6C418B35B940450E5E243895ECFD2205F51B2D154CFFECF3414
8C344C1EF806F9AAF539FB961E3EFAF6353381E833DF7C0542FFF27122A28D36
548FE63FC8465B1B685766E782F0> |
87 <001C60D8A8C9B854D0F45CF665C7276F8075B54A4ECD6470F395A458CA2D
065152075036EEECA213894C1EA0DACFBD370590F4B831924E5BDA5281442349
CFAD2545E0750C3004A129C25B1EAA8DEF5DA8BF1998E80AE266F591E64CB512
7F5C42C88FB43C> |
81 <001C60D8A8C9B7EF322B3BE19FB964E04D2DB06D4930CA5D8F41D2EF3A28
5C0BD536CD2C57668EB9E30311BF9A2872DFB44F2BF2A4683B5D66FA01BB1CCD
ADE9C8A9EE2CB010715D3D6DFF0E843CF77C87A07D1DBD0482675E3CA1DAA2A5
203A8015DD09B7CE> |
!
end
end end
%ADOEndSubsetFont
AFOLOL+ArialMT [18 0 0 -18 0 0 ]msf
278.393 19.4361 mo
(\000$\000G\000Y\000H\000U\000V\000D\000U\000L\000D\000O\000\003\000V\000D\000P\000S\000O\000H\000V)
[12.0042 10.0061 8.99808 10.0061 5.99194 8.99808 10.0061 5.99194 3.99408 10.0061 3.99408 5.00208 
8.99808 10.0061 14.9919 10.0061 3.99408 10.0061 0 ]xsh
27.3435 55.6863 mo
(\000&\000O\000D\000V\000V\000L\000I\000L\000F\000D\000W\000L\000R\000Q\000\003\000H\000U\000U\000R\000U)
[12.9941 3.99408 10.0061 8.99808 8.99808 3.99408 5.00208 3.99408 8.99808 10.0061 5.00208 3.99408 
10.0061 10.0061 5.00208 10.0061 5.99194 5.99194 10.0061 0 ]xsh
0 .9617 .90481 0 cmyk
AFOLOK+STHupo [18 0 0 -18 0 0 ]msf
8.89348 54.9861 mo
(\002A)sh
AFOLOK+STHupo [18 0 0 -18 0 0 ]msf
8.89348 54.9861 mo
(\002A) false chp
.515 lw
@
.92929 .8793 .88968 .79928 cmyk
%ADOBeginSubsetFont: JBAAAA+ArialMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/JBAAAA+ArialMT 3 GetGlyphDirectory
39 <001C60D8A8C9B6079F6249419CF69509002AC79A016C34D114AD8C7A9DD2
474EBE314027FB7E1F48C795DC0A22C11652551956D26D402DBF3954D5C55EED
C4D2E02D32263ABBF714C52111C5848A3EB8C8B527B0FF3362F75E292ACAF797
67633E5CF98F1E087651E36E4721AF4CBDAC7E4D68359E9108BDBBEA294A0489
068CBF65F37E7CD4C7284AEAF641D010DF> |
69 <001C60D8A8C9B7EF322B32790B4C40581173F160A628925C2B3464303D1D
06742E51EAF8B24CA2240525B9E37D08039C077561F794D203DE8C21652F0F5A
81A2CE84BC5F560E6CA22CB86602E80E4BBDAC611F34E85189D165B97A2D648C
F626A92F4026AFF0CA38E8E165B7E956CB11B132485900857B09AC55401998CA
DA1EAAF79B76AA2B52CCF0307B360E6D> |
88 <001C60D8A8C9B7EF32240889FE90FF09F794E92023A18223CCBE3629AB7F
517D090BF7D55C0A5A8EADD9BE381137FE8504E8B2DB3D16839889E327241ACA
8F992A2BB9AD2BCE57ADB306CE2789439E67A64C32BE8669C197F5851EE38793
990906DA8D7F8ACFF6D70790F06B02> |
!
end
end end
%ADOEndSubsetFont
AFOLOL+ArialMT [18 0 0 -18 0 0 ]msf
278.393 56.4855 mo
(\000'\000H\000F\000L\000V\000L\000R\000Q\000\003\000E\000R\000X\000Q\000G\000D\000U\000L\000H\000V)
[12.9924 10.0044 8.99643 3.99243 8.99643 3.99243 10.0044 10.0044 5.00043 10.0044 10.0044 10.0044 
10.0044 10.0044 10.0044 5.9903 3.99243 10.0044 0 ]xsh
225.8 45.5865 mo
269 44.9865 li
268.986 43.9865 li
225.786 44.5865 li
225.8 45.5865 li
.64495 .27805 0 0 cmyk
f
225.797 55.9865 mo
228.197 55.9535 li
228.189 55.3535 li
225.789 55.3865 li
225.797 55.9865 li
cp
229.997 55.9285 mo
232.397 55.8945 li
232.388 55.2945 li
229.988 55.3285 li
229.997 55.9285 li
cp
234.196 55.8695 mo
236.596 55.8365 li
236.588 55.2365 li
234.188 55.2695 li
234.196 55.8695 li
cp
238.396 55.8115 mo
240.796 55.7785 li
240.787 55.1785 li
238.388 55.2115 li
238.396 55.8115 li
cp
242.596 55.7535 mo
244.995 55.7195 li
244.987 55.1195 li
242.587 55.1535 li
242.596 55.7535 li
cp
246.795 55.6945 mo
249.195 55.6615 li
249.187 55.0615 li
246.787 55.0945 li
246.795 55.6945 li
cp
250.995 55.6365 mo
253.394 55.6035 li
253.386 55.0035 li
250.986 55.0365 li
250.995 55.6365 li
cp
255.194 55.5785 mo
257.594 55.5445 li
257.586 54.9445 li
255.186 54.9785 li
255.194 55.5785 li
cp
259.394 55.5195 mo
261.794 55.4865 li
261.785 54.8865 li
259.386 54.9195 li
259.394 55.5195 li
cp
263.593 55.4615 mo
265.993 55.4285 li
265.985 54.8285 li
263.585 54.8615 li
263.593 55.4615 li
cp
267.793 55.4035 mo
268.997 55.3865 li
268.989 54.7865 li
267.785 54.8035 li
267.793 55.4035 li
f
grestore
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/AFOLOK+STHupo-Identity-H uf
/AFOLOK+STHupo /CIDFont ur
/AFOLOL+ArialMT-Identity-H uf
/AFOLOL+ArialMT /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
