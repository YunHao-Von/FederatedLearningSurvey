%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: <7ED8><56FE>-<51AF><4E91><6D69>.pdf
%%Creator: Adobe Acrobat 20.6.0
%%For: A
%%CreationDate: 2023/9/21, 12:54:46
%%BoundingBox: 0 0 960 540
%%HiResBoundingBox: 0 0 960 540
%%CropBox: 0 0 960 540
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1057 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   pdfx:Comments=""
   pdfx:Company=""
   pdfx:SourceModified="D:20230921125413+04'54'"
   xmp:CreateDate="2023-09-21T12:54:13+04:30"
   xmp:CreatorTool="WPS 演示"
   xmp:ModifyDate="2023-09-21T12:54:13+04:30"
   pdf:Keywords=""
   pdf:Producer=""
   pdf:Trapped="False">
   <dc:creator>
    <rdf:Seq>
     <rdf:li/>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -540 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 540 li
960 540 li
960 0 li
cp
clp
gsave
0 0 mo
960 0 li
960 540 li
0 540 li
cp
eclp
0 0 mo
960 0 li
960 540 li
0 540 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
gsave
152.081 353.4 mo
149.838 353.381 li
147.64 353.325 li
145.516 353.234 li
143.475 353.11 li
141.529 352.953 li
139.687 352.767 li
137.965 352.552 li
137.138 352.433 li
136.35 352.308 li
135.594 352.176 li
134.871 352.036 li
134.181 351.89 li
133.525 351.736 li
132.902 351.574 li
132.314 351.404 li
131.757 351.223 li
131.232 351.029 li
130.734 350.819 li
130.26 350.585 li
129.804 350.318 li
129.36 349.997 li
128.927 349.592 li
128.562 349.115 li
128.361 348.737 li
128.219 348.365 li
128.126 347.956 li
128.1 347.61 li
128.1 230.3 li
128.106 230.47 li
128.099 230.377 li
128.149 230.706 li
128.128 230.613 li
128.219 230.913 li
128.183 230.821 li
128.301 231.079 li
128.252 230.987 li
128.448 231.293 li
128.31 231.112 li
128.564 231.393 li
128.373 231.214 li
128.591 231.393 li
128.348 231.218 li
128.526 231.334 li
128.233 231.162 li
128.378 231.24 li
128.036 231.072 li
128.154 231.126 li
127.765 230.961 li
127.863 231 li
127.427 230.839 li
127.509 230.868 li
127.029 230.712 li
127.099 230.733 li
126.575 230.581 li
126.635 230.598 li
126.069 230.451 li
126.122 230.464 li
125.516 230.322 li
125.562 230.332 li
124.917 230.195 li
124.958 230.204 li
124.275 230.072 li
124.312 230.079 li
123.592 229.953 li
123.626 229.959 li
122.871 229.839 li
122.903 229.844 li
122.114 229.73 li
122.157 229.735 li
120.482 229.527 li
120.534 229.533 li
118.741 229.351 li
118.787 229.355 li
116.886 229.203 li
116.929 229.206 li
114.931 229.084 li
114.971 229.086 li
112.887 228.997 li
112.926 228.998 li
110.767 228.943 li
110.805 228.944 li
90.6 228.774 li
90.6 224.576 li
110.805 224.406 li
110.767 224.407 li
112.926 224.352 li
112.887 224.353 li
114.971 224.264 li
114.931 224.266 li
116.929 224.144 li
116.886 224.147 li
118.787 223.995 li
118.741 223.999 li
120.534 223.817 li
120.482 223.823 li
122.157 223.615 li
122.114 223.62 li
122.903 223.506 li
122.871 223.511 li
123.626 223.391 li
123.592 223.397 li
124.312 223.271 li
124.275 223.278 li
124.958 223.146 li
124.917 223.155 li
125.562 223.018 li
125.516 223.028 li
126.122 222.886 li
126.069 222.899 li
126.635 222.752 li
126.575 222.769 li
127.099 222.617 li
127.029 222.638 li
127.509 222.482 li
127.427 222.511 li
127.863 222.35 li
127.765 222.389 li
128.154 222.224 li
128.036 222.278 li
128.378 222.11 li
128.233 222.188 li
128.526 222.016 li
128.348 222.132 li
128.591 221.957 li
128.373 222.136 li
128.564 221.957 li
128.31 222.238 li
128.448 222.057 li
128.252 222.363 li
128.301 222.271 li
128.183 222.529 li
128.219 222.437 li
128.128 222.737 li
128.149 222.644 li
128.099 222.973 li
128.106 222.88 li
128.1 223.05 li
128.1 105.74 li
128.126 105.394 li
128.219 104.985 li
128.361 104.613 li
128.562 104.235 li
128.927 103.758 li
129.36 103.353 li
129.804 103.032 li
130.26 102.765 li
130.734 102.531 li
131.232 102.321 li
131.757 102.127 li
132.314 101.946 li
132.902 101.775 li
133.525 101.614 li
134.181 101.46 li
134.871 101.314 li
135.594 101.174 li
136.35 101.042 li
137.138 100.917 li
137.965 100.798 li
139.687 100.583 li
141.529 100.397 li
143.475 100.24 li
145.516 100.116 li
147.64 100.025 li
149.838 99.969 li
152.081 99.95 li
152.119 104.45 li
149.895 104.469 li
149.933 104.468 li
147.774 104.523 li
147.813 104.522 li
145.729 104.611 li
145.769 104.609 li
143.771 104.731 li
143.814 104.728 li
141.913 104.88 li
141.959 104.876 li
140.166 105.058 li
140.218 105.052 li
138.543 105.26 li
138.586 105.255 li
137.797 105.369 li
137.829 105.364 li
137.074 105.484 li
137.108 105.478 li
136.388 105.604 li
136.425 105.597 li
135.742 105.729 li
135.783 105.72 li
135.138 105.857 li
135.184 105.847 li
134.578 105.989 li
134.631 105.976 li
134.065 106.123 li
134.125 106.106 li
133.601 106.258 li
133.671 106.237 li
133.191 106.393 li
133.273 106.364 li
132.837 106.525 li
132.935 106.486 li
132.546 106.651 li
132.664 106.597 li
132.322 106.765 li
132.467 106.687 li
132.174 106.859 li
132.352 106.743 li
132.109 106.918 li
132.327 106.739 li
132.136 106.918 li
132.39 106.637 li
132.252 106.818 li
132.448 106.512 li
132.399 106.604 li
132.517 106.346 li
132.481 106.438 li
132.572 106.138 li
132.551 106.231 li
132.601 105.902 li
132.594 105.995 li
132.6 105.825 li
132.6 223.135 li
132.574 223.481 li
132.481 223.89 li
132.339 224.262 li
132.138 224.64 li
131.773 225.117 li
131.34 225.522 li
130.896 225.843 li
130.44 226.11 li
129.966 226.344 li
129.468 226.554 li
128.943 226.748 li
128.386 226.929 li
127.798 227.1 li
127.175 227.261 li
126.519 227.415 li
125.829 227.561 li
125.106 227.701 li
124.35 227.833 li
123.562 227.958 li
122.735 228.077 li
121.013 228.292 li
119.171 228.478 li
117.225 228.635 li
115.184 228.759 li
113.06 228.85 li
110.862 228.906 li
108.619 228.925 li
108.619 224.425 li
110.862 224.444 li
113.06 224.5 li
115.184 224.591 li
117.225 224.715 li
119.171 224.872 li
121.013 225.058 li
122.735 225.273 li
123.562 225.392 li
124.35 225.517 li
125.106 225.649 li
125.829 225.789 li
126.519 225.935 li
127.175 226.089 li
127.798 226.25 li
128.386 226.421 li
128.943 226.602 li
129.468 226.796 li
129.966 227.006 li
130.44 227.24 li
130.896 227.507 li
131.34 227.828 li
131.773 228.232 li
132.138 228.71 li
132.339 229.088 li
132.481 229.46 li
132.574 229.869 li
132.6 230.215 li
132.6 347.525 li
132.594 347.355 li
132.601 347.448 li
132.551 347.119 li
132.572 347.212 li
132.481 346.912 li
132.517 347.004 li
132.399 346.746 li
132.448 346.838 li
132.252 346.532 li
132.39 346.713 li
132.136 346.432 li
132.327 346.611 li
132.109 346.432 li
132.352 346.607 li
132.174 346.491 li
132.467 346.663 li
132.322 346.585 li
132.664 346.753 li
132.546 346.699 li
132.935 346.864 li
132.837 346.825 li
133.273 346.986 li
133.191 346.957 li
133.671 347.113 li
133.601 347.092 li
134.125 347.244 li
134.065 347.227 li
134.631 347.374 li
134.578 347.361 li
135.184 347.503 li
135.138 347.493 li
135.783 347.63 li
135.742 347.621 li
136.425 347.753 li
136.388 347.746 li
137.108 347.872 li
137.074 347.866 li
137.829 347.986 li
137.797 347.981 li
138.586 348.095 li
138.543 348.09 li
140.218 348.298 li
140.166 348.292 li
141.959 348.474 li
141.913 348.47 li
143.814 348.622 li
143.771 348.619 li
145.769 348.741 li
145.729 348.739 li
147.813 348.828 li
147.774 348.827 li
149.933 348.882 li
149.895 348.881 li
152.119 348.9 li
152.081 353.4 li
clp
90.6 99.95 mo
152.119 99.95 li
152.119 353.4 li
90.6 353.4 li
cp
level3{
gsave
clp
[1 0 0 1 0 0 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [90.6 99.95 152.119 99.95 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~XoQ<=XoQ9<XoQ9<XoQ9<XoQ9<XoQ6;XoQ6;XoQ6;XoQ6;XoQ3:XoQ3:XoQ3:XoQ3:XoQ09XoQ09Y5l9:
Y5l9:Y5l69Y5l69Y5l69Y5l69Y5l38Y5l38Y5l38Y5l38Y5l38Y5l07Y5l07Y5l07Y5l07Y5l07YQ267
YQ267YQ267YQ267YQ267YQ267YQ267YQ236YQ236YQ236YQ236YQ236YQ236YQ205YQ205YlM96YlM96
YlM96YlM96YlM65YlM65YlM65YlM65YlM34YlM34YlM34YlM34YlM03Z2h94Z2h94Z2h94Z2h94Z2h63
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~Z2h63Z2h63Z2h63Z2h63ZN.?4ZN.?4ZN.?4ZN.<3ZN.<3ZN.<3ZiIE4ZiIE4ZiIE4ZiIB3ZiIB3ZiIB3
ZiIB3[/dK4[/dH3[/dH3[/dH3[/dH3[/dH3[K*N3[K*N3[K*N3[K*N3[K*N3[fET3[fET3[fET3\,`]4
\,`]4\,`]4\H&f5\H&f5\H&f5\H&f5\cAo6\cAo6\cAo6\cAl5])\u6])\u6])\u6])\u6]E#&6]E#&6
]E#&6]E#&6]`>,6]`>,6]`>,6]`>,6]`>,6^&Y26^&Y26^&Y26^&Y26^&Y26^At86^At86^At86^B(>7
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~^B(>7^]LJ8^]^V:^]g\;_$6h<_$Ht>_$R%?_@!1@_@*7A_@<@B_@EFC_[iUE_[rXE_\/dG_\8jH_\AmH
`"f'J`"o-K`##0K`#,6L`#>BN`>bNO`>kTP`>tZQ`?(]Q`?1cR`ZUrT`Z^uT`Zh&Ua!75Wa!I>Xa!RDY
a![JZa=*V[a=3\\a=<b]a=Ee]aXit_aXs%`aY'(`aY0.aatT=catfFdatoLeb;>Xfb;G^gb;Pagb;Ygh
bW)!jbW2$jbW;*kbWD-kbrh<mbrq?mbs.Hnbs7Nobs@Tpc9d`qc9mfrc:*osc:3utcUX,ucUa3!cUj9"
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~cUj9"cq9E#cqKQ%cqTT%d8#c'd8,f'd8>o(dSc)*dSu2+doDA-doMD-e6%Y0e6.\0e6@h2e6Ik2eR"+5
eR+.5eR=76emaF8f49X:f4B^;fOop=fP$!?fkQ3AfkZ6Ag2)ECg2;NDg2DQDgMqfGgN%iGgN7uIgi\,J
gin5Kgj";Lh0FGMh0OJNhL'\PhL0_PhL9eQhg]qShgp%Ti.?1Ui.H4UiIl@ViJ)LXieMXYieV[YiehdZ
j,7s\j,A!\jGn3_jH"6_jcFB`jcXKak*'Wbk*9cdkE]oekEp#fka?/fkaQ;hkacDil(2Pjl(;SjlC__k
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.25 .5 .75 ]
/Encode [0 1 0 1 0 1 0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1 0 0 1 0 0 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~Y-+q1Y-+q1Y-+q1Y-+q1YHP.5YHP.5YHP.5YHP.5Yct@9Yct@9Yct@9Yct@:Z*CR=Z*CR=Z*CR=ZEgdA
ZEgdAZEpmDZa7!F['[3I['[6K[C*EM[^NWQ[^W`T\@B&Z\[f8^]"5Jb]=Y\f]Y(nj]tM+m^:q=q^;%Ft
^V@S"^qmk'_SX1,_o'C0_o0L3`5KX6`Pog9`l?'>a2c9BaN2KFaiV]Jb0.uObKS2Sbg"DWc-=PZcHab^
cd0tbd*^7gdaHUneC<!te^`4$f@S[-g"G*5g=tB:gt^]@h;7#Fhr!AMiSieUioB([jQ5Lck3(pkkih9q
~>
<~zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz!<E9*"U>;>$4I@R%hTEf'GVB")&aG6*?H:F+X/0X-7:2j.P!
&%/h\n61GgsI2`NfY4$5Yj5X@_(77Kd<8P)QK9hnM^;cHau=B\p7?=72OA7fIgC27[(E,fr@G'A1VH@1
-iIt<3(KSG8<MMmFRO-#NgQ'Rf*S"6.C~>
<~_SO()_8*k%^q[Y!^V7Fr^:h4n]tD"j]Y(kg]=Y\d]"5Ja]"5G_\[f8]\@B&Y\@B#W\$rfS[^NTO[C*EL
['[3I['[3HZa7!EZa-mBZEga?Z*CR<Yct@9YHP.5YHP.5YHP.5YHG%2Y-+n/Xf\\+XK8M(X/i;%WiE)!
Wi;tsW2QYmVl$>gV5:#aUnjc\US=KWTqS0QTV.pLT:VXGSXl=AS=H(<R[TY4R@'A.Q^3o%Q'@MsPEM)l
P*(lgOH5E^NK&mUMi3IMM26tCLPCP;KS4u0Jq8K'It)oqI!^3dH$FOVG'.nJF)l8>Df0E/Chmd#BkV-k
~>
<~zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz!!!!"!<E3%!<E3%!<E3%!WiE)!s
8W-!s8W-!s8W."9\i1"9\f/!s8W-~>
]
>>
90.6 99.95 152.119 99.95 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
grestore
.92929 .879301 .889677 .799283 cmyk
%ADOBeginSubsetFont: PAAAAA+Arial-BoldMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (PAAAAA+Arial-BoldMT)
%%Title: (PAAAAA+Arial-BoldMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /PAAAAA+Arial-BoldMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-628 -376 2000 1056} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 4503 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 16 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A93
6AA182F5809A9> |
39 <001C60D8A8C9B6079F41181AF4EB36AA0D0A9CB43D77E9AB20A6E8CC956A
65DB49EB6635E16A93399048C7FF414644050887228FE6A7D0206D976F49A17D
261AA33D3EBB94BE961959DEF2B6629671CF61014D6F7BD7E457F47E2A8118C5
2D305371EF3BCBDE1CFFB87BA758D818C2C45B8180F337D5F9BDA254CBE936AE
CDBA1BA66E23577AFD9B2756741C424503> |
72 <001C60D8A8C9B7EF322BF270AB151730C1576B3DBF6DAC6B05EF7C7C2AC3
550E4D7D76EEB5EC00E2AE0B63EA674701E41362C9EF4C943E6044930A81C028
8C730E9CD4222EC82D37FE43450E9A846C17FEBAA9742B3180B655FFA4E0E014
EF214E09E7DE6E45A7476C6DEA21B47E198DDC2AD648DA39E6CBF2981071855A
A94524E4E0809AB2B25573430347DD> |
73 <001C60D8A8C9B81F2C5A71D50B9B0701F5A31E22DDFBF554FF2D149AB14D
DEFC1B9ADBD8105EC88497FBC09B03794C95967111EB4354C8578F0E04207510
7F9743D9A4F26007EA81109EB5443BB577E4EC9F8677529403BA64E3F5> |
81 <001C60D8A8C9B7D8BE193B13518E6892DBA9B266D0A17D5C8CBB8FCA3DEC
31FFDE21FB19188C5C709BB859EE16635D8123C09E9F6380448F624FEDEAFC78
CB8E4436A865BB0CB81152FE1F90E6EB1DE7D9B62F15D5F2855507D6B695B1CC
6AFD11F003818163793142F6A0F46BD84EFADF> |
86 <001C60D8A8C9B7EF322FE651D521834CDC537E3DD6EDE0ABF561677B8E07
6DDC9728066ABB56D1B743872DFE7AE020F0764CE3958A51AA0338BC1551D98A
E3FB37FA10E152AF1ED0A626D6C892D666067C463296034FB47068E23F64D994
06EC5C2C17229C4A63CE0EFA8720ACDB7F7406ADA1BC78971EA6415F06129169
2781A355051246F6EE6DC9DD910EE9B57ECB7AA0A970570176A3D15D1E3F2012
D47AFFA014792503A125E8700D4C4B9A85575792648D6CE60E59BBF3015C0285
B0> |
3 <001C60D8A8C9B854D00D> |
68 <001C60D8A8C9B7EF322B767253CD3BE18E6883E9BFEE680E471A3E543E6B
629FFE599C78BF6E9BC360B4FD3F4193BE88F8A133134BAA650EBC31A9DBCA73
D443463241F1A95A036612031AED6950283B0D14D29C497685C55C7946BF118B
40E370FC30C35C6DDC0B89863AEC8E7000DED8B394346462262BD43999923C02
BB76E45D38F5FACA7247DBA2EBA6371EEFDE7DB20E4C849532AD601D5FE565E2
F9524F3166F0EDA1C9CBD6F2D9FAE6CBD991E5FC9CACD3E5ACCC612FA46CAB68
3778C9E93119C2E309BBBA2FB6B108D4ACC24630A4E27912F2F48E37DD6F256C
920ECC30772CD6DD1CCCB84D330E3FAA> |
74 <001C60D8A8C9B7D8BE2780ECF91BB8FE73517B0190DDC8DBC9897295332E
6D8EF13268DE217D7EA63F2C2488BA6624154001DFCD86A24A51CFE6922F8614
F4FD4481342B3992244B419F0D448BA14CBCD530939FD538BD00615A031E3CBF
1609B0E4C3D7F5A051C575D052C1A51F88B318CA9D0C7CFDFA53AA8FB2F2EE27
4EE2F4C85657CA9E748262BB03EF446591D320994414EE439D72B9883F38366A
41CF501DCE32006C591422CCF439307E4D3088D90FF7CD2955301C96A46D1D15
45AF9D499025D541CB2077BD42919F91257F222D868E80527F0D65> |
76 <001C60D8A8C9B854D0F456B21D2F64F910BA7B8B592C84A4B1CA21D58F66
78BEC800D8864E53D53A> |
87 <001C60D8A8C9B81F2C3AD0BF8CA40D7105A9B3D27345F202DEBDE44606EF
D0E90137AE13DC9D19FB7B4ABCA40FDADEB59FF02A690A47D6F26E8BDAADCFC0
513C14FCD80BF39C6AFCEFE1132622D45FBB576E32F86682C5BCCAD00B4E7E37
5350009EFCA5AC835906F56B697B29> |
51 <001C60D8A8C9B64EDFF4BBA9405C68CB1D32394A0B35B38FF15650A7F4CA
980D304B0E82F2EE31DE1B207C9690A7D1CE7998A46A2671A721A2721266CDB3
CB7162FB8735F8901B59D497FC48B1C8BA82BBC82DEF38A7FA67F275089B99C0
47F77478B3299CF33148E1E790C5C7235CAB593CF69659FDEE7364A65AC06E62
96> |
82 <001C60D8A8C9B7D8BE34A30C11766266259B98A0BA89715D82F7092153A6
228252D7594BDD75B2A7C57DC89088F8B1FFC43993725AE434A67B356F5F6B64
D528A1696640F00DD016EBC232B8C863EA85B4B724E805002B9447A61792050E
5F2AB51B8800BF6303526C74FB360B7027D54FFCEDAF13BF8EA7CB1A81691C0A
4FB25E1EA64C0904433C6A5F35BBF9DD5C4CBFC1A5> |
48 <001C60D8A8C9B6B41CBB10CBFB014CB2DAA60D1E6213C9A6221D8277F76E
5B198F877B8BD7F16B9ED33B8CC69F5CB1810DCABD4C90C49E0AA0E1EE> |
71 <001C60D8A8C9B7D8BE1937528A8A04A3F08B6D80EAB145BDD9DBE53FB1B7
0A6DDBF10422FFF8F4C48F788DD104B24EA5229392446A977753676010F47763
954952B19E372D9318BC5C7A48B7A85FDEA74862756E58887CA2F53B9D7C319D
D7A84656FBF89C0C66533E86D0B18AA2C13EC41ADA69D4E07EF68978C6DC11D8
A9705A6EC736D21DD4607DF3> |
79 <001C60D8A8C9B854D0F4565C5D96D196F316A2594284F4> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /PAAAAA+Arial-BoldMT-Identity-H /Identity-H 0 [/PAAAAA+Arial-BoldMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/OSUAYG+Arial-BoldMT /PAAAAA+Arial-BoldMT-Identity-H findfont ct_VMDictPut
OSUAYG+Arial-BoldMT [18 0 0 -18 0 0 ]msf
165.3 108.4 mo
(\000')sh
178.3 108.4 mo
(\000H)sh
188.3 108.4 mo
(\000I)sh
194.3 108.4 mo
(\000H)sh
204.3 108.4 mo
(\000Q)sh
215.3 108.4 mo
(\000V)sh
225.3 108.4 mo
(\000H)sh
235.3 108.4 mo
(\000\003)sh
240.3 108.4 mo
(\000D)sh
250.3 108.4 mo
(\000J)sh
261.3 108.4 mo
(\000D)sh
271.3 108.4 mo
(\000L)sh
276.3 108.4 mo
(\000Q)sh
287.3 108.4 mo
(\000V)sh
297.3 108.4 mo
(\000W)sh
303.3 108.4 mo
(\000\003)sh
165.3 130 mo
(\000')sh
178.3 130 mo
(\000D)sh
188.3 130 mo
(\000W)sh
194.3 130 mo
(\000D)sh
204.3 130 mo
(\000\003)sh
209.3 130 mo
(\0003)sh
221.3 130 mo
(\000R)sh
232.3 130 mo
(\000L)sh
237.3 130 mo
(\000V)sh
247.3 130 mo
(\000R)sh
258.3 130 mo
(\000Q)sh
269.3 130 mo
(\000L)sh
274.3 130 mo
(\000Q)sh
285.3 130 mo
(\000J)sh
159.3 357.85 mo
(\000')sh
172.3 357.85 mo
(\000H)sh
182.3 357.85 mo
(\000I)sh
188.3 357.85 mo
(\000H)sh
198.3 357.85 mo
(\000Q)sh
209.3 357.85 mo
(\000V)sh
219.3 357.85 mo
(\000H)sh
229.3 357.85 mo
(\000\003)sh
234.3 357.85 mo
(\000D)sh
244.3 357.85 mo
(\000J)sh
255.3 357.85 mo
(\000D)sh
265.3 357.85 mo
(\000L)sh
270.3 357.85 mo
(\000Q)sh
281.3 357.85 mo
(\000V)sh
291.3 357.85 mo
(\000W)sh
297.3 357.85 mo
(\000\003)sh
159.3 379.45 mo
(\0000)sh
174.3 379.45 mo
(\000R)sh
185.3 379.45 mo
(\000G)sh
196.3 379.45 mo
(\000H)sh
206.3 379.45 mo
(\000O)sh
211.3 379.45 mo
(\000\003)sh
216.3 379.45 mo
(\0003)sh
228.3 379.45 mo
(\000R)sh
239.3 379.45 mo
(\000L)sh
244.3 379.45 mo
(\000V)sh
254.3 379.45 mo
(\000R)sh
265.3 379.45 mo
(\000Q)sh
276.3 379.45 mo
(\000L)sh
281.3 379.45 mo
(\000Q)sh
292.3 379.45 mo
(\000J)sh
326.937 471.8 mo
325.687 471.789 li
324.46 471.758 li
323.274 471.707 li
322.134 471.638 li
321.047 471.551 li
320.016 471.446 li
319.048 471.326 li
318.146 471.189 li
317.315 471.036 li
316.555 470.867 li
315.866 470.678 li
315.263 470.47 li
314.96 470.342 li
314.682 470.204 li
314.41 470.045 li
314.141 469.851 li
313.873 469.601 li
313.618 469.265 li
313.414 468.819 li
313.35 468.397 li
313.35 364.767 li
313.367 364.992 li
313.351 364.888 li
313.47 365.285 li
313.423 365.183 li
313.595 365.47 li
313.518 365.369 li
313.687 365.556 li
313.581 365.457 li
313.726 365.576 li
313.591 365.479 li
313.71 365.556 li
313.547 365.461 li
313.643 365.513 li
313.453 365.419 li
313.532 365.455 li
313.315 365.363 li
313.409 365.399 li
312.899 365.223 li
312.993 365.252 li
312.387 365.086 li
312.457 365.103 li
311.761 364.948 li
311.816 364.959 li
311.035 364.816 li
311.081 364.824 li
310.222 364.694 li
310.261 364.699 li
309.33 364.583 li
309.364 364.587 li
308.366 364.486 li
308.398 364.489 li
307.34 364.404 li
307.369 364.406 li
306.257 364.338 li
306.284 364.339 li
305.124 364.29 li
305.15 364.29 li
303.949 364.26 li
303.975 364.26 li
290.75 364.149 li
290.75 361.351 li
303.975 361.24 li
303.949 361.24 li
305.15 361.21 li
305.124 361.21 li
306.284 361.161 li
306.257 361.162 li
307.369 361.094 li
307.34 361.096 li
308.398 361.011 li
308.366 361.014 li
309.364 360.913 li
309.33 360.917 li
310.261 360.801 li
310.222 360.806 li
311.081 360.676 li
311.035 360.684 li
311.816 360.541 li
311.761 360.552 li
312.457 360.397 li
312.387 360.414 li
312.993 360.248 li
312.899 360.277 li
313.409 360.101 li
313.315 360.137 li
313.532 360.045 li
313.453 360.081 li
313.643 359.987 li
313.547 360.039 li
313.71 359.944 li
313.591 360.021 li
313.726 359.924 li
313.581 360.043 li
313.687 359.944 li
313.518 360.131 li
313.595 360.03 li
313.423 360.317 li
313.47 360.215 li
313.351 360.612 li
313.367 360.508 li
313.35 360.733 li
313.35 257.103 li
313.414 256.681 li
313.618 256.235 li
313.873 255.899 li
314.141 255.649 li
314.41 255.455 li
314.682 255.296 li
314.96 255.158 li
315.263 255.03 li
315.866 254.822 li
316.555 254.633 li
317.315 254.464 li
318.146 254.311 li
319.048 254.174 li
320.016 254.054 li
321.047 253.949 li
322.134 253.862 li
323.274 253.793 li
324.46 253.742 li
325.687 253.711 li
326.937 253.7 li
326.963 256.7 li
325.725 256.71 li
325.751 256.71 li
324.55 256.74 li
324.576 256.74 li
323.416 256.789 li
323.443 256.788 li
322.331 256.856 li
322.36 256.854 li
321.302 256.939 li
321.334 256.936 li
320.336 257.037 li
320.37 257.033 li
319.439 257.149 li
319.478 257.144 li
318.619 257.274 li
318.665 257.266 li
317.884 257.409 li
317.939 257.398 li
317.243 257.553 li
317.313 257.536 li
316.707 257.702 li
316.801 257.673 li
316.291 257.849 li
316.385 257.813 li
316.168 257.905 li
316.247 257.869 li
316.057 257.963 li
316.153 257.911 li
315.99 258.006 li
316.109 257.929 li
315.974 258.026 li
316.119 257.907 li
316.013 258.006 li
316.182 257.819 li
316.105 257.92 li
316.277 257.633 li
316.23 257.735 li
316.349 257.338 li
316.333 257.442 li
316.35 257.217 li
316.35 360.847 li
316.286 361.269 li
316.082 361.715 li
315.827 362.051 li
315.559 362.301 li
315.29 362.495 li
315.018 362.654 li
314.74 362.792 li
314.437 362.92 li
313.834 363.128 li
313.145 363.317 li
312.385 363.486 li
311.554 363.639 li
310.652 363.776 li
309.684 363.896 li
308.653 364.001 li
307.566 364.088 li
306.426 364.157 li
305.24 364.208 li
304.013 364.239 li
302.763 364.25 li
302.763 361.25 li
304.013 361.261 li
305.24 361.292 li
306.426 361.343 li
307.566 361.412 li
308.653 361.499 li
309.684 361.604 li
310.652 361.724 li
311.554 361.861 li
312.385 362.014 li
313.145 362.183 li
313.834 362.372 li
314.437 362.58 li
314.74 362.708 li
315.018 362.845 li
315.29 363.005 li
315.559 363.199 li
315.827 363.449 li
316.082 363.785 li
316.286 364.231 li
316.35 364.653 li
316.35 468.283 li
316.333 468.058 li
316.349 468.162 li
316.23 467.765 li
316.277 467.867 li
316.105 467.58 li
316.182 467.681 li
316.013 467.494 li
316.119 467.593 li
315.974 467.474 li
316.109 467.571 li
315.99 467.494 li
316.153 467.589 li
316.057 467.537 li
316.247 467.631 li
316.168 467.595 li
316.385 467.687 li
316.291 467.651 li
316.801 467.827 li
316.707 467.798 li
317.313 467.964 li
317.243 467.947 li
317.939 468.102 li
317.884 468.091 li
318.665 468.234 li
318.619 468.226 li
319.478 468.356 li
319.439 468.351 li
320.37 468.467 li
320.336 468.463 li
321.334 468.564 li
321.302 468.561 li
322.36 468.646 li
322.331 468.644 li
323.443 468.712 li
323.416 468.711 li
324.576 468.76 li
324.55 468.759 li
325.751 468.79 li
325.725 468.79 li
326.963 468.8 li
326.937 471.8 li
.644953 .27805 0 0 cmyk
f
.92929 .879301 .889677 .799283 cmyk
%ADOBeginSubsetFont: UAAAAA+Arial-BoldItalicMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (UAAAAA+Arial-BoldItalicMT)
%%Title: (UAAAAA+Arial-BoldItalicMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /UAAAAA+Arial-BoldItalicMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-560 -376 1390 1018} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 3279 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 41 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A93
6AA182F5809A9> |
55 <001C60D8A8C9B7D8BE19FED925D9664338A8E5E586791ADBF32C3F58506E
33534CD4F74357CAC5DCE1> |
85 <001C60D8A8C9B7361F5EF709B7989AC3BC298794B6140D777839B5A64C01
3F0C5B98F7B8C3A392C57C88712E6D3D72BFB0244A1B98F5AC6EF74A203B4AEC
71CBFBEF6382C15BA91B> |
76 <001C60D8A8C9B854D0F404D3C2A96F9D07DC14A3CA0E60D784855FD9CE58
3EA7EBA0E2E0029C64C1FD6689> |
74 <001C60D8A8C9B7D8BE4BBB56159F6EEF7A9D7E8A196BBB978AFAC5D36E71
A0F24B30BB4A1B5B10E9AA7CBBB62826E8B120FDAE7186231DCB6E95547DE370
3A40384D4C861478CF109A506DD3CDBAAC6E5C0729DC036C5D8EAAD080AD330A
C865F9BF665B0A0CC79471469F3AAE05D350164D0F5932464C7A0FA860E50B8E
405242350E1CB55888115E061E4FF3255F51C4138A8027E43EDDE5569A8D4181
5E78C1D4C64B1BC3BF7F89635AFF2FCB151B40DB9E8CBF741674034A783056DF
D83909C1CD2E5E140A6297822093439BCD0613178B3F1EBD9FC45308DD08A236
8CB8C3C7F0DA915F094687E32FEAC82B72F737768D3C8769888FD0CD1B87E570
5735B1AD49E447> |
72 <001C60D8A8C9B7EF3224CFE21A04FB83F1C45A37777D179847B4EC86B168
1DF0F99CBBD414684BAFE73557D0E065AAAC81256CF83BE63EFBD3AF9BD69F9F
8714A4A2B32E3E594C3DF30F01568D0B36A70B75B5AADFF38717D024E3A1D9BC
4AEDF484C697CF9A2B7A61694B407AF3DBB6C86F1B9051369419BE53DEFC654B
2F835A366FFF7D34803565C3D20B2CABED35FFDE7B9891216B2A2B0E> |
86 <001C60D8A8C9B7EF32280D0539CF84650B688614275E0871239403AA3580
C8BC998B3BB0BB07FE79912857CCA48316BF744DC415525F1B76947DD17390E0
096E4CC55FC34EFC0CF030F6F9DEDE6AFBF579BB88F7A5077767B6093A27EB27
261895DFB13EE81E032AC3D37420D7F09263CB56E8CC834C458457216A61D6D4
F94836889488A46572633D364DBD4335022A50869080C31EE96ECB3F48329763
9253ABDCE8D54A8DC09631E717BE75D2E35452741AFF83B124BA3C5A365A7867> |
3 <001C60D8A8C9B854D00D> |
39 <001C60D8A8C9B6079F6211393AD632EDB9ED7BDDAAC47DF20EC679951F6F
CD8281F2D0086A3B0534F4D3E46C20E93DFB158769482EF11EE33A684157D147
94CAECDEC8DCF6E821D73B690177421A9FB1F38923DE228EBF0DF8FD2992B323
4E04BC93A89950ED8FD4601D3AB0B6584DA80E64AF0F1322C34A080D45C9ABED
076F7F9BAAFEC443FCDE119A660A9474DE23320B90DD8AF118> |
87 <001C60D8A8C9B81F2C3A9E0E06132F8F4B1C3FB8C9308FF348D7499041D3
19C23CB1F8F35D73FC57628E94A5E1415E7F8C21AF7F7FEB41FD85DA4A8E07B6
0FA348646665F2DDC7F11F619D8C64D721C1B9E434E4C1B55E94CBCAD2ED7A0C
984969C9882B8B26D45965FA> |
70 <001C60D8A8C9B7EF322BFFF4FC11B8E72A918192A1FCD03FE3798300D252
62E0CCB0E5394768BEAD0224EF1C4A6D80135BEC65B5188419123D714D41DF8A
5AD5C2B7642EA183E141DF72D766BA7DB82805C1B914F94DEA8D6D1133275C8A
F184804B3A3FD6A7823911998C2E23DA027F1B4490D724740968E0A54C610A3B
4D8529A9A3BD7B73C5ED06660E1E5B9B4AD2C9D7970096BC> |
82 <001C60D8A8C9B7D8BE05815300F68C3B4866D275EC023778C68EAB1494CF
6AE7F9A0FB880DAF0D3BA610746ECDB19529B382632608F5409D3FCF599EB134
F815EFC61AC49A05376F702A16F8C03B04D8726F28E546B110C97782D283D8BA
51FB04BEFACFBDFEB02213C408F21DB3309F901DFC641F8FE90304C3B31F8899
5E35B9D5DC52418E3D39437476C3EEE761FFCD> |
37 <001C60D8A8C9B6079F6D87EE794C9CE930098194E769642B3CF8113FF876
275E3385F1D2D6715579623E8A44F00699380A257C6AB50929C832FEEA2AFB3F
A0FAE50398B9E2EBEB1D1674F3CF40C6186B6406F84AB71B24EF861335A635F0
77A75659AE92AF8B5FD6FE09F5C098B1B6BC22531607CC07771F92F9EC9076A0
C5E3AE35C5657F2C30B517F3E7D74EA994F8E22BCDA55DB534764639AF2007DB
4A63BBDBEC90CC49B5CFA002577340ED5E76D3BD8EBCACD3C416A8AFABA0A71C
CFDFCBF1B0CC33A9BF> |
68 <001C60D8A8C9B7EF322BB5AF982283DC1AEA12F6A10AC30FE9CDB8383211
061BC41C3B7CD12DD228DDBF2E3B2E0BFA9F64877E0109F56D0ECB1EFFFE5B32
C68C20B7BAAE422965418F180136A2D908B917EE12DEBD7C82E2E0E2784E1D38
6B81DF37A9BEED91D15B2D0ADFA24F7BC7E97BA3E888012F3E6987667F2615E2
C5A2CFF4FC3A437AE97800E77D6AF888B5960EA88A661E7CB9D59B9596C506EF
09B708EB388DA4BCB3215F06E7E811434CE137DCC5D9860AE266B7F599B24720
CE2BE282A4F9F554FBE47461EB1E7EEA504257719A83D569C4A0AE90ABE8EB81
530D9E0BD76FBF125F> |
71 <001C60D8A8C9B7D8BE18F849B536EFCA0F02FA3E76A4A36E3F76777EA56B
161C32BD3650224D2C9259AB137A3C28285F8A9610171A5241A00CEFF78A51C9
FA2E4D589D8C9CF88EF8E317ADB723E8E9FAE4F993B2D89B336943A7DBBBEE7E
ECE669D1C221EAFAC164EB8F3C6FF7D3C43B06E75F14E8644FEF2361494818DE
012A036AA7CCF2F7FB1D562B56C84E6A50CCEFC44A> |
81 <001C60D8A8C9B7D8BE543421B6181044C47731ABD2BAEF68FF0D0DB7753F
6B1FA10389D204682A5B33541322032BF9431D697179DE1F4251B2FB86F61AEF
4752502C86CF232A02EDF9E1B77E34F9009EF05DCA5484473BD82BE28C6E3EE5
099F9ED9BBCFB467B04ACA70EBBE95BE554659F1> |
41 <001C60D8A8C9B7D8BE166AED386FB8F65201AA3A35AFF6A37894D9DEEE0A
A8E6E5BEE00086C6A3C9AA35C7B84D77CF> |
84 <001C60D8A8C9B7D8BE19FB4EA0787E06810B68FF1FBC597DFAFC76BEA318
8558E3D1B30874D10D9EA6E58BEB0A5256B8F0A261892A8CA001D3B9EA28BF3F
1207E735DD0943E7243F63617E8538175C3BA6410FE602BEF991D47C07A4761E
E40D558C51D4B240A42B0FF71B8CBCA29A8FDA465B9288B7E39800B02E432BBC
EAC5E560315C0F52F380FB23B86FA1ED88AFB196076C6F4785ABE082A9C61417
B1FF94409D> |
88 <001C60D8A8C9B7D8BE02F44870795BF5AD8222959A3470C46F3B46D117C8
43080A8627CDE0E630992C08C0EE2E91382B1CBDCF52E69B545A66EE3C63AF3E
95BFD6413A12F0A9A23ACC09267CB19580C72EA2D428CF2E49FC3148902BC186
9CF5F4B0F5CE6271B036CDAF83AAEAF67F6086DA41809BE8E12DF525A5AA> |
92 <001C60D8A8C9B7EF322B579D19E35BB41D9895DCD2C8D94E7B524B5FC45F
4BD44110543F24BEE3D9DAF61935AA169A3CB65D654247D89D6D8BC3814ABEB4
AE0CAC9A81190CF4ABF7F4E02545F1B2391685B8BB3E3C846B87A480B16CAD> |
11 <001C60D8A8C9B81F2C3AE430CD1C3005AABED7E9A628EBB02171C01AC871
1C8A94870B11EF3E32CE0E8C5B72E5A8084488904C1E2FB793654924949A5B12
CA9BD6325E983CCED57A3DB80A034C1EA394D7C9D01F9F0D61410A> |
21 <001C60D8A8C9B7EF322BD4AE4D68EA1BDD9680BCCBB3F681E63888FCDA65
BA7C06D158D90536CCBADC59EFA4C1857B4654AC496640457CB0402E12D12A44
8344A09BCC6681D18DCE355B764AE760203883C7FC7C2C094E1ED3B7E72570BC
EFD4FCEAB9164EE2F0EDC2FB7AE90E83AD205F483A2208E294935F9B5208100D
51D508BBCFE89479764CDDA3F2FB4145EABFC5264F5D4BE63229E47732CFC50E
4BB1775CA9> |
19 <001C60D8A8C9B7EF322B193039B49AF433BB6D51ACC56137D95C1752F72A
424A3A5BFA6CA25B2B344140D56C380A70538DF7D93A8C86640D15736ACA0753
37CF6B95A64E2CA94F1D7291A69C6306E684191D0DBC8AB1F41E29DFEEC2C1ED
BB4FB19FF808A89680BA97CE8C50C244B86E99F78C7EB6916B233A65430D3D83
79B4BF836479BE92C12786753DCB6ED6166F38B02C2AB0D5B6EE9F198221773D
93D6> |
20 <001C60D8A8C9B7EF322B678A8453A171E5F41DF9F93C9306BA52FD74F7B7
923FF50F1CA58EACC491EBB191FB8452F1D3648FD7956574AB5F> |
12 <001C60D8A8C9B81F2C3A941ED96448FD75E2980CACDE6D0359912FDF7027
6C7D12F4B5AA827EEB5A08399D83135AAF662A6D27C875F250A3BB21BF1ECB8F
5EE2917A07A5979C971B625EDDA855B67C14595DC0FA20DB77B82F30> |
49 <001C60D8A8C9B6079F6C34898E88830AE89C3DF298251C69C0A5A991D47D
445F3F9D9458AA91B229786C99CFBB62C187DB7D25> |
79 <001C60D8A8C9B854D0F4746D864E97BBAF494649CA2E6327CAD1AC> |
77 <001C60D8A8C9B854D0F40B289876E741EFFA628EDF3F29E3BEB11DC31E2C
E410CD47F0EEA0E62689DE6472D8DFB2550FC6F8B58984C7BB4E120B3710E8A5
914326917781D554C6D3A5F781D8C25C47B891989E7698F1> |
26 <001C60D8A8C9B7EF32245DD18F0A68C2E8D1A9777D582CAC4C7495161529
AA492F5C6B33FA46A19C5518F8519895F81200208C14121C21C8F31D47AE19F8
78CE5AE55D5F0797E9CA2EBE29B85A25> |
36 <001C60D8A8C9B6079F6D2340FA029E8D98990BC1A4841C3F03AF89C49845
FBA32563D8CBF00F1EB80A7078B97C387B1AFC42D7592C7FC9> |
38 <001C60D8A8C9B6079F6DF55C6C4465B87F72D84972CD1B3A666165AE7420
7935512D10551C18A1DAD76B761AFC3B5C2CB51CD28AFC00E3C792CC18F60966
EE9A6567BF86A48DA92AE51B885CFB9DB6B0AC1BAE196E3B189B40A0E9F1D041
B879B6B59053797541C50A8624580D257759A91D6A920B8D35918D2D98AA482E
7AB5967E3BD2210EACB5C4799F8B9BAFFFC3FFB5193EFFBA> |
48 <001C60D8A8C9B6B41CB5FF0F7DB894C77BFBBE7C7FE632C00DE5B1D2FB54
AC8B188ED97054CE8EE72D07B0C04454E7E95CCC508E5204117C337CAE3034AB
65B5> |
75 <001C60D8A8C9B7D8BE165125F8CF47BAB3135F506F29D19AE9740FD82C4A
63BF704A0E73E5DC932A54F48848A806EB064E7B0172B9F1CD8727168931C765
1E565573AA82098E9AB5909FD8A0D274D4A0B0766BBB5E4BD71DF4A36A02EC7C
9376D35DFBC0325B109850A64ACC26B477A230A28A172CD45F> |
27 <001C60D8A8C9B7EF32298E7E3FD7B1903A53D510971F01AE86C41AD80727
F1E8BCCB2778BB98BDA2C1802C874DDD06344FB9D0BF9D84B59F33AFB5621778
6FFDDA13516E1CCDAA1C718DF3FDF7293D1CCBB2D6B595979240AF09695870A2
D91AE5A4A0501CF7D975DC3EAAF8BE98526A1B405EDCB49F11E90CB10833C891
59EFCC814543B5006A7875AC992787759FA2BB6674ECFD36B3D8DD172A6E3AF5
A5E9FE93D784C51DBA23F0E2A38DB80603FFBB8A8E80A315DE69529A7B38565C
5A5D3B5965C61C15DFB9B93A1509AF3ABD6BB1F64A334BA4AE9310AC4E21EB0A
C251B305F96CCAFCE205D09D0A7F86289D37DB53648A091195F2815080E9BE74
5AE0E6> |
54 <001C60D8A8C9B64EDFE7A97103298942CF312570A3692BFB1E6C45E5FF2E
C249354E7A1932DFBCAECA3C78C2036B8DDB9A7E091AB38531C38FC7F4A40D80
9269B97D193BD655FE06A800BD5780B8F3C2FB7C695F743C928CF317D3C43AB2
5BCBE2B94C76BF5D632065A2FE22B979AE5E8E685BC9AF9A740E0181538009EE
17394E5B0549DC8C0300EDC6D3B69916840285E531FBAF75C12BE34C55DC33AA
4B8348C3BE15EB83DA2BF3473DB98264BD2746B0F46BFE0707BD57FF8D4F23CD
0F16503FEF97DCFC9E44FA05A7DC> |
53 <001C60D8A8C9B6079F623BFA5A9C69FAEF9019EE953F6B3D5730D40F0E8B
EDA03E3CBA74F9A0D31E4FB635019CAFC6CC995CD1B40AC843CD93B921ED865C
AEE548566F26D8F4B6C2A3F86BB5FCB2A7F482882250B5BC589628064B7661DD
4A7BF9B7813E44D92755206CCD159EC345F8A1FB55E76DB4B7AB7DCF56578FF7
8074A24EC83FF79CA581EC8EA2F2D53F300C85F59A54> |
44 <001C60D8A8C9B854D0F47995413A5E5BE66353371AAC4CB04E8F10> |
51 <001C60D8A8C9B64EDFF45CD3ED59C270AB6C9662054FF28C3E9CBFEE72BE
124673237C30AB368B8178C682BE5076E9575047CA6A3BF8530B18F15CF3DB22
409F49F20803B1B8CEF384773A660E52FE7AC93D831A47EE3033CE3EF43F0735
9420BB49340DAA5C11B483A46A2CC95D0D6A9CEDB07ACF478AF009B3C014DF9B
86AE451FC1FDB863EDFB23> |
28 <001C60D8A8C9B7EF322B1FCE279244F96F09340A68A387ECDF9C6F29D67B
1A461C4CDF7C8891A8CE5A5514FEC1BF65BBA7813B579D2DCA0B27043EA51AEC
1740A044D6BBE4E62001986E3E0FAC553DCF1FC53BD4D162A15A15C29910F6C3
6653785608CAA49A1DFB2273EE9DC10A1615C5FE9455A35BC42B3E79978D160A
624A9F6D2B4CA934D9BA72D778754AEE6EEAB7CE3D76263A44D152B0BDD65A29
820B82E42636B46C68841965147DABB6611B236707910DA9D6880F37282C9B5A
8CDA4AFA2C> |
83 <001C60D8A8C9B7D8BE64F2EBC88F1018177F04E80AC27BDF1D05BB295452
D25BB4C3D537701790AAC141BD4E802B9A8138D44D536E103A256D3B77E6700F
155F739B16EF0404E20B53B2AF0F43F857440B7E9A6FF54D31DE90FCF6350BA5
CC4E56259794C6E12BBD8C4E7AB7E3457AAA2A63FDC4AA12E8932706283A8A8E
3D2EA3E23F93CE9159E8E3891BB144032153DA5B39CD5C523DEB> |
69 <001C60D8A8C9B7D8BE1613C250BE4F957C237A27D88FB2D712D57DB3EBE2
804B98ED02EBD46C9A6627E62006DBA66ED8C5E50E8894DCE4FC0B7414E820CB
DDF560386FBE3FBD5676422528275B18B4A8E2321233FF793D47FB8F61BCECB8
E6FFAB9577D21784BFDD6E7EC1D07AAB4D74910E5A1EBD4C6276C25B6981E066
1AF12A3AF49D7E7040D46ADB4D1E6216CAA97CC9B40587AF1A9AD934FA141A74
6D72D9> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /UAAAAA+Arial-BoldItalicMT-Identity-H /Identity-H 0 [/UAAAAA+Arial-BoldItalicMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/OSUAYH+Arial-BoldItalicMT /UAAAAA+Arial-BoldItalicMT-Identity-H findfont ct_VMDictPut
OSUAYH+Arial-BoldItalicMT [14.05 0 0 -14.05 0 0 ]msf
333.05 178.75 mo
(\0007)sh
341.3 178.75 mo
(\000U)sh
346.75 178.75 mo
(\000L)sh
350.65 178.75 mo
(\000J)sh
359.2 178.75 mo
(\000J)sh
367.75 178.75 mo
(\000H)sh
375.55 178.75 mo
(\000U)sh
381 178.75 mo
(\000V)sh
388.8 178.75 mo
(\000\003)sh
392.7 178.75 mo
(\000')sh
402.8 178.75 mo
(\000H)sh
410.6 178.75 mo
(\000W)sh
415.25 178.75 mo
(\000H)sh
423.05 178.75 mo
(\000F)sh
430.85 178.75 mo
(\000W)sh
435.5 178.75 mo
(\000R)sh
444.05 178.75 mo
(\000U)sh
449.5 178.75 mo
(\000\003)sh
453.4 178.75 mo
(\000%)sh
463.5 178.75 mo
(\000D)sh
471.3 178.75 mo
(\000V)sh
479.1 178.75 mo
(\000H)sh
486.9 178.75 mo
(\000G)sh
495.45 178.75 mo
(\000\003)sh
499.35 178.75 mo
(\000R)sh
507.9 178.75 mo
(\000Q)sh
516.45 178.75 mo
(\000\003)sh
520.35 178.75 mo
(\000\))sh
528.9 178.75 mo
(\000U)sh
534.35 178.75 mo
(\000H)sh
542.15 178.75 mo
(\000T)sh
550.7 178.75 mo
(\000X)sh
559.25 178.75 mo
(\000H)sh
567.05 178.75 mo
(\000Q)sh
575.6 178.75 mo
(\000F)sh
583.4 178.75 mo
(\000\\)sh
591.2 178.75 mo
(\000\003)sh
595.1 178.75 mo
(\000\013)sh
599.75 178.75 mo
(\000\025)sh
607.55 178.75 mo
(\000\023)sh
615.35 178.75 mo
(\000\025)sh
623.15 178.75 mo
(\000\024)sh
630.95 178.75 mo
(\000\014)sh
635.6 178.75 mo
(\000\003)sh
639.5 178.75 mo
(\000\003)sh
643.4 178.75 mo
(\000\003)sh
%ADOBeginSubsetFont: ZAAAAA+ArialMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (ZAAAAA+ArialMT)
%%Title: (ZAAAAA+ArialMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /ZAAAAA+ArialMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-665 -325 2000 1040} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 4503 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 30 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A93
6AA182F5809A9> |
61 <001C60D8A8C9B7D8BE1951B4403D971EFD27DB77B9987BC03A77C417AD83
FE6266014D0B857BA90C3E7057EA9160B5F29FD8DF> |
72 <001C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449
B0D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C
8B6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0E
EA03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C37
295284C077711C162623860AACA404F650F8D516970257> |
81 <001C60D8A8C9B7EF322B3BE19FB964E04D2DB06D4930CA5D8F41D2EF3A28
5C0BD536CD2C57668EB9E30311BF9A2872DFB44F2BF2A4683B5D66FA01BB1CCD
ADE9C8A9EE2CB010715D3D6DFF0E843CF77C87A07D1DBD0482675E3CA1DAA2A5
203A8015DD09B7CE> |
74 <001C60D8A8C9B7EF322851D9960AE993FFFAEAEBBA8EF734FCE7E65DE817
A065D42CB79E2F25620DE08D5E215259551032CAAB8B674940F5B4BAAF40766D
559B26E9A0C2464D0F504C4718579670D62707FEBC08A2CD71BF2528BA3A24A0
C247BA70F9E817A1709BB6F7008D6C121249525DEE3A93F6DA16170F68BD3667
DC9FF533284D078DAE144C0DB42F376056761CFA5A80B4ED7D37E57EA658F3FB
D88F779C828BF992A89F02F1397EF90BADA44FB7F676FF0295FF6F9748D66EBF
575C72F67F4BEBB98F8AFA57505EC9> |
3 <001C60D8A8C9B854D00D> |
87 <001C60D8A8C9B854D0F45CF665C7276F8075B54A4ECD6470F395A458CA2D
065152075036EEECA213894C1EA0DACFBD370590F4B831924E5BDA5281442349
CFAD2545E0750C3004A129C25B1EAA8DEF5DA8BF1998E80AE266F591E64CB512
7F5C42C88FB43C> |
68 <001C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D1EA
7DC8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D883
CA6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A87DB
BA48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2405
FD710F7ADB95B4F576668A6DB104942C88ED8D01E4E58188F5E32A24B5B964D5
CEC10C08F76C0F472E84A0FB6EB5E37AAEE233DE54C212B0A012D3E20F864B2D
53463E221F81B784B6F7BE81FBFCAE6785C2430454DD81C436E0A516BF8C8307
B2879FF86378629C5EA7E586D83C83550D2E732930F7FE3BAD07B86C81E024D1
77B5D88A> |
79 <001C60D8A8C9B88C08722AD20D19A90F9064193C8D82> |
17 <001C60D8A8C9B854D0F4604C2A88D29523E6F8C6> |
62 <001C60D8A8C9B854D0F4A9CC5FDA760B15DDAEB4EC9E19B4B41AFD95C6BA
37FE8A> |
25 <001C60D8A8C9B7EF3224364F35F160A7435603F347AEE370EA008402323F
12980EBCF3CB26E2D43E59A0756C6206EFA3FA7F3CF2F0DCAFEBCCFFA3BC8BFA
30490E649BC066EACB91D06D39C41CF4418FDA94B94D65C0F6F28F44C8CF1936
28C8B12F204AFE672CF6576AC3AB52C05B059D0EB4764306E7B6C88FB8AE766F
A7D7475CE80EAE625C3D4B3B8AD5F700C1E5123D83D6C3B46406191458255140
B2BB2B7285E8760BEB4CAD56CDB5D69E1D01DE82A2FE0C6D1807BC278045A69D
91DDA3546299406BFBCDD14522D29A47E391C26AA1D66EE72A60> |
28 <001C60D8A8C9B7EF322B1E3B1A79A1DA03E10E600D068C6F2A2C380B0F6D
EBD4D4DD1CC12D66AEECD714986D0BB404BEEE797B931765A09DB6972620435C
3E53C33E82E82293552FE3F4B4A9CF87D2D3960A335325D9064F969F569869D5
BECFFFACFCA41CE671D232207B2A9F695CAD03F11715AE00BA6E4E4DDB0F807E
169B9324CB5646DCC83A5DE270DE3BAEFD03D20E077B3A9C59CEC5C162A3BD30
72425BBF0BAF6222E938CACE57A2C4D75634AE3A010D0148B506BD06198AAAA2
7D1742624D1FE8845D19FF21CDB94B022766F89FD7433D600DF30C7FA27B03E1
7188994F16> |
64 <001C60D8A8C9B854D0F45A7DCAA08E9F696D25732122263BE011EFF56C11
15332A> |
47 <001C60D8A8C9B7EF3224EC6E192BD0FEC2445DA87B99CF0E03A72A> |
76 <001C60D8A8C9B88C087228DFC7C7ABCC71B868F57EDB285655227000619B
171C8A80AB> |
88 <001C60D8A8C9B7EF32240889FE90FF09F794E92023A18223CCBE3629AB7F
517D090BF7D55C0A5A8EADD9BE381137FE8504E8B2DB3D16839889E327241ACA
8F992A2BB9AD2BCE57ADB306CE2789439E67A64C32BE8669C197F5851EE38793
990906DA8D7F8ACFF6D70790F06B02> |
26 <001C60D8A8C9B7EF32245185D6A5516F33DB78352C4AC565B22360E031CB
3B71A1D11654727B1436E7590FC689EA5F1279CA132C8529B81FF9BDC95FE0F5
5546101EE3> |
38 <001C60D8A8C9B6079F6D1C46AC2732DFBDC9143C94793529C1940296210A
AD6EE09C39CFC4DAB7C5F3BA33C9E10838E0BC6FC9318A4E57F309EE20438B43
4C69AE73A499211EBA75E22A57C1581D93869428818DC700A28C027571D7047C
DFA8B017AACDE96DE4B2579EFD2C826A30F6EBDDC52701A22CDD669ADC60B66F
32261A1F55EDEF9802FD4511E0EF130772EDFD708A4113A1EDB1E717E0FA7D31
4851DE59> |
75 <001C60D8A8C9B7EF322B3BE19FB964E037672C8A279BC86F7B9BF0C8203E
131450D56E388301CEAE43162551FBE05CABF94DC3B5DDFBB4DA55D11470EBD4
1AC970CEE2D2EFA88D51157B4EF5536CB673423CDDB06FA774D27105AD2B1AC2
DFA8> |
19 <001C60D8A8C9B7EF322B1082CBA0BF9C14E99A3DA73C31B9142A392BD3AB
C1EA97FF39C814FAC04D646DD2C4A98FCAF9A9470BD1CDA748490BF1B6225A10
425162B711F636C55967253E957B919DCC3F666292C622E3ED0D587E9E568E31
D888BB4F8FA5748005C40596B5B6BF48502A62C5A69962DBA8DFCFAE3F282BC6
0C6C207F4C9D9AD32681DD3B2E0F2C2045F707B1BB6597DD9D355BD3D00BE3A5
B546505C954A88> |
42 <001C60D8A8C9B6FF86FBC793890B55178BE49EEC5102DE4765B31919F6E9
8C7D78C667A3BB4B4E624B689DA4C385DFD1B29DE65FB8AA7AB2EF69B5E095C4
AF9914BE00567D04850B7313AA11B0D0EAADB46E151A37395ABF4FDE5690DD20
8A8203F33BC5AE42ABB3FA5CE6CC7C2FF1141A09489DA9290F5991FC3FADB6E8
008CAB5CAA6CE68D612C9A2AD14F1DB3B2ED2760EC1A22B5BECD6F37DA404DC4
340669554C25AFCF53AD025C5AA750C1F3F80E3A98BEF6E511E50C5B0BE2D927
EF> |
82 <001C60D8A8C9B7EF32334FFE7884F6C3B903D000D9FD76C2EAE8EDCCA90A
987875625CA0393015EF6761BE1C3B6D9E9DA4BABE1DD313B783BCBF8F620C84
6C7F6361946173FB7A4A6BF94EAA0CB4947DD1974AF371F3C211E584576DE9AD
79F9DA988E9E531810E3876F3029BB1D2ED366525F30E48DD7CE3C9B66C5CC09
9F518C54BB58C51D6FB6D0C8> |
21 <001C60D8A8C9B7EF322B3EBC745A0BBBAC411180C089B13E648172E07912
D1BA378FD965B994D86994B65582FD434477626CA0A7A4AA353654D41B127367
E2BE1B714FF63CE28DAC81B61A78F94AD3218D524244E3D9732CC5A4165C96E7
ADC9605690D1ECC190DFB9D5017E24EDE1D6B83BBD5FCE6B540AFB666DD6E17D
0C90E5976007C04DC3CD2FBFFCA768526960F8706ECECD> |
54 <001C60D8A8C9B64EDFE3D078722A65C31955939D63AA5C8A4945719B5E55
8E3B73A676CC12D1E18D93A8DC67C074D6E352D426981DE76F8EC4CFE5DAE051
BE47753A7C234C4B8D7D9F50292A61882B5500CC701F878FE626CDC6D4C322BB
391537921D673F5AEE3EC19E36E7EFEC0F06A0EA4EAAB6BBA94DDCD11A6A564B
13B510F8C915848233B82F046D854DCD4F1639F149305DC73D3C68DF8AEB47A9
6A30E55CF8BAD07FA2825BCE0D675F1CC2EBE61B07B772130E23119250F1EBF8
FE12A2098D9F09F3F21BDC41666CA4A0BB70D5F0A750B44BB93A5FBFDD2BF8DE
450B277265536F77D5BD6F44FB72FF2E708C60107653AE44BFFB26AFF8> |
69 <001C60D8A8C9B7EF322B32790B4C40581173F160A628925C2B3464303D1D
06742E51EAF8B24CA2240525B9E37D08039C077561F794D203DE8C21652F0F5A
81A2CE84BC5F560E6CA22CB86602E80E4BBDAC611F34E85189D165B97A2D648C
F626A92F4026AFF0CA38E8E165B7E956CB11B132485900857B09AC55401998CA
DA1EAAF79B76AA2B52CCF0307B360E6D> |
71 <001C60D8A8C9B7EF322407C6655A1B3652DB8522EB511BE6B0855A72D962
1458876CAD1FA22A00635F436A34E23EAFC09C394044ECC1389CD99E4AF1C1F6
DD52305C78619784840FC37A805B0805EF290BC9E049CF068290816CB7E74DB6
12941355BCE71CBDD11DD0F9CA29531036ED13EFB9CAB613E9F630FBBC9408EF
13CE4683D92968530F64760C3DF85C7C7EA06EBA8BF859> |
85 <001C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE112857
894FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619
ADD420F549AB7C795751D32E8EE6> |
22 <001C60D8A8C9B7EF322B10FC2B166D2172609B896A28AF8161ACE0368AFE
548E0A1C2891C9468F6CF8001203B3D0EAEFD5067EEA36A5DE0843B3FA3DD10C
10DEDE7ECC4B1F205F8D09B2A1084955D8410715DAE41E60E9BEA3731CCA7698
FDFAB2F6C5BD853C3D3957C1C3A42CED93CA60AD0CBA44CB0A07053B47ECAA14
A0E56199A33A25603E5DB2CC6A470C6EFBC4EF226D2F67623C83F45C93E2C02C
0A9A0974576F8175C7B2D4E9F1C9319763C8100AFBFF1D8FFF8EB10F2B0608AF
6A0E137303863C59034E23F8CA0DCA04C3BBA93B80F099> |
39 <001C60D8A8C9B6079F6249419CF69509002AC79A016C34D114AD8C7A9DD2
474EBE314027FB7E1F48C795DC0A22C11652551956D26D402DBF3954D5C55EED
C4D2E02D32263ABBF714C52111C5848A3EB8C8B527B0FF3362F75E292ACAF797
67633E5CF98F1E087651E36E4721AF4CBDAC7E4D68359E9108BDBBEA294A0489
068CBF65F37E7CD4C7284AEAF641D010DF> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /ZAAAAA+ArialMT-Identity-H /Identity-H 0 [/ZAAAAA+ArialMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/OSUAYI+ArialMT /ZAAAAA+ArialMT-Identity-H findfont ct_VMDictPut
OSUAYI+ArialMT [12 0 0 -12 0 0 ]msf
647.3 178.75 mo
(\000=)sh
654.65 178.75 mo
(\000H)sh
661.3 178.75 mo
(\000Q)sh
667.95 178.75 mo
(\000J)sh
674.6 178.75 mo
(\000\003)sh
677.95 178.75 mo
(\000H)sh
684.6 178.75 mo
(\000W)sh
687.95 178.75 mo
(\000\003)sh
691.3 178.75 mo
(\000D)sh
697.95 178.75 mo
(\000O)sh
700.6 178.75 mo
(\000\021)sh
703.95 178.75 mo
(\000\003)sh
333.05 193.65 mo
(\000>)sh
336.4 193.65 mo
(\000\031)sh
343.05 193.65 mo
(\000\034)sh
349.7 193.65 mo
(\000@)sh
OSUAYH+Arial-BoldItalicMT [14.05 0 0 -14.05 0 0 ]msf
332.6 61 mo
(\0001)sh
342.7 61 mo
(\000H)sh
350.5 61 mo
(\000X)sh
359.05 61 mo
(\000U)sh
364.5 61 mo
(\000D)sh
372.3 61 mo
(\000O)sh
376.2 61 mo
(\000\003)sh
380.1 61 mo
(\0007)sh
388.35 61 mo
(\000U)sh
393.8 61 mo
(\000R)sh
402.35 61 mo
(\000M)sh
406.25 61 mo
(\000D)sh
414.05 61 mo
(\000Q)sh
422.6 61 mo
(\000\003)sh
426.5 61 mo
(\000\013)sh
431.15 61 mo
(\000\025)sh
438.95 61 mo
(\000\023)sh
446.75 61 mo
(\000\024)sh
454.55 61 mo
(\000\032)sh
462.35 61 mo
(\000\014)sh
467 61 mo
(\000\003)sh
470.9 61 mo
(\000\003)sh
474.8 61 mo
(\000\003)sh
OSUAYI+ArialMT [12 0 0 -12 0 0 ]msf
478.7 61 mo
(\000/)sh
485.35 61 mo
(\000L)sh
488 61 mo
(\000X)sh
494.65 61 mo
(\000\003)sh
498 61 mo
(\000H)sh
504.65 61 mo
(\000W)sh
508 61 mo
(\000\003)sh
511.35 61 mo
(\000D)sh
518 61 mo
(\000O)sh
520.65 61 mo
(\000\021)sh
524 61 mo
(\000\003)sh
527.35 61 mo
(\000>)sh
530.7 61 mo
(\000\032)sh
537.35 61 mo
(\000\031)sh
544 61 mo
(\000@)sh
OSUAYH+Arial-BoldItalicMT [14.05 0 0 -14.05 0 0 ]msf
333.05 85.15 mo
(\000$)sh
343.15 85.15 mo
(\000&)sh
353.25 85.15 mo
(\000\003)sh
357.15 85.15 mo
(\0000)sh
368.8 85.15 mo
(\000H)sh
376.6 85.15 mo
(\000W)sh
381.25 85.15 mo
(\000K)sh
389.8 85.15 mo
(\000R)sh
398.35 85.15 mo
(\000G)sh
406.9 85.15 mo
(\000\013)sh
411.55 85.15 mo
(\000\025)sh
419.35 85.15 mo
(\000\023)sh
427.15 85.15 mo
(\000\024)sh
434.95 85.15 mo
(\000\033)sh
442.75 85.15 mo
(\000\014)sh
447.4 85.15 mo
(\000\003)sh
451.3 85.15 mo
(\000\003)sh
455.2 85.15 mo
(\000\003)sh
OSUAYI+ArialMT [12 0 0 -12 0 0 ]msf
459.1 85.15 mo
(\000&)sh
467.75 85.15 mo
(\000K)sh
474.4 85.15 mo
(\000H)sh
481.05 85.15 mo
(\000Q)sh
487.7 85.15 mo
(\000\003)sh
491.05 85.15 mo
(\000H)sh
497.7 85.15 mo
(\000W)sh
501.05 85.15 mo
(\000\003)sh
504.4 85.15 mo
(\000D)sh
511.05 85.15 mo
(\000O)sh
513.7 85.15 mo
(\000\021)sh
517.05 85.15 mo
(\000\003)sh
520.4 85.15 mo
(\000>)sh
523.75 85.15 mo
(\000\032)sh
530.4 85.15 mo
(\000\023)sh
537.05 85.15 mo
(\000@)sh
OSUAYH+Arial-BoldItalicMT [14.05 0 0 -14.05 0 0 ]msf
333.05 109.3 mo
(\0006)sh
342.4 109.3 mo
(\0007)sh
350.95 109.3 mo
(\0005)sh
361.05 109.3 mo
(\000,)sh
364.95 109.3 mo
(\0003)sh
373.75 109.3 mo
(\000\003)sh
377.65 109.3 mo
(\000\013)sh
382.3 109.3 mo
(\000\025)sh
390.1 109.3 mo
(\000\023)sh
397.9 109.3 mo
(\000\024)sh
405.7 109.3 mo
(\000\034)sh
413.5 109.3 mo
(\000\014)sh
418.15 109.3 mo
(\000\003)sh
422.05 109.3 mo
(\000\003)sh
425.95 109.3 mo
(\000\003)sh
OSUAYI+ArialMT [12 0 0 -12 0 0 ]msf
429.85 109.3 mo
(\000*)sh
439.2 109.3 mo
(\000D)sh
445.85 109.3 mo
(\000R)sh
452.5 109.3 mo
(\000\003)sh
455.85 109.3 mo
(\000H)sh
462.5 109.3 mo
(\000W)sh
465.85 109.3 mo
(\000\003)sh
469.2 109.3 mo
(\000D)sh
475.85 109.3 mo
(\000O)sh
478.5 109.3 mo
(\000\021)sh
481.85 109.3 mo
(\000\003)sh
485.2 109.3 mo
(\000>)sh
488.55 109.3 mo
(\000\032)sh
495.2 109.3 mo
(\000\025)sh
501.85 109.3 mo
(\000@)sh
OSUAYH+Arial-BoldItalicMT [14.05 0 0 -14.05 0 0 ]msf
333.05 131.95 mo
(\000')sh
343.15 131.95 mo
(\000H)sh
350.95 131.95 mo
(\000H)sh
358.75 131.95 mo
(\000S)sh
367.3 131.95 mo
(\000\003)sh
371.2 131.95 mo
(\0003)sh
380.55 131.95 mo
(\000U)sh
386 131.95 mo
(\000R)sh
394.55 131.95 mo
(\000E)sh
403.1 131.95 mo
(\000D)sh
410.9 131.95 mo
(\000E)sh
419.45 131.95 mo
(\000L)sh
423.35 131.95 mo
(\000O)sh
427.25 131.95 mo
(\000L)sh
431.15 131.95 mo
(\000V)sh
438.95 131.95 mo
(\000W)sh
443.6 131.95 mo
(\000L)sh
447.5 131.95 mo
(\000F)sh
455.3 131.95 mo
(\000\003)sh
459.2 131.95 mo
(\0000)sh
470.85 131.95 mo
(\000R)sh
479.4 131.95 mo
(\000G)sh
487.95 131.95 mo
(\000H)sh
495.75 131.95 mo
(\000O)sh
499.65 131.95 mo
(\000V)sh
507.45 131.95 mo
(\000\013)sh
512.1 131.95 mo
(\000\025)sh
519.9 131.95 mo
(\000\023)sh
527.7 131.95 mo
(\000\024)sh
535.5 131.95 mo
(\000\034)sh
543.3 131.95 mo
(\000\014)sh
547.95 131.95 mo
(\000\003)sh
551.85 131.95 mo
(\000\003)sh
555.75 131.95 mo
(\000\003)sh
OSUAYI+ArialMT [12 0 0 -12 0 0 ]msf
559.65 131.95 mo
(\0006)sh
567.65 131.95 mo
(\000X)sh
574.3 131.95 mo
(\000E)sh
580.95 131.95 mo
(\000H)sh
587.6 131.95 mo
(\000G)sh
594.25 131.95 mo
(\000D)sh
600.9 131.95 mo
(\000U)sh
604.9 131.95 mo
(\000\003)sh
608.25 131.95 mo
(\000H)sh
614.9 131.95 mo
(\000W)sh
618.25 131.95 mo
(\000\003)sh
621.6 131.95 mo
(\000D)sh
628.25 131.95 mo
(\000O)sh
630.9 131.95 mo
(\000\021)sh
634.25 131.95 mo
(\000\003)sh
637.6 131.95 mo
(\000>)sh
640.95 131.95 mo
(\000\032)sh
647.6 131.95 mo
(\000\026)sh
654.25 131.95 mo
(\000@)sh
OSUAYH+Arial-BoldItalicMT [14.05 0 0 -14.05 0 0 ]msf
333.05 154.45 mo
(\000\))sh
341.6 154.45 mo
(\000H)sh
349.4 154.45 mo
(\000E)sh
357.95 154.45 mo
(\000U)sh
363.4 154.45 mo
(\000X)sh
371.95 154.45 mo
(\000X)sh
380.5 154.45 mo
(\000V)sh
388.3 154.45 mo
(\000\003)sh
392.2 154.45 mo
(\000\013)sh
396.85 154.45 mo
(\000\025)sh
404.65 154.45 mo
(\000\023)sh
412.45 154.45 mo
(\000\025)sh
420.25 154.45 mo
(\000\023)sh
428.05 154.45 mo
(\000\014)sh
432.7 154.45 mo
(\000\003)sh
436.6 154.45 mo
(\000\003)sh
440.5 154.45 mo
(\000\003)sh
OSUAYI+ArialMT [12 0 0 -12 0 0 ]msf
444.4 154.45 mo
(\000')sh
453.05 154.45 mo
(\000R)sh
459.7 154.45 mo
(\000D)sh
466.35 154.45 mo
(\000Q)sh
473 154.45 mo
(\000\003)sh
476.35 154.45 mo
(\000H)sh
483 154.45 mo
(\000W)sh
486.35 154.45 mo
(\000\003)sh
489.7 154.45 mo
(\000D)sh
496.35 154.45 mo
(\000O)sh
499 154.45 mo
(\000\021)sh
502.35 154.45 mo
(\000\003)sh
505.7 154.45 mo
(\000>)sh
509.05 154.45 mo
(\000\032)sh
515.7 154.45 mo
(\000\032)sh
522.35 154.45 mo
(\000@)sh
325.387 181.35 mo
324.217 181.34 li
323.066 181.311 li
321.954 181.263 li
320.886 181.198 li
319.866 181.116 li
318.9 181.018 li
317.991 180.905 li
317.144 180.777 li
316.363 180.633 li
315.647 180.474 li
314.998 180.296 li
314.408 180.092 li
313.892 179.857 li
313.611 179.692 li
313.351 179.504 li
313.089 179.26 li
312.839 178.931 li
312.638 178.492 li
312.575 178.076 li
312.575 118.412 li
312.592 118.637 li
312.577 118.54 li
312.696 118.938 li
312.652 118.842 li
312.824 119.129 li
312.752 119.034 li
312.921 119.222 li
312.822 119.129 li
312.967 119.248 li
312.84 119.157 li
312.959 119.234 li
312.807 119.145 li
312.944 119.216 li
312.563 119.043 li
312.695 119.095 li
312.218 118.93 li
312.311 118.959 li
311.744 118.804 li
311.815 118.821 li
311.163 118.676 li
311.218 118.687 li
310.487 118.553 li
310.533 118.561 li
309.729 118.439 li
309.768 118.444 li
308.896 118.336 li
308.931 118.34 li
307.997 118.245 li
308.028 118.248 li
307.038 118.169 li
307.067 118.171 li
306.026 118.107 li
306.053 118.108 li
304.968 118.062 li
304.994 118.063 li
303.87 118.034 li
303.895 118.035 li
290.75 117.924 li
290.75 115.126 li
303.895 115.015 li
303.87 115.016 li
304.994 114.987 li
304.968 114.988 li
306.053 114.942 li
306.026 114.943 li
307.067 114.879 li
307.038 114.881 li
308.028 114.802 li
307.997 114.805 li
308.931 114.71 li
308.896 114.714 li
309.768 114.606 li
309.729 114.611 li
310.533 114.489 li
310.487 114.497 li
311.218 114.363 li
311.163 114.374 li
311.815 114.229 li
311.744 114.246 li
312.311 114.091 li
312.218 114.12 li
312.695 113.955 li
312.563 114.007 li
312.944 113.834 li
312.807 113.905 li
312.959 113.816 li
312.84 113.893 li
312.967 113.802 li
312.822 113.921 li
312.921 113.828 li
312.752 114.016 li
312.824 113.921 li
312.652 114.208 li
312.696 114.112 li
312.577 114.51 li
312.592 114.413 li
312.575 114.638 li
312.575 54.974 li
312.638 54.558 li
312.839 54.119 li
313.089 53.79 li
313.351 53.546 li
313.611 53.358 li
313.892 53.193 li
314.408 52.958 li
314.998 52.754 li
315.647 52.576 li
316.363 52.417 li
317.144 52.273 li
317.991 52.145 li
318.9 52.032 li
319.866 51.934 li
320.886 51.852 li
321.954 51.787 li
323.066 51.739 li
324.217 51.71 li
325.387 51.7 li
325.413 54.7 li
324.255 54.71 li
324.28 54.709 li
323.156 54.738 li
323.182 54.737 li
322.096 54.783 li
322.124 54.782 li
321.083 54.846 li
321.112 54.844 li
320.122 54.923 li
320.153 54.92 li
319.219 55.015 li
319.254 55.011 li
318.382 55.119 li
318.421 55.114 li
317.617 55.236 li
317.663 55.228 li
316.932 55.362 li
316.987 55.351 li
316.335 55.496 li
316.406 55.479 li
315.839 55.634 li
315.932 55.605 li
315.455 55.77 li
315.587 55.718 li
315.206 55.891 li
315.343 55.82 li
315.191 55.909 li
315.31 55.832 li
315.183 55.923 li
315.329 55.804 li
315.229 55.897 li
315.398 55.709 li
315.326 55.804 li
315.498 55.517 li
315.454 55.613 li
315.573 55.215 li
315.558 55.312 li
315.575 55.087 li
315.575 114.751 li
315.512 115.167 li
315.311 115.606 li
315.061 115.935 li
314.799 116.179 li
314.539 116.367 li
314.258 116.532 li
313.742 116.767 li
313.152 116.971 li
312.503 117.149 li
311.787 117.308 li
311.006 117.452 li
310.159 117.58 li
309.25 117.693 li
308.284 117.791 li
307.264 117.873 li
306.195 117.938 li
305.084 117.986 li
303.933 118.015 li
302.763 118.025 li
302.763 115.025 li
303.933 115.035 li
305.084 115.064 li
306.195 115.112 li
307.264 115.177 li
308.284 115.259 li
309.25 115.357 li
310.159 115.47 li
311.006 115.598 li
311.787 115.742 li
312.503 115.901 li
313.152 116.079 li
313.742 116.283 li
314.258 116.518 li
314.539 116.683 li
314.799 116.871 li
315.061 117.115 li
315.311 117.444 li
315.512 117.883 li
315.575 118.299 li
315.575 177.963 li
315.558 177.738 li
315.573 177.835 li
315.454 177.437 li
315.498 177.533 li
315.326 177.246 li
315.398 177.341 li
315.229 177.153 li
315.329 177.246 li
315.183 177.127 li
315.31 177.218 li
315.191 177.141 li
315.343 177.23 li
315.206 177.159 li
315.587 177.332 li
315.455 177.28 li
315.932 177.445 li
315.839 177.416 li
316.406 177.571 li
316.335 177.554 li
316.987 177.699 li
316.932 177.688 li
317.663 177.822 li
317.617 177.814 li
318.421 177.936 li
318.382 177.931 li
319.254 178.039 li
319.219 178.035 li
320.153 178.13 li
320.122 178.127 li
321.112 178.206 li
321.083 178.204 li
322.124 178.268 li
322.096 178.267 li
323.182 178.313 li
323.156 178.312 li
324.28 178.341 li
324.255 178.34 li
325.413 178.35 li
325.387 181.35 li
.644953 .27805 0 0 cmyk
f
.92929 .879301 .889677 .799283 cmyk
%ADOBeginSubsetFont: PAAAAA+Arial-BoldMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PAAAAA+Arial-BoldMT 7 GetGlyphDirectory
41 <001C60D8A8C9B7D8BE164A384446DA6B7BAA798AC9D25A30491D373B778A
BEDC450E08B3A2A56A100F> |
85 <001C60D8A8C9B7361F02EEC91E54B85D1C77E667FE2BCF3D09A421FBF63C
B630EA2A0B7B19FFD8078B4DB5A7731C633809BCAB3FF296D65B89F29DE6B6DB
35AA635F12FEC0F1664A8FB613C79352FA72> |
53 <001C60D8A8C9B6079F62C490F8C1A9447E753B366F00BE2E6D6A1AEC57FE
FC5F04FB7246489EDF70068115D0A2805C8D6EC79F6064E7969601096F448222
EBB1DD7F1F6323EF89F566062038A8AC4D6CAD80E8B896F19CFFFE99D83DBA0C
0E40A706B7FE43A7E0AA62F51DDB688D792B5246324FF62981CEA7E6D7B38DF1
C5C95D599B2DC4BC9304A423DA3839EE77DFF504E2ADB006C72F6FEA3F44E88D
7A> |
69 <001C60D8A8C9B7D8BE1671B6042109CDB81BD17EE7497C90F9ACDA9D163A
DAFA6361E188897A4B68FD4101C0DFF9827C3E0810E4C104ADB26FCFB7392E3E
66FDF7A9C86FBB82D51B276A3D658E1330F7C5C615410686D27E44BA9CDCA421
2076F89ABD511F1956BE19FF29EE6CBCC95AE9285DCCADBA7BCF7A3124FE7D2B
C7C3485D1834390BEE8C> |
88 <001C60D8A8C9B7D8BE193D97D4CEC9E264886B4FEB6039471A932F20C88E
939BABF490859EEC52AD38B7ED294F8DF2A47649EF77BF43349A736D065D0A25
3D952638D54F7BA1B47314F68FC1495C51454777F8F9475426838BE461BAFE9B
F3E443E03AAD9292AF57449A5275904AD9> |
55 <001C60D8A8C9B7D8BE19809EC35BBBBC4A9DCDD5AC6ABFFD5901D001A83F
8CD3372E99> |
70 <001C60D8A8C9B7EF32242001ABD2AFBBD336641D8D7284783472C96CFCC4
34DFC100FC24422711A9090DEA4D32109037578992AFF27835B7F260887A799C
BA44C497ED942D76A3A4BD63536DE6F757481EB22D2DEF055F331ED962220273
9AC583596554B76ADC212E19C7FBCE810B4022B5DAB3AF3C114AF2730DCBE9D3
5CB6B42E872730D77BAB> |
!
end
end end
%ADOEndSubsetFont
OSUAYG+Arial-BoldMT [15.95 0 0 -15.95 0 0 ]msf
342.95 254.95 mo
(\000\))sh
352.7 254.95 mo
(\000L)sh
357.15 254.95 mo
(\000O)sh
361.6 254.95 mo
(\000W)sh
366.95 254.95 mo
(\000H)sh
375.85 254.95 mo
(\000U)sh
382.1 254.95 mo
(\000L)sh
386.55 254.95 mo
(\000Q)sh
396.3 254.95 mo
(\000J)sh
342.95 371.7 mo
(\0005)sh
354.5 371.7 mo
(\000R)sh
364.25 371.7 mo
(\000E)sh
374 371.7 mo
(\000X)sh
383.75 371.7 mo
(\000V)sh
392.65 371.7 mo
(\000W)sh
398 371.7 mo
(\000\003)sh
402.45 371.7 mo
(\000\003)sh
406.9 371.7 mo
(\0007)sh
415.75 371.7 mo
(\000U)sh
422 371.7 mo
(\000D)sh
430.9 371.7 mo
(\000L)sh
435.35 371.7 mo
(\000Q)sh
445.1 371.7 mo
(\000L)sh
449.55 371.7 mo
(\000Q)sh
459.3 371.7 mo
(\000J)sh
351.4 475.45 mo
(\0000)sh
364.75 475.45 mo
(\000R)sh
374.5 475.45 mo
(\000G)sh
384.25 475.45 mo
(\000H)sh
393.15 475.45 mo
(\000O)sh
397.6 475.45 mo
(\000\003)sh
351.4 494.65 mo
(\0005)sh
362.95 494.65 mo
(\000H)sh
371.85 494.65 mo
(\000F)sh
380.75 494.65 mo
(\000R)sh
390.5 494.65 mo
(\000Q)sh
400.25 494.65 mo
(\000V)sh
409.15 494.65 mo
(\000W)sh
414.5 494.65 mo
(\000U)sh
420.75 494.65 mo
(\000X)sh
430.5 494.65 mo
(\000F)sh
439.4 494.65 mo
(\000W)sh
444.75 494.65 mo
(\000L)sh
449.2 494.65 mo
(\000R)sh
458.95 494.65 mo
(\000Q)sh
gsave
501.391 528.875 mo
499.873 528.862 li
498.389 528.824 li
496.955 528.763 li
495.579 528.679 li
494.268 528.574 li
493.027 528.448 li
491.864 528.303 li
490.784 528.14 li
489.794 527.958 li
488.898 527.758 li
488.107 527.541 li
487.736 527.421 li
487.395 527.295 li
487.077 527.161 li
486.779 527.014 li
486.499 526.849 li
486.234 526.658 li
485.983 526.424 li
485.755 526.125 li
485.58 525.742 li
485.525 525.377 li
485.525 487.883 li
485.538 488.052 li
485.519 487.925 li
485.607 488.224 li
485.55 488.099 li
485.679 488.314 li
485.585 488.191 li
485.712 488.331 li
485.583 488.21 li
485.692 488.3 li
485.527 488.181 li
485.616 488.239 li
485.417 488.122 li
485.49 488.161 li
485.258 488.047 li
485.317 488.074 li
485.053 487.963 li
485.102 487.982 li
484.806 487.873 li
484.847 487.887 li
484.522 487.781 li
484.572 487.796 li
483.833 487.594 li
483.886 487.607 li
483.037 487.418 li
483.079 487.426 li
482.127 487.252 li
482.161 487.257 li
481.114 487.099 li
481.143 487.103 li
480.008 486.961 li
480.034 486.964 li
478.817 486.841 li
478.841 486.843 li
477.551 486.74 li
477.573 486.741 li
476.218 486.658 li
476.238 486.659 li
474.824 486.599 li
474.844 486.6 li
473.379 486.562 li
473.399 486.563 li
462.9 486.474 li
462.9 484.376 li
473.399 484.287 li
473.379 484.288 li
474.844 484.25 li
474.824 484.251 li
476.238 484.19 li
476.218 484.192 li
477.573 484.109 li
477.551 484.11 li
478.841 484.007 li
478.817 484.009 li
480.034 483.886 li
480.008 483.889 li
481.143 483.747 li
481.114 483.751 li
482.161 483.593 li
482.127 483.598 li
483.079 483.424 li
483.037 483.432 li
483.886 483.243 li
483.833 483.256 li
484.572 483.054 li
484.522 483.069 li
484.847 482.963 li
484.806 482.977 li
485.102 482.868 li
485.053 482.887 li
485.317 482.776 li
485.258 482.803 li
485.49 482.689 li
485.417 482.728 li
485.616 482.611 li
485.527 482.669 li
485.692 482.55 li
485.583 482.64 li
485.712 482.519 li
485.585 482.659 li
485.679 482.536 li
485.55 482.751 li
485.607 482.626 li
485.519 482.924 li
485.538 482.798 li
485.525 482.967 li
485.525 445.473 li
485.58 445.108 li
485.755 444.725 li
485.983 444.426 li
486.234 444.192 li
486.499 444.001 li
486.779 443.836 li
487.077 443.689 li
487.395 443.555 li
487.736 443.429 li
488.107 443.309 li
488.898 443.092 li
489.794 442.892 li
490.784 442.71 li
491.864 442.547 li
493.027 442.402 li
494.268 442.276 li
495.579 442.171 li
496.955 442.087 li
498.389 442.026 li
499.873 441.988 li
501.391 441.975 li
501.409 444.225 li
499.901 444.238 li
499.921 444.237 li
498.456 444.275 li
498.476 444.274 li
497.062 444.334 li
497.082 444.333 li
495.727 444.416 li
495.749 444.415 li
494.459 444.518 li
494.483 444.516 li
493.266 444.639 li
493.292 444.636 li
492.157 444.778 li
492.186 444.774 li
491.139 444.932 li
491.173 444.927 li
490.221 445.101 li
490.263 445.093 li
489.414 445.282 li
489.467 445.269 li
488.728 445.471 li
488.778 445.456 li
488.453 445.562 li
488.494 445.548 li
488.198 445.657 li
488.247 445.638 li
487.983 445.749 li
488.042 445.722 li
487.81 445.836 li
487.883 445.797 li
487.684 445.914 li
487.773 445.856 li
487.608 445.975 li
487.717 445.885 li
487.588 446.006 li
487.715 445.866 li
487.621 445.989 li
487.75 445.774 li
487.693 445.899 li
487.781 445.6 li
487.762 445.727 li
487.775 445.558 li
487.775 483.052 li
487.72 483.417 li
487.545 483.8 li
487.317 484.099 li
487.066 484.333 li
486.801 484.524 li
486.521 484.689 li
486.223 484.836 li
485.905 484.97 li
485.564 485.096 li
485.193 485.216 li
484.402 485.433 li
483.506 485.633 li
482.516 485.815 li
481.436 485.978 li
480.273 486.123 li
479.032 486.249 li
477.721 486.354 li
476.345 486.438 li
474.911 486.499 li
473.427 486.537 li
471.909 486.55 li
471.909 484.3 li
473.427 484.313 li
474.911 484.351 li
476.345 484.412 li
477.721 484.496 li
479.032 484.601 li
480.273 484.727 li
481.436 484.872 li
482.516 485.035 li
483.506 485.217 li
484.402 485.417 li
485.193 485.634 li
485.564 485.754 li
485.905 485.88 li
486.223 486.014 li
486.521 486.161 li
486.801 486.326 li
487.066 486.517 li
487.317 486.751 li
487.545 487.05 li
487.72 487.433 li
487.775 487.798 li
487.775 525.292 li
487.762 525.123 li
487.781 525.25 li
487.693 524.951 li
487.75 525.076 li
487.621 524.861 li
487.715 524.984 li
487.588 524.844 li
487.717 524.965 li
487.608 524.875 li
487.773 524.994 li
487.684 524.936 li
487.883 525.052 li
487.81 525.014 li
488.042 525.128 li
487.983 525.101 li
488.247 525.212 li
488.198 525.193 li
488.494 525.302 li
488.453 525.288 li
488.778 525.394 li
488.728 525.379 li
489.467 525.581 li
489.414 525.568 li
490.263 525.757 li
490.221 525.749 li
491.173 525.923 li
491.139 525.918 li
492.186 526.076 li
492.157 526.072 li
493.292 526.214 li
493.266 526.211 li
494.483 526.334 li
494.459 526.332 li
495.749 526.435 li
495.727 526.434 li
497.082 526.517 li
497.062 526.516 li
498.476 526.576 li
498.456 526.575 li
499.921 526.613 li
499.901 526.612 li
501.409 526.625 li
501.391 528.875 li
clp
462.9 441.975 mo
501.409 441.975 li
501.409 528.875 li
462.9 528.875 li
cp
level3{
gsave
clp
[1 0 0 1 0 0 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [462.9 441.975 501.409 441.975 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~Xjd=NXjd=NXjd=NXjd=NXjd=NXjd=NXjd=NXjmCOXjmCOXjmCOXjmCOXjmCOXjmCOXjmCOXjmCOXjmCO
XjmCOXjmCOXjmCOY13LPY13LPY13LPY13LPY1<RQY1<RQY1<RQY1<RQY1<RQY1<RQY1<RQY1<RQY1<RQ
Y1<RQY1<RQY1<RQY1<RQY1<RQY1<RQY1<RQY1EXRY1EXRY1EXRY1EXRYL`aSYL`aSYL`aSYL`aSYL`aS
YL`aSYL`aSYL`aSYL`aSYL`aSYL`aSYLigTYLigTYLigTYLigTYLigTYLigTYLigTYLigTYLigTYLigT
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~YLigTYh/pUYh9!VYh9!VYh9!VYh9!VYh9!VYh9!VYh9!VYhB'WYhB'WZ.]0XZ.]0XZ.]0XZ.]0XZ.]0X
Z.]0XZ.]0XZ.f6YZ.f6YZ.f6YZ.f6YZ.f6YZJ,?ZZJ,?ZZJ,?ZZJ,?ZZJ,?ZZJ5E[ZJ5E[ZJ5E[ZJ5E[
ZJ5E[ZJ5E[ZJ5E[ZeYT]ZeYT]ZeYT]ZeYT]ZeYT]ZeYT]ZebZ^ZebZ^ZebZ^ZebZ^ZebZ^[,(c_[,1i`
[,1i`[,1i`[,1i`[,1i`[,:oa[,:oa[,:oa[,:oa[,:oa[G_)c[G_)c[G_)c[G_)c[G_)c[Gh/d[Gh/d
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~[Gh/d[Gh/d[Gq5e[Gq5e[c7>f[c@Dg[c@Dg[c@Dg[cIJh[cIJh\)mYj\)mYj\)mYj\*!_k\*!_k\E<hl
\EEnm\EEnm\EEnm\ENtn\`j(o\`s.p\`s.p\a'4q\a'4q]'B=r]'KCs]'KCs]'KCs]BoRu]BoRu]BoRu
]^>b"]^>b"]^Gh#^$bq$^$bq$^$l"%^@2+&^@2+&^[V:(^[V:(^[_@)_"%I*_"%L+_=Ia/_=Id0_=Ig1
_Xn$4_Xn'5_Xn*6_t=<9_t=?:`:XK<`:aW?`:aZ@`V'fB`V0oD`V0rE`qL)G`qU2I`qU5Ja8$JNa8$MO
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~a8$MOaS?YQaSHeTaSHhUanm(Yanm+Zb5<@^b5<C_bP`XcbP`afbl0!jbl0'lc2T<pcMoKscMoQuci5a#
ci5j&d/Q$)d/Q*+dJl9.dJl?0df2N3df2T5e,Mc8eGho:eGhu<ec//@ec/5Bf)JADf)JGFfDeVIfDeYJ
f`+hMf`+kOg&G"Qg&G(SgAb4UgAb7Vg](FZg](L\h#CX^h#C^ah>^mdh>^sghZ%-jhZ%0lhu@?ohu@Er
hu@Kti;[[#i;[^%iW!m(iW!s+ir=-.ir=00ir=63j8XB6j8XH9j8XK;j8XN=jSsZ@jSs`CjSscEjSsfG
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.25 .5 .75 ]
/Encode [0 1 0 1 0 1 0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1 0 0 1 0 0 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Y-+q1Y-+q1Y-+q1Y-+q1Y-+q1Y-+q1YHP.5YHP.5YHP.5YHP.5YHP.5
YHP17Yct@9Yct@9Z*CR=Z*CR=Z*CR=ZEgdAZEgdAZEgdAZa7!EZa7!EZa7!F['[3I['[3I['[6K[C*EM
[C*EM[C3NP[^NWR\$riU\@B&Y\@K/\\[f;_]"5Mc]=beh]tM+n^;%Ft^qde&_8=(+_o'F2`5T^7`l?$=
a2c9BaN;QHb0.uPbg"GYcd0tbdF$Cje'umte^i='f@\a/g"P07gYCT?h;7#Ghr!AMiSieUioB(Zj5f:^
~>
<~eC<!teC<!te^`4#e^`4#e^`4#e^`4#f%/F'f%/F'f%/F'f%/F'f@SX+f@SX+f@SX+f@SX,f\"j/f\"j/
f\"j0g"G'3g"G*5g=k97g=k98gY:K;gY:K;gYCT>gt^]?h;-oCh;-rEhVR,Ghr!>Khr*GNi8ESQiSibT
io8tXj5]4]jQ5Lck2tjikNM-nl07Kulg*m'm-O-,mI'E2n*fc8nF?&>o()DDoCV\Ip%A"Op@e7Tp\=OZ
q>'j_qYU0fr;HTnrr<#us8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
~>
<~zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz!!*0)"U52;#mq%L%M'*_&ebrp(Ddr-*$$+D+s
eTc.kND/1c@<S4?c"s6UaL:8k_uU;,U=l<``C,>[:]F@qB7cC2@d+EH?8GG^4X`I=?]t~>
<~zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz!!!!"!<E3%!<E6'!WiE*!s8Z/"
U,)7#6tM@#mq"I$k3[W&.oNg~>
]
>>
462.9 441.975 501.409 441.975 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
grestore
gsave
501.391 415.875 mo
499.873 415.862 li
498.389 415.824 li
496.955 415.763 li
495.579 415.679 li
494.268 415.574 li
493.027 415.448 li
491.864 415.303 li
490.784 415.14 li
489.794 414.958 li
488.898 414.758 li
488.107 414.541 li
487.736 414.421 li
487.395 414.295 li
487.077 414.161 li
486.779 414.014 li
486.499 413.849 li
486.234 413.658 li
485.983 413.424 li
485.755 413.125 li
485.58 412.742 li
485.525 412.377 li
485.525 374.883 li
485.538 375.052 li
485.519 374.925 li
485.607 375.224 li
485.55 375.099 li
485.679 375.314 li
485.585 375.191 li
485.712 375.331 li
485.583 375.21 li
485.692 375.3 li
485.527 375.181 li
485.616 375.239 li
485.417 375.122 li
485.49 375.161 li
485.258 375.047 li
485.317 375.074 li
485.053 374.963 li
485.102 374.982 li
484.806 374.873 li
484.847 374.887 li
484.522 374.781 li
484.572 374.796 li
483.833 374.594 li
483.886 374.607 li
483.037 374.418 li
483.079 374.426 li
482.127 374.252 li
482.161 374.257 li
481.114 374.099 li
481.143 374.103 li
480.008 373.961 li
480.034 373.964 li
478.817 373.841 li
478.841 373.843 li
477.551 373.74 li
477.573 373.741 li
476.218 373.658 li
476.238 373.659 li
474.824 373.599 li
474.844 373.6 li
473.379 373.562 li
473.399 373.563 li
462.9 373.474 li
462.9 371.376 li
473.399 371.287 li
473.379 371.288 li
474.844 371.25 li
474.824 371.251 li
476.238 371.19 li
476.218 371.192 li
477.573 371.109 li
477.551 371.11 li
478.841 371.007 li
478.817 371.009 li
480.034 370.886 li
480.008 370.889 li
481.143 370.747 li
481.114 370.751 li
482.161 370.593 li
482.127 370.598 li
483.079 370.424 li
483.037 370.432 li
483.886 370.243 li
483.833 370.256 li
484.572 370.054 li
484.522 370.069 li
484.847 369.963 li
484.806 369.977 li
485.102 369.868 li
485.053 369.887 li
485.317 369.776 li
485.258 369.803 li
485.49 369.689 li
485.417 369.728 li
485.616 369.611 li
485.527 369.669 li
485.692 369.55 li
485.583 369.64 li
485.712 369.519 li
485.585 369.659 li
485.679 369.536 li
485.55 369.751 li
485.607 369.626 li
485.519 369.924 li
485.538 369.798 li
485.525 369.967 li
485.525 332.473 li
485.58 332.108 li
485.755 331.725 li
485.983 331.426 li
486.234 331.192 li
486.499 331.001 li
486.779 330.836 li
487.077 330.689 li
487.395 330.555 li
487.736 330.429 li
488.107 330.309 li
488.898 330.092 li
489.794 329.892 li
490.784 329.71 li
491.864 329.547 li
493.027 329.402 li
494.268 329.276 li
495.579 329.171 li
496.955 329.087 li
498.389 329.026 li
499.873 328.988 li
501.391 328.975 li
501.409 331.225 li
499.901 331.238 li
499.921 331.237 li
498.456 331.275 li
498.476 331.274 li
497.062 331.334 li
497.082 331.333 li
495.727 331.416 li
495.749 331.415 li
494.459 331.518 li
494.483 331.516 li
493.266 331.639 li
493.292 331.636 li
492.157 331.778 li
492.186 331.774 li
491.139 331.932 li
491.173 331.927 li
490.221 332.101 li
490.263 332.093 li
489.414 332.282 li
489.467 332.269 li
488.728 332.471 li
488.778 332.456 li
488.453 332.562 li
488.494 332.548 li
488.198 332.657 li
488.247 332.638 li
487.983 332.749 li
488.042 332.722 li
487.81 332.836 li
487.883 332.797 li
487.684 332.914 li
487.773 332.856 li
487.608 332.975 li
487.717 332.885 li
487.588 333.006 li
487.715 332.866 li
487.621 332.989 li
487.75 332.774 li
487.693 332.899 li
487.781 332.6 li
487.762 332.727 li
487.775 332.558 li
487.775 370.052 li
487.72 370.417 li
487.545 370.8 li
487.317 371.099 li
487.066 371.333 li
486.801 371.524 li
486.521 371.689 li
486.223 371.836 li
485.905 371.97 li
485.564 372.096 li
485.193 372.216 li
484.402 372.433 li
483.506 372.633 li
482.516 372.815 li
481.436 372.978 li
480.273 373.123 li
479.032 373.249 li
477.721 373.354 li
476.345 373.438 li
474.911 373.499 li
473.427 373.537 li
471.909 373.55 li
471.909 371.3 li
473.427 371.313 li
474.911 371.351 li
476.345 371.412 li
477.721 371.496 li
479.032 371.601 li
480.273 371.727 li
481.436 371.872 li
482.516 372.035 li
483.506 372.217 li
484.402 372.417 li
485.193 372.634 li
485.564 372.754 li
485.905 372.88 li
486.223 373.014 li
486.521 373.161 li
486.801 373.326 li
487.066 373.517 li
487.317 373.751 li
487.545 374.05 li
487.72 374.433 li
487.775 374.798 li
487.775 412.292 li
487.762 412.123 li
487.781 412.249 li
487.693 411.951 li
487.75 412.076 li
487.621 411.861 li
487.715 411.984 li
487.588 411.844 li
487.717 411.965 li
487.608 411.875 li
487.773 411.994 li
487.684 411.936 li
487.883 412.052 li
487.81 412.014 li
488.042 412.128 li
487.983 412.101 li
488.247 412.212 li
488.198 412.193 li
488.494 412.302 li
488.453 412.288 li
488.778 412.394 li
488.728 412.379 li
489.467 412.581 li
489.414 412.568 li
490.263 412.757 li
490.221 412.749 li
491.173 412.923 li
491.139 412.918 li
492.186 413.076 li
492.157 413.072 li
493.292 413.214 li
493.266 413.211 li
494.483 413.334 li
494.459 413.332 li
495.749 413.435 li
495.727 413.434 li
497.082 413.517 li
497.062 413.515 li
498.476 413.576 li
498.456 413.575 li
499.921 413.613 li
499.901 413.612 li
501.409 413.625 li
501.391 415.875 li
clp
462.9 328.975 mo
501.409 328.975 li
501.409 415.875 li
462.9 415.875 li
cp
level3{
gsave
clp
[1 0 0 1 0 0 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [462.9 328.975 501.409 328.975 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~Xjd=NXjd=NXjd=NXjd=NXjd=NXjd=NXjd=NXjmCOXjmCOXjmCOXjmCOXjmCOXjmCOXjmCOXjmCOXjmCO
XjmCOXjmCOXjmCOY13LPY13LPY13LPY13LPY1<RQY1<RQY1<RQY1<RQY1<RQY1<RQY1<RQY1<RQY1<RQ
Y1<RQY1<RQY1<RQY1<RQY1<RQY1<RQY1<RQY1EXRY1EXRY1EXRY1EXRYL`aSYL`aSYL`aSYL`aSYL`aS
YL`aSYL`aSYL`aSYL`aSYL`aSYL`aSYLigTYLigTYLigTYLigTYLigTYLigTYLigTYLigTYLigTYLigT
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~YLigTYh/pUYh9!VYh9!VYh9!VYh9!VYh9!VYh9!VYh9!VYhB'WYhB'WZ.]0XZ.]0XZ.]0XZ.]0XZ.]0X
Z.]0XZ.]0XZ.f6YZ.f6YZ.f6YZ.f6YZ.f6YZJ,?ZZJ,?ZZJ,?ZZJ,?ZZJ,?ZZJ5E[ZJ5E[ZJ5E[ZJ5E[
ZJ5E[ZJ5E[ZJ5E[ZeYT]ZeYT]ZeYT]ZeYT]ZeYT]ZeYT]ZebZ^ZebZ^ZebZ^ZebZ^ZebZ^[,(c_[,1i`
[,1i`[,1i`[,1i`[,1i`[,:oa[,:oa[,:oa[,:oa[,:oa[G_)c[G_)c[G_)c[G_)c[G_)c[Gh/d[Gh/d
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~[Gh/d[Gh/d[Gq5e[Gq5e[c7>f[c@Dg[c@Dg[c@Dg[cIJh[cIJh\)mYj\)mYj\)mYj\*!_k\*!_k\E<hl
\EEnm\EEnm\EEnm\ENtn\`j(o\`s.p\`s.p\a'4q\a'4q]'B=r]'KCs]'KCs]'KCs]BoRu]BoRu]BoRu
]^>b"]^>b"]^Gh#^$bq$^$bq$^$l"%^@2+&^@2+&^[V:(^[V:(^[_@)_"%I*_"%L+_=Ia/_=Id0_=Ig1
_Xn$4_Xn'5_Xn*6_t=<9_t=?:`:XK<`:aW?`:aZ@`V'fB`V0oD`V0rE`qL)G`qU2I`qU5Ja8$JNa8$MO
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~a8$MOaS?YQaSHeTaSHhUanm(Yanm+Zb5<@^b5<C_bP`XcbP`afbl0!jbl0'lc2T<pcMoKscMoQuci5a#
ci5j&d/Q$)d/Q*+dJl9.dJl?0df2N3df2T5e,Mc8eGho:eGhu<ec//@ec/5Bf)JADf)JGFfDeVIfDeYJ
f`+hMf`+kOg&G"Qg&G(SgAb4UgAb7Vg](FZg](L\h#CX^h#C^ah>^mdh>^sghZ%-jhZ%0lhu@?ohu@Er
hu@Kti;[[#i;[^%iW!m(iW!s+ir=-.ir=00ir=63j8XB6j8XH9j8XK;j8XN=jSsZ@jSs`CjSscEjSsfG
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.25 .5 .75 ]
/Encode [0 1 0 1 0 1 0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1 0 0 1 0 0 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Y-+q1Y-+q1Y-+q1Y-+q1Y-+q1Y-+q1YHP.5YHP.5YHP.5YHP.5YHP.5
YHP17Yct@9Yct@9Z*CR=Z*CR=Z*CR=ZEgdAZEgdAZEgdAZa7!EZa7!EZa7!F['[3I['[3I['[6K[C*EM
[C*EM[C3NP[^NWR\$riU\@B&Y\@K/\\[f;_]"5Mc]=beh]tM+n^;%Ft^qde&_8=(+_o'F2`5T^7`l?$=
a2c9BaN;QHb0.uPbg"GYcd0tbdF$Cje'umte^i='f@\a/g"P07gYCT?h;7#Ghr!AMiSieUioB(Zj5f:^
~>
<~eC<!teC<!te^`4#e^`4#e^`4#e^`4#f%/F'f%/F'f%/F'f%/F'f@SX+f@SX+f@SX+f@SX,f\"j/f\"j/
f\"j0g"G'3g"G*5g=k97g=k98gY:K;gY:K;gYCT>gt^]?h;-oCh;-rEhVR,Ghr!>Khr*GNi8ESQiSibT
io8tXj5]4]jQ5Lck2tjikNM-nl07Kulg*m'm-O-,mI'E2n*fc8nF?&>o()DDoCV\Ip%A"Op@e7Tp\=OZ
q>'j_qYU0fr;HTnrr<#us8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
~>
<~zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz!!*0)"U52;#mq%L%M'*_&ebrp(Ddr-*$$+D+s
eTc.kND/1c@<S4?c"s6UaL:8k_uU;,U=l<``C,>[:]F@qB7cC2@d+EH?8GG^4X`I=?]t~>
<~zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz!!!!"!<E3%!<E6'!WiE*!s8Z/"
U,)7#6tM@#mq"I$k3[W&.oNg~>
]
>>
462.9 328.975 501.409 328.975 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
grestore
gsave
501.391 289.225 mo
499.873 289.212 li
498.389 289.174 li
496.955 289.113 li
495.579 289.029 li
494.268 288.924 li
493.027 288.798 li
491.864 288.653 li
490.784 288.49 li
489.794 288.308 li
488.898 288.108 li
488.107 287.891 li
487.736 287.771 li
487.395 287.645 li
487.077 287.511 li
486.779 287.364 li
486.499 287.199 li
486.234 287.008 li
485.983 286.774 li
485.755 286.475 li
485.58 286.092 li
485.525 285.727 li
485.525 248.233 li
485.538 248.402 li
485.519 248.275 li
485.607 248.574 li
485.55 248.449 li
485.679 248.664 li
485.585 248.541 li
485.712 248.681 li
485.583 248.56 li
485.692 248.65 li
485.527 248.531 li
485.616 248.589 li
485.417 248.472 li
485.49 248.511 li
485.258 248.397 li
485.317 248.424 li
485.053 248.313 li
485.102 248.332 li
484.806 248.223 li
484.847 248.237 li
484.522 248.131 li
484.572 248.146 li
483.833 247.944 li
483.886 247.957 li
483.037 247.768 li
483.079 247.776 li
482.127 247.602 li
482.161 247.607 li
481.114 247.449 li
481.143 247.453 li
480.008 247.311 li
480.034 247.314 li
478.817 247.191 li
478.841 247.193 li
477.551 247.09 li
477.573 247.091 li
476.218 247.008 li
476.238 247.009 li
474.824 246.949 li
474.844 246.95 li
473.379 246.912 li
473.399 246.913 li
462.9 246.824 li
462.9 244.726 li
473.399 244.637 li
473.379 244.638 li
474.844 244.6 li
474.824 244.601 li
476.238 244.541 li
476.218 244.542 li
477.573 244.459 li
477.551 244.46 li
478.841 244.357 li
478.817 244.359 li
480.034 244.236 li
480.008 244.239 li
481.143 244.097 li
481.114 244.101 li
482.161 243.943 li
482.127 243.948 li
483.079 243.774 li
483.037 243.782 li
483.886 243.593 li
483.833 243.606 li
484.572 243.404 li
484.522 243.419 li
484.847 243.313 li
484.806 243.327 li
485.102 243.218 li
485.053 243.237 li
485.317 243.126 li
485.258 243.153 li
485.49 243.039 li
485.417 243.078 li
485.616 242.961 li
485.527 243.019 li
485.692 242.9 li
485.583 242.99 li
485.712 242.869 li
485.585 243.009 li
485.679 242.886 li
485.55 243.101 li
485.607 242.976 li
485.519 243.275 li
485.538 243.148 li
485.525 243.317 li
485.525 205.823 li
485.58 205.458 li
485.755 205.075 li
485.983 204.776 li
486.234 204.542 li
486.499 204.351 li
486.779 204.186 li
487.077 204.039 li
487.395 203.905 li
487.736 203.779 li
488.107 203.659 li
488.898 203.442 li
489.794 203.242 li
490.784 203.06 li
491.864 202.897 li
493.027 202.752 li
494.268 202.626 li
495.579 202.521 li
496.955 202.437 li
498.389 202.376 li
499.873 202.338 li
501.391 202.325 li
501.409 204.575 li
499.901 204.588 li
499.921 204.587 li
498.456 204.625 li
498.476 204.624 li
497.062 204.684 li
497.082 204.683 li
495.727 204.766 li
495.749 204.765 li
494.459 204.868 li
494.483 204.866 li
493.266 204.989 li
493.292 204.986 li
492.157 205.128 li
492.186 205.124 li
491.139 205.282 li
491.173 205.277 li
490.221 205.451 li
490.263 205.443 li
489.414 205.632 li
489.467 205.619 li
488.728 205.821 li
488.778 205.806 li
488.453 205.912 li
488.494 205.898 li
488.198 206.007 li
488.247 205.988 li
487.983 206.099 li
488.042 206.072 li
487.81 206.186 li
487.883 206.147 li
487.684 206.264 li
487.773 206.206 li
487.608 206.325 li
487.717 206.235 li
487.588 206.356 li
487.715 206.216 li
487.621 206.339 li
487.75 206.124 li
487.693 206.249 li
487.781 205.95 li
487.762 206.077 li
487.775 205.908 li
487.775 243.402 li
487.72 243.767 li
487.545 244.15 li
487.317 244.449 li
487.066 244.683 li
486.801 244.874 li
486.521 245.039 li
486.223 245.186 li
485.905 245.32 li
485.564 245.446 li
485.193 245.566 li
484.402 245.783 li
483.506 245.983 li
482.516 246.165 li
481.436 246.328 li
480.273 246.473 li
479.032 246.599 li
477.721 246.704 li
476.345 246.788 li
474.911 246.849 li
473.427 246.887 li
471.909 246.9 li
471.909 244.65 li
473.427 244.663 li
474.911 244.701 li
476.345 244.762 li
477.721 244.846 li
479.032 244.951 li
480.273 245.077 li
481.436 245.222 li
482.516 245.385 li
483.506 245.567 li
484.402 245.767 li
485.193 245.984 li
485.564 246.104 li
485.905 246.23 li
486.223 246.364 li
486.521 246.511 li
486.801 246.676 li
487.066 246.867 li
487.317 247.101 li
487.545 247.4 li
487.72 247.783 li
487.775 248.148 li
487.775 285.642 li
487.762 285.473 li
487.781 285.6 li
487.693 285.301 li
487.75 285.426 li
487.621 285.211 li
487.715 285.334 li
487.588 285.194 li
487.717 285.315 li
487.608 285.225 li
487.773 285.344 li
487.684 285.286 li
487.883 285.403 li
487.81 285.364 li
488.042 285.478 li
487.983 285.451 li
488.247 285.562 li
488.198 285.543 li
488.494 285.652 li
488.453 285.638 li
488.778 285.744 li
488.728 285.729 li
489.467 285.931 li
489.414 285.918 li
490.263 286.107 li
490.221 286.099 li
491.173 286.273 li
491.139 286.268 li
492.186 286.426 li
492.157 286.422 li
493.292 286.564 li
493.266 286.561 li
494.483 286.684 li
494.459 286.682 li
495.749 286.785 li
495.727 286.784 li
497.082 286.867 li
497.062 286.866 li
498.476 286.926 li
498.456 286.925 li
499.921 286.963 li
499.901 286.962 li
501.409 286.975 li
501.391 289.225 li
clp
462.9 202.325 mo
501.409 202.325 li
501.409 289.225 li
462.9 289.225 li
cp
level3{
gsave
clp
[1 0 0 1 0 0 ]ct
/3 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [462.9 202.325 501.409 202.325 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~Xjd=NXjd=NXjd=NXjd=NXjd=NXjd=NXjd=NXjmCOXjmCOXjmCOXjmCOXjmCOXjmCOXjmCOXjmCOXjmCO
XjmCOXjmCOXjmCOY13LPY13LPY13LPY13LPY1<RQY1<RQY1<RQY1<RQY1<RQY1<RQY1<RQY1<RQY1<RQ
Y1<RQY1<RQY1<RQY1<RQY1<RQY1<RQY1<RQY1EXRY1EXRY1EXRY1EXRYL`aSYL`aSYL`aSYL`aSYL`aS
YL`aSYL`aSYL`aSYL`aSYL`aSYL`aSYLigTYLigTYLigTYLigTYLigTYLigTYLigTYLigTYLigTYLigT
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~YLigTYh/pUYh9!VYh9!VYh9!VYh9!VYh9!VYh9!VYh9!VYhB'WYhB'WZ.]0XZ.]0XZ.]0XZ.]0XZ.]0X
Z.]0XZ.]0XZ.f6YZ.f6YZ.f6YZ.f6YZ.f6YZJ,?ZZJ,?ZZJ,?ZZJ,?ZZJ,?ZZJ5E[ZJ5E[ZJ5E[ZJ5E[
ZJ5E[ZJ5E[ZJ5E[ZeYT]ZeYT]ZeYT]ZeYT]ZeYT]ZeYT]ZebZ^ZebZ^ZebZ^ZebZ^ZebZ^[,(c_[,1i`
[,1i`[,1i`[,1i`[,1i`[,:oa[,:oa[,:oa[,:oa[,:oa[G_)c[G_)c[G_)c[G_)c[G_)c[Gh/d[Gh/d
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~[Gh/d[Gh/d[Gq5e[Gq5e[c7>f[c@Dg[c@Dg[c@Dg[cIJh[cIJh\)mYj\)mYj\)mYj\*!_k\*!_k\E<hl
\EEnm\EEnm\EEnm\ENtn\`j(o\`s.p\`s.p\a'4q\a'4q]'B=r]'KCs]'KCs]'KCs]BoRu]BoRu]BoRu
]^>b"]^>b"]^Gh#^$bq$^$bq$^$l"%^@2+&^@2+&^[V:(^[V:(^[_@)_"%I*_"%L+_=Ia/_=Id0_=Ig1
_Xn$4_Xn'5_Xn*6_t=<9_t=?:`:XK<`:aW?`:aZ@`V'fB`V0oD`V0rE`qL)G`qU2I`qU5Ja8$JNa8$MO
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~a8$MOaS?YQaSHeTaSHhUanm(Yanm+Zb5<@^b5<C_bP`XcbP`afbl0!jbl0'lc2T<pcMoKscMoQuci5a#
ci5j&d/Q$)d/Q*+dJl9.dJl?0df2N3df2T5e,Mc8eGho:eGhu<ec//@ec/5Bf)JADf)JGFfDeVIfDeYJ
f`+hMf`+kOg&G"Qg&G(SgAb4UgAb7Vg](FZg](L\h#CX^h#C^ah>^mdh>^sghZ%-jhZ%0lhu@?ohu@Er
hu@Kti;[[#i;[^%iW!m(iW!s+ir=-.ir=00ir=63j8XB6j8XH9j8XK;j8XN=jSsZ@jSs`CjSscEjSsfG
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.25 .5 .75 ]
/Encode [0 1 0 1 0 1 0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1 0 0 1 0 0 ]ct
clp
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Y-+q1Y-+q1Y-+q1Y-+q1Y-+q1Y-+q1YHP.5YHP.5YHP.5YHP.5YHP.5
YHP17Yct@9Yct@9Z*CR=Z*CR=Z*CR=ZEgdAZEgdAZEgdAZa7!EZa7!EZa7!F['[3I['[3I['[6K[C*EM
[C*EM[C3NP[^NWR\$riU\@B&Y\@K/\\[f;_]"5Mc]=beh]tM+n^;%Ft^qde&_8=(+_o'F2`5T^7`l?$=
a2c9BaN;QHb0.uPbg"GYcd0tbdF$Cje'umte^i='f@\a/g"P07gYCT?h;7#Ghr!AMiSieUioB(Zj5f:^
~>
<~eC<!teC<!te^`4#e^`4#e^`4#e^`4#f%/F'f%/F'f%/F'f%/F'f@SX+f@SX+f@SX+f@SX,f\"j/f\"j/
f\"j0g"G'3g"G*5g=k97g=k98gY:K;gY:K;gYCT>gt^]?h;-oCh;-rEhVR,Ghr!>Khr*GNi8ESQiSibT
io8tXj5]4]jQ5Lck2tjikNM-nl07Kulg*m'm-O-,mI'E2n*fc8nF?&>o()DDoCV\Ip%A"Op@e7Tp\=OZ
q>'j_qYU0fr;HTnrr<#us8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
~>
<~zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz!!*0)"U52;#mq%L%M'*_&ebrp(Ddr-*$$+D+s
eTc.kND/1c@<S4?c"s6UaL:8k_uU;,U=l<``C,>[:]F@qB7cC2@d+EH?8GG^4X`I=?]t~>
<~zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz!!!!"!<E3%!<E6'!WiE*!s8Z/"
U,)7#6tM@#mq"I$k3[W&.oNg~>
]
>>
462.9 202.325 501.409 202.325 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
grestore
%ADOBeginSubsetFont: UAAAAA+Arial-BoldItalicMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/UAAAAA+Arial-BoldItalicMT 11 GetGlyphDirectory
42 <001C60D8A8C9B6FF86FAC73D147D2B66CFC845BE4AB1F6B43E76A6102794
EDAE40652CF144584560CCEF02A6C4A6574A6D84389CC565F8B12B7543791F87
479AEFAC2765B4E1E9A67AD20FFB07725F6D70BFA7F435DB28186993791EDF62
303D496AF6983517EEF4EAF3DACB21629267E70851BFF1B5A0493C76C4488014
F3AD11B3ABA1FAC1D413B5CA523672CE42244D1C0BCA21637F3C89B76FE4C7C2
6202> |
80 <001C60D8A8C9B59F85BF90D853C0652842F5997EC289709F26E2EF717635
30D111A7ED74F5BA977EE3D6C514674F43108925BCAD5D3A85B3707BC2EF6DA9
13F8C8707705D4B2B74EA55D3288055ADE6BDCEE39903FF7B7AACE44E050BE68
30D9B486EFDB925B6ABDE67F1845FE31C165E36BD343F1B5D6497D16F48A96B3
5BC0B58240966D995EC0ADE97ED62545ABCA3EF552A3E6A87FB69DA9B0E1AE2E
F9F754D708DD9BEA5F70A2E1ED08C0498E1F13D8FAA2E0EDC8172B41FED4> |
47 <001C60D8A8C9B7D8BE194E20DCFE811A18C5C548631AD7D6A1F8577671A1
FB60E63A> |
40 <001C60D8A8C9B64EDFFB963413211994AD29A31453FFDFD9EFBC30879361
DC8DA6A53FAB49F1A206A56D28A2952DEA10DD311C98399D> |
16 <001C60D8A8C9B81F2C7E67F21701871D58A1A4D0BF4E186588> |
58 <001C60D8A8C9B5D6EF4FF2EF4E06E14262CFCC71278DA4A3F12CB0337FB0
9AA21301F7AD13527EE29AEFB76EE5C26A6D348BC5663DAE159139BBAFED0579> |
78 <001C60D8A8C9B7EF322B534718FECD032314CB47FC95CAEF86DAF86D7AAD
9B7F817C8654309F6BB89067C0856911674CD72138FC66C759940CFF> |
89 <001C60D8A8C9B7EF32248E548602F3D8FC9BC3C4522FB9EB4FFEC3CF89EB
192A20F7242E9C325F5D4DC99A01DDD1B51F82F0484F7E87A0196C9E4D> |
56 <001C60D8A8C9B6079F62ACDC38C753C63B9523066C7E279269A5A813AF16
DBB910594E3C56A283CAB58B81CD31167089FCB82854BB915CC9DBC6048356C7
E2F16B0209E6D748A2044CD6CD1A360C5226348B5790CFC2C7BAAD32836AA5E6
6E463A41655D3AE71BFE71015E0559FDC34E3866DB50CE3D4467868C3556BC66
FE9B> |
46 <001C60D8A8C9B6079F62E534710F27D87836D1BE9F973E6434C2282385ED
28286AF450389D1B1364E57792BF5178EFA1076985E83B687639569B5915EA> |
90 <001C60D8A8C9B6FF86FB1EE6B9DAA31185E42FCC0C2E2CE23BF37DC673FC
6ECF50EBCBCE435A43842B7ED3E6E8C873C8047B1D95CBF3E2920A7EF6A8377C> |
!
end
end end
%ADOEndSubsetFont
OSUAYH+Arial-BoldItalicMT [14.05 0 0 -14.05 0 0 ]msf
508.6 210.95 mo
(\000\))sh
517.15 210.95 mo
(\000R)sh
525.7 210.95 mo
(\000R)sh
534.25 210.95 mo
(\000O)sh
538.15 210.95 mo
(\000V)sh
545.95 210.95 mo
(\000*)sh
556.85 210.95 mo
(\000R)sh
565.4 210.95 mo
(\000O)sh
569.3 210.95 mo
(\000G)sh
577.85 210.95 mo
(\000\003)sh
581.75 210.95 mo
(\000\013)sh
586.4 210.95 mo
(\000\025)sh
594.2 210.95 mo
(\000\023)sh
602 210.95 mo
(\000\024)sh
609.8 210.95 mo
(\000\033)sh
617.6 210.95 mo
(\000\014)sh
622.25 210.95 mo
(\000\003)sh
626.15 210.95 mo
(\000\003)sh
630.05 210.95 mo
(\000\003)sh
%ADOBeginSubsetFont: ZAAAAA+ArialMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/ZAAAAA+ArialMT 12 GetGlyphDirectory
41 <001C60D8A8C9B7D8BE1661AF70E1029B586475C590C02056C6BE2BB9C232
9F7F6ED1937D1E8A10> |
27 <001C60D8A8C9B7EF320BBFC2657E9B35A6705AFBBFAA1C93BB40418E3C07
1A4B65F9256C97D19A81FC1920D97D74BDC10680B006C358F4A055E8EB310D17
DB36B82D07BF6EC33DD32B1D55F043C26D6FDD8A81CBAE4C8F71815B896A63B1
FDB98A0F7ECF9E837B10C378B26EDC5928C7E8B3799AB2CD264A8AEAC999F603
BC4D805ED282A00B545281ED6B9C18B6DFE4AB08C5EA70E73FE4832D8BDE5A7E
FB46CDDEE476E8817925C1CEAE85568DE92FBFB771DE6BBC3B6BB104C9521957
1FA1AFECF133380FB1F1E150D70FC591604EE1D20E2A6F50D40957F263D48A1A
19A5D671D3A632D7FED2532ACF68D20DD9EC4B411696AEE5583B5D2BC1304A55
977C35> |
49 <001C60D8A8C9B6079F629170873C67115641D0B6890161EC48F71E8D2106
F3AC927984C1E464F121F968> |
92 <001C60D8A8C9B7A73DB92EFAEC912AA9CB61EA2C87B96577B4D13A11140A
AA18C6E226D96ACA3DE3B427B0A298EF106E8BC0FCA1DC8D81AF2F08A42A0F58
36B6230FDF576E37CE129EFF9730F23EC10CF5ACA4D4CA70309E71B89A944CA7
348AEBF55FF5ADA9F61B4BA14C9A2301A8C53EBFBE665E1DC22E> |
20 <001C60D8A8C9B7EF32247817CBAD74894E625B0BAD23872C089E8D91F92F
E1B529DBABA181AB8B085B7A00FC86C529813E9B576642> |
36 <001C60D8A8C9B64EDFED26B9E21A4F64848088903AC9891CF791BDBC4AB2
9ACC8B3E8D13924A7DDE35F09AC5F4A8229C87124C732743268600EF8D458220
8BD16D82> |
59 <001C60D8A8C9B64EDFF4DFD017B43F7EAB96365BACFBED2D71ADAE4E00FD
12B461A7F13C64E3A175013F8F17B0F966419CDFD1925B86CBC99EE22C73270B
3DB758F48A1908F21BEE4A7E0F431996B89DD71E609DF64575A71FFC> |
55 <001C60D8A8C9B7D8BE16D2C1CA7ED2E06F707C0E9530AE37D06FF7501A59
5D3927> |
70 <001C60D8A8C9B7A73DB9D8FD6AA4FBAF8D65C36EA1D4AADBD389F972C0ED
CE9E7F36285FA93A80D3647871D2CE5AAAA6A6A370DC54E1595FB6AAB3E389C9
F7BBBB85F787D6C418B35B940450E5E243895ECFD2205F51B2D154CFFECF3414
8C344C1EF806F9AAF539FB961E3EFAF6353381E833DF7C0542FFF27122A28D36
548FE63FC8465B1B685766E782F0> |
58 <001C60D8A8C9B5D6EF420A3AC101C9354A948DB23A64166EB3D55EEB13F0
DE3A88231C2286900994060E46C1096C7ABFBA281AAEB86123AF398A1FE8A551
414253B8F3844EF59084BCE1B4D5AF071FD672A0C8C15E821130EADB430FA7E5
25278C31C213B6FF1A25> |
46 <001C60D8A8C9B64EDFF4E9C0F6048EB723B0CED8EE1109108A02369C8B45
382285654732A05ADDD12E99CCD504BC058489833BA3AE060EFA> |
23 <001C60D8A8C9B7EF32245FD0373664E2B980D56E9D691EE5A95B5050BFE0
23151494A4A591D0216BE411323E192BCC75A7A889FA57031D> |
!
end
end end
%ADOEndSubsetFont
OSUAYI+ArialMT [12 0 0 -12 0 0 ]msf
633.95 210.95 mo
(\000\))sh
641.3 210.95 mo
(\000X)sh
647.95 210.95 mo
(\000Q)sh
654.6 210.95 mo
(\000J)sh
661.25 210.95 mo
(\000\003)sh
664.6 210.95 mo
(\000H)sh
671.25 210.95 mo
(\000W)sh
674.6 210.95 mo
(\000\003)sh
677.95 210.95 mo
(\000D)sh
684.6 210.95 mo
(\000O)sh
687.25 210.95 mo
(\000\021)sh
690.6 210.95 mo
(\000\003)sh
693.95 210.95 mo
(\000>)sh
697.3 210.95 mo
(\000\032)sh
703.95 210.95 mo
(\000\034)sh
710.6 210.95 mo
(\000@)sh
OSUAYH+Arial-BoldItalicMT [14.05 0 0 -14.05 0 0 ]msf
508.6 241 mo
(\0006)sh
517.95 241 mo
(\000S)sh
526.5 241 mo
(\000H)sh
534.3 241 mo
(\000F)sh
542.1 241 mo
(\000W)sh
546.75 241 mo
(\000U)sh
552.2 241 mo
(\000D)sh
560 241 mo
(\000O)sh
563.9 241 mo
(\000\003)sh
567.25 241 mo
(\000$)sh
577.35 241 mo
(\000Q)sh
585.9 241 mo
(\000R)sh
594.45 241 mo
(\000P)sh
606.9 241 mo
(\000D)sh
614.7 241 mo
(\000O)sh
618.6 241 mo
(\000\\)sh
626.4 241 mo
(\000\003)sh
630.3 241 mo
(\000')sh
640.4 241 mo
(\000H)sh
648.2 241 mo
(\000W)sh
652.85 241 mo
(\000H)sh
660.65 241 mo
(\000F)sh
668.45 241 mo
(\000W)sh
673.1 241 mo
(\000L)sh
677 241 mo
(\000R)sh
685.55 241 mo
(\000Q)sh
694.1 241 mo
(\000\003)sh
698 241 mo
(\000\013)sh
702.65 241 mo
(\000\025)sh
710.45 241 mo
(\000\023)sh
718.25 241 mo
(\000\025)sh
726.05 241 mo
(\000\023)sh
733.85 241 mo
(\000\014)sh
738.5 241 mo
(\000\003)sh
OSUAYI+ArialMT [18 0 0 -18 0 0 ]msf
742.4 241 mo
(\000\003)sh
747.4 241 mo
(\000\003)sh
OSUAYI+ArialMT [12 0 0 -12 0 0 ]msf
752.4 241 mo
(\000/)sh
759.05 241 mo
(\000L)sh
761.7 241 mo
(\000\003)sh
765.05 241 mo
(\000H)sh
771.7 241 mo
(\000W)sh
775.05 241 mo
(\000\003)sh
778.4 241 mo
(\000D)sh
785.05 241 mo
(\000O)sh
787.7 241 mo
(\000\021)sh
791.05 241 mo
(\000\003)sh
794.4 241 mo
(\000>)sh
797.75 241 mo
(\000\033)sh
804.4 241 mo
(\000\023)sh
811.05 241 mo
(\000@)sh
OSUAYH+Arial-BoldItalicMT [14.05 0 0 -14.05 0 0 ]msf
508.6 264.1 mo
(\000\))sh
517.15 264.1 mo
(\000/)sh
525.7 264.1 mo
(\000*)sh
536.6 264.1 mo
(\000X)sh
545.15 264.1 mo
(\000D)sh
552.95 264.1 mo
(\000U)sh
558.4 264.1 mo
(\000G)sh
566.95 264.1 mo
(\000\003)sh
570.85 264.1 mo
(\000\013)sh
575.5 264.1 mo
(\000\025)sh
583.3 264.1 mo
(\000\023)sh
591.1 264.1 mo
(\000\025)sh
598.9 264.1 mo
(\000\024)sh
606.7 264.1 mo
(\000\014)sh
611.35 264.1 mo
(\000\003)sh
OSUAYI+ArialMT [18 0 0 -18 0 0 ]msf
615.25 264.1 mo
(\000\003)sh
OSUAYI+ArialMT [12 0 0 -12 0 0 ]msf
620.25 264.1 mo
(\000\003)sh
623.6 264.1 mo
(\0001)sh
632.25 264.1 mo
(\000J)sh
638.9 264.1 mo
(\000X)sh
645.55 264.1 mo
(\000\\)sh
651.55 264.1 mo
(\000H)sh
658.2 264.1 mo
(\000Q)sh
664.85 264.1 mo
(\000\003)sh
668.2 264.1 mo
(\000H)sh
674.85 264.1 mo
(\000W)sh
678.2 264.1 mo
(\000\003)sh
681.55 264.1 mo
(\000D)sh
688.2 264.1 mo
(\000O)sh
690.85 264.1 mo
(\000\021)sh
694.2 264.1 mo
(\000\003)sh
697.55 264.1 mo
(\000>)sh
700.9 264.1 mo
(\000\033)sh
707.55 264.1 mo
(\000\024)sh
714.2 264.1 mo
(\000@)sh
OSUAYH+Arial-BoldItalicMT [14.05 0 0 -14.05 0 0 ]msf
508.6 294 mo
(\000\))sh
517.15 294 mo
(\000/)sh
525.7 294 mo
(\000')sh
535.8 294 mo
(\000H)sh
543.6 294 mo
(\000W)sh
548.25 294 mo
(\000H)sh
556.05 294 mo
(\000F)sh
563.85 294 mo
(\000W)sh
568.5 294 mo
(\000R)sh
577.05 294 mo
(\000U)sh
582.5 294 mo
(\000\003)sh
586.4 294 mo
(\000\013)sh
591.05 294 mo
(\000\025)sh
598.85 294 mo
(\000\023)sh
606.65 294 mo
(\000\025)sh
614.45 294 mo
(\000\025)sh
622.25 294 mo
(\000\014)sh
626.9 294 mo
(\000\003)sh
OSUAYI+ArialMT [18 0 0 -18 0 0 ]msf
630.8 294 mo
(\000\003)sh
635.8 294 mo
(\000\003)sh
OSUAYI+ArialMT [12 0 0 -12 0 0 ]msf
640.8 294 mo
(\000=)sh
648.15 294 mo
(\000K)sh
654.8 294 mo
(\000D)sh
661.45 294 mo
(\000Q)sh
668.1 294 mo
(\000J)sh
674.75 294 mo
(\000\003)sh
678.1 294 mo
(\000H)sh
684.75 294 mo
(\000W)sh
688.1 294 mo
(\000\003)sh
691.45 294 mo
(\000D)sh
698.1 294 mo
(\000O)sh
700.75 294 mo
(\000\021)sh
704.1 294 mo
(\000\003)sh
707.45 294 mo
(\000>)sh
710.8 294 mo
(\000\033)sh
717.45 294 mo
(\000\025)sh
724.1 294 mo
(\000@)sh
OSUAYH+Arial-BoldItalicMT [14.05 0 0 -14.05 0 0 ]msf
508.85 327.25 mo
(\000%)sh
518.95 327.25 mo
(\000D)sh
526.75 327.25 mo
(\000\))sh
535.3 327.25 mo
(\000\))sh
543.85 327.25 mo
(\000O)sh
547.75 327.25 mo
(\000H)sh
555.55 327.25 mo
(\000\003)sh
559.45 327.25 mo
(\000\013)sh
564.1 327.25 mo
(\000\025)sh
571.9 327.25 mo
(\000\023)sh
579.7 327.25 mo
(\000\025)sh
587.5 327.25 mo
(\000\024)sh
595.3 327.25 mo
(\000\014)sh
599.95 327.25 mo
(\000\003)sh
OSUAYI+ArialMT [18 0 0 -18 0 0 ]msf
603.85 327.25 mo
(\000\003)sh
608.85 327.25 mo
(\000\003)sh
OSUAYI+ArialMT [12 0 0 -12 0 0 ]msf
613.85 327.25 mo
(\000$)sh
621.85 327.25 mo
(\000Q)sh
628.5 327.25 mo
(\000G)sh
635.15 327.25 mo
(\000U)sh
639.15 327.25 mo
(\000H)sh
645.8 327.25 mo
(\000L)sh
648.45 327.25 mo
(\000Q)sh
655.1 327.25 mo
(\000D)sh
661.75 327.25 mo
(\000\003)sh
665.1 327.25 mo
(\000H)sh
671.75 327.25 mo
(\000W)sh
675.1 327.25 mo
(\000\003)sh
678.45 327.25 mo
(\000D)sh
685.1 327.25 mo
(\000O)sh
687.75 327.25 mo
(\000\021)sh
691.1 327.25 mo
(\000\003)sh
694.45 327.25 mo
(\000>)sh
697.8 327.25 mo
(\000\033)sh
704.45 327.25 mo
(\000\031)sh
711.1 327.25 mo
(\000@)sh
OSUAYH+Arial-BoldItalicMT [14.05 0 0 -14.05 0 0 ]msf
508.6 343.75 mo
(\000&)sh
518.7 343.75 mo
(\0005)sh
528.8 343.75 mo
(\000\))sh
537.35 343.75 mo
(\000/)sh
545.6 343.75 mo
(\000\003)sh
549.5 343.75 mo
(\000\013)sh
554.15 343.75 mo
(\000\025)sh
561.95 343.75 mo
(\000\023)sh
569.75 343.75 mo
(\000\025)sh
577.55 343.75 mo
(\000\024)sh
585.35 343.75 mo
(\000\014)sh
590 343.75 mo
(\000\003)sh
OSUAYI+ArialMT [18 0 0 -18 0 0 ]msf
593.9 343.75 mo
(\000\003)sh
598.9 343.75 mo
(\000\003)sh
OSUAYI+ArialMT [12 0 0 -12 0 0 ]msf
603.9 343.75 mo
(\000;)sh
611.9 343.75 mo
(\000L)sh
614.55 343.75 mo
(\000H)sh
621.2 343.75 mo
(\000\003)sh
624.55 343.75 mo
(\000H)sh
631.2 343.75 mo
(\000W)sh
634.55 343.75 mo
(\000\003)sh
637.9 343.75 mo
(\000D)sh
644.55 343.75 mo
(\000O)sh
647.2 343.75 mo
(\000\021)sh
650.55 343.75 mo
(\000\003)sh
653.9 343.75 mo
(\000>)sh
657.25 343.75 mo
(\000\033)sh
663.9 343.75 mo
(\000\032)sh
670.55 343.75 mo
(\000@)sh
OSUAYH+Arial-BoldItalicMT [14.05 0 0 -14.05 0 0 ]msf
508.6 395.5 mo
(\000\))sh
517.15 395.5 mo
(\000/)sh
525.7 395.5 mo
(\000$)sh
535.8 395.5 mo
(\0000)sh
547.45 395.5 mo
(\000\()sh
556.8 395.5 mo
(\000\003)sh
560.7 395.5 mo
(\000\013)sh
565.35 395.5 mo
(\000\025)sh
573.15 395.5 mo
(\000\023)sh
580.95 395.5 mo
(\000\025)sh
588.75 395.5 mo
(\000\025)sh
596.55 395.5 mo
(\000\014)sh
601.2 395.5 mo
(\000\003)sh
OSUAYI+ArialMT [18 0 0 -18 0 0 ]msf
605.1 395.5 mo
(\000\003)sh
610.1 395.5 mo
(\000\003)sh
OSUAYI+ArialMT [12 0 0 -12 0 0 ]msf
615.1 395.5 mo
(\0007)sh
622.45 395.5 mo
(\000K)sh
629.1 395.5 mo
(\000L)sh
631.75 395.5 mo
(\000H)sh
638.4 395.5 mo
(\000Q)sh
645.05 395.5 mo
(\000')sh
653.7 395.5 mo
(\000X)sh
660.35 395.5 mo
(\000F)sh
666.35 395.5 mo
(\000\003)sh
669.7 395.5 mo
(\000H)sh
676.35 395.5 mo
(\000W)sh
679.7 395.5 mo
(\000\003)sh
683.05 395.5 mo
(\000D)sh
689.7 395.5 mo
(\000O)sh
692.35 395.5 mo
(\000\021)sh
695.7 395.5 mo
(\000\003)sh
699.05 395.5 mo
(\000>)sh
702.4 395.5 mo
(\000\033)sh
709.05 395.5 mo
(\000\033)sh
715.7 395.5 mo
(\000@)sh
OSUAYH+Arial-BoldItalicMT [14.05 0 0 -14.05 0 0 ]msf
508.6 360.5 mo
(\000\))sh
517.15 360.5 mo
(\000/)sh
525.7 360.5 mo
(\000\020)sh
530.35 360.5 mo
(\000:)sh
543.55 360.5 mo
(\000%)sh
553.65 360.5 mo
(\000&)sh
563.75 360.5 mo
(\000\003)sh
567.65 360.5 mo
(\000\013)sh
572.3 360.5 mo
(\000\025)sh
580.1 360.5 mo
(\000\023)sh
587.9 360.5 mo
(\000\025)sh
595.7 360.5 mo
(\000\024)sh
603.5 360.5 mo
(\000\014)sh
608.15 360.5 mo
(\000\003)sh
OSUAYI+ArialMT [18 0 0 -18 0 0 ]msf
612.05 360.5 mo
(\000\003)sh
617.05 360.5 mo
(\000\003)sh
OSUAYI+ArialMT [12 0 0 -12 0 0 ]msf
622.05 360.5 mo
(\0006)sh
630.05 360.5 mo
(\000X)sh
636.7 360.5 mo
(\000Q)sh
643.35 360.5 mo
(\000\003)sh
646.7 360.5 mo
(\000H)sh
653.35 360.5 mo
(\000W)sh
656.7 360.5 mo
(\000\003)sh
660.05 360.5 mo
(\000D)sh
666.7 360.5 mo
(\000O)sh
669.35 360.5 mo
(\000\021)sh
672.7 360.5 mo
(\000\003)sh
676.05 360.5 mo
(\000>)sh
679.4 360.5 mo
(\000\033)sh
686.05 360.5 mo
(\000\034)sh
692.7 360.5 mo
(\000@)sh
OSUAYH+Arial-BoldItalicMT [14.05 0 0 -14.05 0 0 ]msf
509.05 414.7 mo
(\000\))sh
517.6 414.7 mo
(\000/)sh
526.15 414.7 mo
(\000$)sh
536.25 414.7 mo
(\0005)sh
546.35 414.7 mo
(\000\()sh
555.7 414.7 mo
(\000\003)sh
559.6 414.7 mo
(\000\013)sh
564.25 414.7 mo
(\000\025)sh
572.05 414.7 mo
(\000\023)sh
579.85 414.7 mo
(\000\025)sh
587.65 414.7 mo
(\000\025)sh
595.45 414.7 mo
(\000\014)sh
600.1 414.7 mo
(\000\003)sh
OSUAYI+ArialMT [18 0 0 -18 0 0 ]msf
604 414.7 mo
(\000\003)sh
609 414.7 mo
(\000\003)sh
OSUAYI+ArialMT [12 0 0 -12 0 0 ]msf
614 414.7 mo
(\000:)sh
624.9 414.7 mo
(\000D)sh
631.55 414.7 mo
(\000Q)sh
638.2 414.7 mo
(\000J)sh
644.85 414.7 mo
(\000\003)sh
648.2 414.7 mo
(\000H)sh
654.85 414.7 mo
(\000W)sh
658.2 414.7 mo
(\000\003)sh
661.55 414.7 mo
(\000D)sh
668.2 414.7 mo
(\000O)sh
670.85 414.7 mo
(\000\021)sh
674.2 414.7 mo
(\000\003)sh
677.55 414.7 mo
(\000>)sh
680.9 414.7 mo
(\000\034)sh
687.55 414.7 mo
(\000\023)sh
694.2 414.7 mo
(\000@)sh
OSUAYH+Arial-BoldItalicMT [14.05 0 0 -14.05 0 0 ]msf
508.6 378.9 mo
(\000$)sh
518.7 378.9 mo
(\000Q)sh
527.25 378.9 mo
(\000W)sh
531.9 378.9 mo
(\000L)sh
535.8 378.9 mo
(\000\020)sh
540.45 378.9 mo
(\000%)sh
550.55 378.9 mo
(\000D)sh
558.35 378.9 mo
(\000F)sh
566.15 378.9 mo
(\000N)sh
573.95 378.9 mo
(\000G)sh
582.5 378.9 mo
(\000R)sh
591.05 378.9 mo
(\000R)sh
599.6 378.9 mo
(\000U)sh
605.05 378.9 mo
(\000\003)sh
608.95 378.9 mo
(\000/)sh
617.5 378.9 mo
(\000H)sh
625.3 378.9 mo
(\000D)sh
633.1 378.9 mo
(\000U)sh
638.55 378.9 mo
(\000Q)sh
647.1 378.9 mo
(\000L)sh
651 378.9 mo
(\000Q)sh
659.55 378.9 mo
(\000J)sh
668.1 378.9 mo
(\000\003)sh
672 378.9 mo
(\000\013)sh
676.65 378.9 mo
(\000\025)sh
684.45 378.9 mo
(\000\023)sh
692.25 378.9 mo
(\000\025)sh
700.05 378.9 mo
(\000\024)sh
707.85 378.9 mo
(\000\014)sh
712.5 378.9 mo
(\000\003)sh
OSUAYI+ArialMT [18 0 0 -18 0 0 ]msf
716.4 378.9 mo
(\000\003)sh
721.4 378.9 mo
(\000\003)sh
OSUAYI+ArialMT [12 0 0 -12 0 0 ]msf
726.4 378.9 mo
(\000/)sh
733.05 378.9 mo
(\000L)sh
735.7 378.9 mo
(\000\003)sh
739.05 378.9 mo
(\000H)sh
745.7 378.9 mo
(\000W)sh
749.05 378.9 mo
(\000\003)sh
752.4 378.9 mo
(\000D)sh
759.05 378.9 mo
(\000O)sh
761.7 378.9 mo
(\000\021)sh
765.05 378.9 mo
(\000\003)sh
768.4 378.9 mo
(\000>)sh
771.75 378.9 mo
(\000\034)sh
778.4 378.9 mo
(\000\034)sh
785.05 378.9 mo
(\000@)sh
OSUAYH+Arial-BoldItalicMT [14.05 0 0 -14.05 0 0 ]msf
509.35 526.9 mo
(\000$)sh
519.45 526.9 mo
(\000G)sh
528 526.9 mo
(\000Y)sh
535.8 526.9 mo
(\000H)sh
543.6 526.9 mo
(\000U)sh
549.05 526.9 mo
(\000V)sh
556.85 526.9 mo
(\000U)sh
562.3 526.9 mo
(\000L)sh
566.2 526.9 mo
(\000D)sh
574 526.9 mo
(\000O)sh
577.9 526.9 mo
(\000\003)sh
581.8 526.9 mo
(\0008)sh
591.9 526.9 mo
(\000Q)sh
600.45 526.9 mo
(\000O)sh
604.35 526.9 mo
(\000H)sh
612.15 526.9 mo
(\000D)sh
619.95 526.9 mo
(\000U)sh
625.4 526.9 mo
(\000Q)sh
633.95 526.9 mo
(\000L)sh
637.85 526.9 mo
(\000Q)sh
646.4 526.9 mo
(\000J)sh
654.95 526.9 mo
(\000\003)sh
658.85 526.9 mo
(\000\013)sh
663.5 526.9 mo
(\000\025)sh
671.3 526.9 mo
(\000\023)sh
679.1 526.9 mo
(\000\025)sh
686.9 526.9 mo
(\000\024)sh
694.7 526.9 mo
(\000\014)sh
699.35 526.9 mo
(\000\003)sh
OSUAYI+ArialMT [18 0 0 -18 0 0 ]msf
703.25 526.9 mo
(\000\003)sh
708.25 526.9 mo
(\000\003)sh
OSUAYI+ArialMT [12 0 0 -12 0 0 ]msf
713.25 526.9 mo
(\000=)sh
720.6 526.9 mo
(\000H)sh
727.25 526.9 mo
(\000Q)sh
733.9 526.9 mo
(\000J)sh
740.55 526.9 mo
(\000\003)sh
743.9 526.9 mo
(\000H)sh
750.55 526.9 mo
(\000W)sh
753.9 526.9 mo
(\000\003)sh
757.25 526.9 mo
(\000D)sh
763.9 526.9 mo
(\000O)sh
766.55 526.9 mo
(\000\021)sh
769.9 526.9 mo
(\000\003)sh
773.25 526.9 mo
(\000>)sh
776.6 526.9 mo
(\000\034)sh
783.25 526.9 mo
(\000\024)sh
789.9 526.9 mo
(\000@)sh
OSUAYH+Arial-BoldItalicMT [14.05 0 0 -14.05 0 0 ]msf
508.6 457.15 mo
(\000%)sh
518.7 457.15 mo
(\000U)sh
524.15 457.15 mo
(\000L)sh
528.05 457.15 mo
(\000G)sh
536.6 457.15 mo
(\000J)sh
545.15 457.15 mo
(\000L)sh
549.05 457.15 mo
(\000Q)sh
557.6 457.15 mo
(\000J)sh
566.15 457.15 mo
(\000\003)sh
570.05 457.15 mo
(\0000)sh
581.7 457.15 mo
(\000R)sh
590.25 457.15 mo
(\000G)sh
598.8 457.15 mo
(\000H)sh
606.6 457.15 mo
(\000\003)sh
610.5 457.15 mo
(\000&)sh
620.6 457.15 mo
(\000R)sh
629.15 457.15 mo
(\000Q)sh
637.7 457.15 mo
(\000Q)sh
646.25 457.15 mo
(\000H)sh
654.05 457.15 mo
(\000F)sh
661.85 457.15 mo
(\000W)sh
666.5 457.15 mo
(\000L)sh
670.4 457.15 mo
(\000Y)sh
678.2 457.15 mo
(\000L)sh
682.1 457.15 mo
(\000W)sh
686.75 457.15 mo
(\000\\)sh
694.55 457.15 mo
(\000\003)sh
698.45 457.15 mo
(\000\013)sh
703.1 457.15 mo
(\000\025)sh
710.9 457.15 mo
(\000\023)sh
718.7 457.15 mo
(\000\025)sh
726.5 457.15 mo
(\000\023)sh
734.3 457.15 mo
(\000\014)sh
738.95 457.15 mo
(\000\003)sh
OSUAYI+ArialMT [18 0 0 -18 0 0 ]msf
742.85 457.15 mo
(\000\003)sh
747.85 457.15 mo
(\000\003)sh
OSUAYI+ArialMT [12 0 0 -12 0 0 ]msf
752.85 457.15 mo
(\000=)sh
760.2 457.15 mo
(\000K)sh
766.85 457.15 mo
(\000D)sh
773.5 457.15 mo
(\000R)sh
780.15 457.15 mo
(\000\003)sh
783.5 457.15 mo
(\000H)sh
790.15 457.15 mo
(\000W)sh
793.5 457.15 mo
(\000\003)sh
796.85 457.15 mo
(\000D)sh
803.5 457.15 mo
(\000O)sh
806.15 457.15 mo
(\000\021)sh
809.5 457.15 mo
(\000\003)sh
812.85 457.15 mo
(\000>)sh
816.2 457.15 mo
(\000\034)sh
822.85 457.15 mo
(\000\025)sh
829.5 457.15 mo
(\000@)sh
OSUAYH+Arial-BoldItalicMT [14.05 0 0 -14.05 0 0 ]msf
509.05 480 mo
(\000.)sh
519.15 480 mo
(\000Q)sh
527.7 480 mo
(\000R)sh
536.25 480 mo
(\000Z)sh
547.15 480 mo
(\000O)sh
551.05 480 mo
(\000H)sh
558.85 480 mo
(\000G)sh
567.4 480 mo
(\000J)sh
575.95 480 mo
(\000H)sh
583.75 480 mo
(\000\003)sh
587.65 480 mo
(\000')sh
597.75 480 mo
(\000L)sh
601.65 480 mo
(\000V)sh
609.45 480 mo
(\000W)sh
614.1 480 mo
(\000L)sh
618 480 mo
(\000O)sh
621.9 480 mo
(\000O)sh
625.8 480 mo
(\000D)sh
633.6 480 mo
(\000W)sh
638.25 480 mo
(\000L)sh
642.15 480 mo
(\000R)sh
650.7 480 mo
(\000Q)sh
659.25 480 mo
(\000\003)sh
663.15 480 mo
(\000\013)sh
667.8 480 mo
(\000\025)sh
675.6 480 mo
(\000\023)sh
683.4 480 mo
(\000\025)sh
691.2 480 mo
(\000\023)sh
699 480 mo
(\000\014)sh
703.65 480 mo
(\000\003)sh
OSUAYI+ArialMT [18 0 0 -18 0 0 ]msf
707.55 480 mo
(\000\003)sh
712.55 480 mo
(\000\003)sh
OSUAYI+ArialMT [12 0 0 -12 0 0 ]msf
717.55 480 mo
(\000.)sh
725.55 480 mo
(\000R)sh
732.2 480 mo
(\000W)sh
735.55 480 mo
(\000D)sh
742.2 480 mo
(\000\003)sh
745.55 480 mo
(\000H)sh
752.2 480 mo
(\000W)sh
755.55 480 mo
(\000\003)sh
758.9 480 mo
(\000D)sh
765.55 480 mo
(\000O)sh
768.2 480 mo
(\000\021)sh
771.55 480 mo
(\000\003)sh
774.9 480 mo
(\000>)sh
778.25 480 mo
(\000\034)sh
784.9 480 mo
(\000\026)sh
791.55 480 mo
(\000@)sh
OSUAYH+Arial-BoldItalicMT [14.05 0 0 -14.05 0 0 ]msf
508.6 501.35 mo
(\000*)sh
519.5 501.35 mo
(\000D)sh
527.3 501.35 mo
(\000Q)sh
535.85 501.35 mo
(\000J)sh
544.4 501.35 mo
(\0006)sh
553.75 501.35 mo
(\000Z)sh
564.65 501.35 mo
(\000H)sh
572.45 501.35 mo
(\000H)sh
580.25 501.35 mo
(\000S)sh
588.8 501.35 mo
(\000\003)sh
592.7 501.35 mo
(\000\013)sh
597.35 501.35 mo
(\000\025)sh
605.15 501.35 mo
(\000\023)sh
612.95 501.35 mo
(\000\025)sh
620.75 501.35 mo
(\000\023)sh
628.55 501.35 mo
(\000\014)sh
633.2 501.35 mo
(\000\003)sh
OSUAYI+ArialMT [18 0 0 -18 0 0 ]msf
637.1 501.35 mo
(\000\003)sh
642.1 501.35 mo
(\000\003)sh
OSUAYI+ArialMT [12 0 0 -12 0 0 ]msf
647.1 501.35 mo
(\000=)sh
654.45 501.35 mo
(\000K)sh
661.1 501.35 mo
(\000X)sh
667.75 501.35 mo
(\000\003)sh
671.1 501.35 mo
(\000H)sh
677.75 501.35 mo
(\000W)sh
681.1 501.35 mo
(\000\003)sh
684.45 501.35 mo
(\000D)sh
691.1 501.35 mo
(\000O)sh
693.75 501.35 mo
(\000\021)sh
697.1 501.35 mo
(\000\003)sh
700.45 501.35 mo
(\000>)sh
703.8 501.35 mo
(\000\034)sh
710.45 501.35 mo
(\000\027)sh
717.1 501.35 mo
(\000@)sh
%ADOBeginSubsetFont: PAAAAA+Arial-BoldMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PAAAAA+Arial-BoldMT 1 GetGlyphDirectory
75 <001C60D8A8C9B7D8BE30E20DCA6EE6AB6CC3B52F6392A45738EC6E57C5FD
4B5006DD4CC13130165A71E6C8AD32848FD70F464465300BAF67B8EDC5E52749
AF8D970E7EFFDCC8EF63F6AB31364E59004A6FCF5A143C0BB48A0AC6C4FDED13
12DDD5BAEDEFE14256E656A094680FE5979938> |
!
end
end end
%ADOEndSubsetFont
OSUAYG+Arial-BoldMT [20.05 0 0 -20.05 0 0 ]msf
7.2 221.45 mo
(\000')sh
21.65 221.45 mo
(\000H)sh
32.75 221.45 mo
(\000I)sh
39.4 221.45 mo
(\000H)sh
50.5 221.45 mo
(\000Q)sh
62.7 221.45 mo
(\000V)sh
73.8 221.45 mo
(\000H)sh
7.2 245.45 mo
(\0000)sh
23.85 245.45 mo
(\000H)sh
34.95 245.45 mo
(\000W)sh
41.6 245.45 mo
(\000K)sh
53.8 245.45 mo
(\000R)sh
66 245.45 mo
(\000G)sh
78.2 245.45 mo
(\000V)sh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 /3 ]]
] del_res
/OSUAYI+ArialMT-Identity-H uf
/OSUAYI+ArialMT /CIDFont ur
/OSUAYH+Arial-BoldItalicMT-Identity-H uf
/OSUAYH+Arial-BoldItalicMT /CIDFont ur
/OSUAYG+Arial-BoldMT-Identity-H uf
/OSUAYG+Arial-BoldMT /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
